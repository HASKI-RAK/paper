{
  "metadata": {
    "timestamp": "20250123041225",
    "experiment_name": "ng_engsaf"
  },
  "parameters": {
    "function_name": "run_engsaf_dataset",
    "function_doc": "Run evaluation on EngSAF dataset.",
    "inputs": [
      {
        "args": [],
        "kwargs": {
          "path": "/ws/editor/strategie_leicht_benchmark_de/1/1"
        },
        "description": "EngSAF dataset evaluation with german prompt"
      },
      {
        "args": [],
        "kwargs": {
          "path": "/ws/editor/strategie_leicht_benchmark/1/1"
        },
        "description": "EngSAF dataset evaluation with english prompt"
      }
    ],
    "datasets": {
      "engsaf": {
        "path": "datasets/engsaf/processed",
        "name": "engsaf"
      }
    }
  },
  "results": [
    {
      "question_id": "48",
      "model_score": 12.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "FALSE"
    },
    {
      "question_id": "4",
      "model_score": 42.0,
      "human_score": 1.0,
      "question": "A rating curve is only valid when?",
      "instructor_answer": "A rating curve is only valid when there is no over flow or flood in a region.",
      "student_answer": "Rating curve is valid only when there is no reservoir water entering stream and no effect of back water."
    },
    {
      "question_id": "105",
      "model_score": 25.7,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True\nThe PC in the user mode of the process will already cross the instruction which caused the PG fault. After the PG fault is handled, the process in the user mode start executing the next instruction."
    },
    {
      "question_id": "64",
      "model_score": 62.0,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Red color has hue around 0 degrees.  So a narrow range of H values around 0. Each rose has a wide of red color. So saturation S can take broad range of values (anywhere from 0.5 to Q"
    },
    {
      "question_id": "102",
      "model_score": 97.1,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration"
    },
    {
      "question_id": "64",
      "model_score": 35.4,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A narrow range around 0 for hue"
    },
    {
      "question_id": "104",
      "model_score": 23.2,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) Semaphore Privileged ISA instruction\nSince the ISA is publicly available, the process can use that to try to change some critical parameters via their instruction"
    },
    {
      "question_id": "8",
      "model_score": 26.2,
      "human_score": 0.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N4 as entry of N4 is not replicated in majority of the nodes"
    },
    {
      "question_id": "33",
      "model_score": 25.0,
      "human_score": 1.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "with along with the tree root, drops from the tree"
    },
    {
      "question_id": "64",
      "model_score": 23.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0 degrees of H"
    },
    {
      "question_id": "104",
      "model_score": 11.5,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " The program might try to disable the timer interrupt to be able to run forever (the process knows how to do this since the 1st has an instruction for this).\nThe program might try to schedule one of its childs directly after its execution but the OS will not allow that."
    },
    {
      "question_id": "65",
      "model_score": 51.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Sometimes we can't define the member functions until subclass is specified this separation is advantageous.\nmoreover we can the same function for different purposes then i.e dynamic binding."
    },
    {
      "question_id": "46",
      "model_score": 34.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "**TRUE**, the OS the the time sharing or context switch to schedule READY processes and share the CPU for multitasking."
    },
    {
      "question_id": "86",
      "model_score": 83.3,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "for uniform representation of rotation, translation, scaling. this allow optimization"
    },
    {
      "question_id": "47",
      "model_score": 5.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "**TRUE**"
    },
    {
      "question_id": "72",
      "model_score": 30.2,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "Since space images have a variety of applications, it is very difficult to judge the level of compression of the image.That is, it is very difficult to make the quantization table and compression rate"
    },
    {
      "question_id": "40",
      "model_score": 2.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "TRUE"
    },
    {
      "question_id": "45",
      "model_score": 81.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue. Scheduling can be done in kernel mode only.\n"
    },
    {
      "question_id": "65",
      "model_score": 76.4,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) shows all the function declarations of the class at once for easy access to the function declarations.\n2) seperates the abstraction from internal code and makes the code neater and easier to access"
    },
    {
      "question_id": "90",
      "model_score": 67.7,
      "human_score": 0.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Sometimes linear transformation feature vectors do not give proper result while classification as discriminant function wont work properly on the data. Hence, nonlinear transformation of feature vector is necessary so that the classitication algorithm can make poper estimate from the input vector"
    },
    {
      "question_id": "10",
      "model_score": 45.9,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "Increasing the priority of a low priority process present in critical section so that it can complete its execution and give chance to high priority process (strucked in cpu and not able to enter critical section or execute) is called Priority Inversion"
    },
    {
      "question_id": "75",
      "model_score": 40.0,
      "human_score": 0.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "weighing factor x = 1\nvalid for only channel routing \n\n"
    },
    {
      "question_id": "99",
      "model_score": 50.4,
      "human_score": 1.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "Can be coated on selective materials only"
    },
    {
      "question_id": "87",
      "model_score": 57.0,
      "human_score": 0.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "Due to very fine sand used in slow sand filter, most of suspended solids i.e. particulates get removed at the top layer of the filtration medium itself."
    },
    {
      "question_id": "67",
      "model_score": 99.6,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "method of moments, method of maximum likelihood"
    },
    {
      "question_id": "15",
      "model_score": 31.5,
      "human_score": 0.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "The time duration of no rainfall."
    },
    {
      "question_id": "102",
      "model_score": 67.0,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "particle size, ultrasonic frequency , tool cross section and vibration amplitude "
    },
    {
      "question_id": "89",
      "model_score": 52.2,
      "human_score": 0.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "It can be used in un-gauged basins to calculate the discharge for precipitation events"
    },
    {
      "question_id": "43",
      "model_score": 35.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse. There are no priority in which the process has to be terminated and also there are interrupt such that if they arise remaining \"ready\" process are ignored and this is handled immediately.\n"
    },
    {
      "question_id": "94",
      "model_score": 83.9,
      "human_score": 2.0,
      "question": "Why for an asymmetric variable, median is the best measure of central tendency?",
      "instructor_answer": "because around median 50 percent of the distribution is on the left and 50 percent is on the right , so in case of asymmetrial distribution where it is skewed, median will be the best measure of central tendency as mean in case of assymetrical distribution is not accurate measure of central tendency",
      "student_answer": "because median divides the entire distribution (CDF) into two equal halves.\nthat is , the area under distribution to the left of median = area under distribution curve to its right"
    },
    {
      "question_id": "65",
      "model_score": 58.0,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Writing all declarations at a single place helps others to know how exactly is the class built.\n\n2. \n"
    },
    {
      "question_id": "57",
      "model_score": 12.6,
      "human_score": 0.0,
      "question": "The dispersion number characterizes the degree of dispersion relative to ________________.",
      "instructor_answer": "the degree of advection",
      "student_answer": "Dispersion coefficient"
    },
    {
      "question_id": "65",
      "model_score": 75.3,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. It makes the class definition compact and easy to understand, which improves readability of the code and helps us better understand all the functions that a class provides easily, making it de-cluttered.\n\n2. One can easily modify/add to the class definition when defined outside the class without having to modify the class contents, thus making it more accessible, especially when code is divided into files and we need to share the code with slight changes, then we could just make the change in one file containing all function definitions."
    },
    {
      "question_id": "67",
      "model_score": 16.4,
      "human_score": 0.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "point and interval estimation"
    },
    {
      "question_id": "41",
      "model_score": 3.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "**TRUE**"
    },
    {
      "question_id": "42",
      "model_score": 71.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFALSE, the ability to send an interrupt just has an ability to send a message which traps into OS."
    },
    {
      "question_id": "48",
      "model_score": 38.3,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False.  If exec system call through an error and returns to parent process then it doesn't make a difference whether it is executed or not, child process may still continue. eg. int rc = -1; if (rc == 0) { // do child part } else { //execve (\"bad_executable\"); printf(\"wait\"); }"
    },
    {
      "question_id": "42",
      "model_score": 11.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "FALSE"
    },
    {
      "question_id": "104",
      "model_score": 21.5,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) Scheduling context switch\nUser cannot schedule a program/process or do context switch between programs/processes.\n\n2) Memory access - updates\nAn user process cannot directly update the process data/information in the memory."
    },
    {
      "question_id": "104",
      "model_score": 16.6,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " (i) Attempt to write to a random block on the disk by using larger offset than the size of a file it has opened, or by trying to"
    },
    {
      "question_id": "36",
      "model_score": 50.3,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1) water quality\n2) abundance of water\n3) \n4)"
    },
    {
      "question_id": "92",
      "model_score": 51.4,
      "human_score": 2.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Image segmentation require Detection of edges and corner when we are doing edge based segmentation. If there are many sharp edges, edge detector may treat boundary as different separate boundary. "
    },
    {
      "question_id": "2",
      "model_score": 99.9,
      "human_score": 2.0,
      "question": "\nWhat\nis the Full form of RCP?",
      "instructor_answer": "Representative Concentration Pathway",
      "student_answer": "representative concentration pathway"
    },
    {
      "question_id": "45",
      "model_score": 90.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue, a process cannot schedule the target process on its own. It's decided by the scheduler (OS).\n"
    },
    {
      "question_id": "66",
      "model_score": 70.8,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "Market based and Quick/convenient"
    },
    {
      "question_id": "51",
      "model_score": 50.1,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "ionisation of surface and alteration in its surface like in shape etc."
    },
    {
      "question_id": "39",
      "model_score": 27.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "True. Pipe is a global fd that we use to communicate between processes."
    },
    {
      "question_id": "62",
      "model_score": 41.3,
      "human_score": 1.0,
      "question": "To reduce spatial and temporal water availability problems ----------- and ----------- are constructed",
      "instructor_answer": "dams & reservoir/canals",
      "student_answer": "large, medium and small reserviors"
    },
    {
      "question_id": "65",
      "model_score": 61.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.It facilitates dynamic binding so that same function declaration can be used in two different classes.\n2.Seperates the user friendly Interface part of an abstraction with the implementation part ."
    },
    {
      "question_id": "53",
      "model_score": 68.2,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "The features associated with the surroundings of roads and the elements present in the roads itself will be useful such as:  Brides (water on Both the sides), Querpass (Roads going above and below a single road) and Highway (4-lane road with a divider)"
    },
    {
      "question_id": "21",
      "model_score": 79.3,
      "human_score": 2.0,
      "question": "Differentiate between true random number and pseudorandom number generators.",
      "instructor_answer": "TRNG uses unpredictable physical mean for computation of random\nnumber, results are truely random and unpredictable , some random numbers cannot be reproduced. PRNG uses mathematical algorithm which are computer based. Its logical which uses mathematical formulas to generate sequence of random number. Some random number can be produced.",
      "student_answer": "The difference b/w these two is that A True random number genterator uses an unpredictable physical means to generate numbers(like atmosphere noises). Pseduo randon mumber generator uses mathematical Algorithms (completety computer generated)"
    },
    {
      "question_id": "80",
      "model_score": 10.0,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "symmetry about 2 orthogonal planes"
    },
    {
      "question_id": "45",
      "model_score": 30.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "False. Reason: Context switching can only done by OS. No user-level process have such permissions to schedule processes. Hence it doesn't have capability to initiate context switch (provided/agreed)."
    },
    {
      "question_id": "29",
      "model_score": 97.6,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "Rainfall Intensity, time"
    },
    {
      "question_id": "33",
      "model_score": 84.5,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "stem flow, through fall"
    },
    {
      "question_id": "43",
      "model_score": 79.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse. After an interrupt, OS can context switch to another process if the conditions are met. It need not to return to the same process."
    },
    {
      "question_id": "67",
      "model_score": 96.2,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "Method of moments \nMaximum likelihood"
    },
    {
      "question_id": "104",
      "model_score": -1.3,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": "No picture has been uploaded."
    },
    {
      "question_id": "66",
      "model_score": 71.7,
      "human_score": 1.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "market based and quick & easy"
    },
    {
      "question_id": "40",
      "model_score": 94.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTRUE. We can't read from using fd[1] or write using fd[0] that's the rule of pipe syscall."
    },
    {
      "question_id": "68",
      "model_score": 66.5,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "MLP with multiple hidden layers is desirable when the problem is complex and cannot be solved by a single/no hidden layer case. secondly lot of minor details needs to be picked up of the function. time is not a hard constraint and accuracy is more important"
    },
    {
      "question_id": "44",
      "model_score": 16.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse"
    },
    {
      "question_id": "65",
      "model_score": 29.1,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Class definition along with the member function declarations can be stored in separat header file and the"
    },
    {
      "question_id": "65",
      "model_score": 79.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Readability: Makes the code easier to read to the user \n\n2) "
    },
    {
      "question_id": "49",
      "model_score": 65.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, executables can be used to instantiate multiple processes simultaneously but each they can have different PCB as in the case of 'fork'."
    },
    {
      "question_id": "10",
      "model_score": 74.5,
      "human_score": 1.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "lower priority tasks gets to CPU time over higher priority tasks"
    },
    {
      "question_id": "105",
      "model_score": 81.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. The first part of state move is true, but it does not necessarily execute the next instruction. After returning from trap, it then again needs to execute the same instruction which lead to page fault so that it finally gets the mapped page which is allocated during page handling, and then it will execute next instruction."
    },
    {
      "question_id": "10",
      "model_score": 36.5,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "when Higher priority process is preempted by Lower priority process"
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, It will recreate the following instruction for itself."
    },
    {
      "question_id": "63",
      "model_score": 59.0,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Narrow range around 120      . Gives green hue. (120      -T,120      +T) Example T~15      \n"
    },
    {
      "question_id": "46",
      "model_score": 29.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue, without the timer interrupt, the OS still has opportunities to schedule CPU which is controlled by scheduling. We cannot go into next process until this process terminates.\n"
    },
    {
      "question_id": "66",
      "model_score": 17.5,
      "human_score": 0.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "captures analyst confidence"
    },
    {
      "question_id": "64",
      "model_score": 62.7,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petals: \nHue: wide range around 0 degrees. for rose petals red colour is the dominant one along with some dark shadows.\nSaturation: in the low range (0-0.4). Lower "
    },
    {
      "question_id": "48",
      "model_score": 62.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False. Once after the fork() is called, child & parent becomes two different processes. So exec can be called in the child to become a Zombie Process on it will be killed by the parent before child termination but this may cause the child to become a zombie process. An Orphan process is always reaped by the original parent if exec() could not be implemented before child termination. Could may also become orphan process."
    },
    {
      "question_id": "104",
      "model_score": 63.4,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " * Disabling interrupts for monopolizing CPU - Disabling interrupts is a privileged action, if a user process tries to do so in order to run the CPU indefinitely, OS forbids it.\n\n\n* Accessing kernel stack and changing the context - Updating the context in the K stack can only be done by the OS, if a user process tries it (By accessing the corresponding virtual memory) the OS prevents it."
    },
    {
      "question_id": "65",
      "model_score": 68.3,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. When we see only the declaration of member function in the class we get an abstract idea of what the function will do from function name.\n2. The Class will look a bit more cleaner and compact if we just declare the functions in the class and define it outside them. If we want to view the implementation of the function, we can just navigate to that member function."
    },
    {
      "question_id": "99",
      "model_score": 13.4,
      "human_score": 0.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "increase abrasive resistance"
    },
    {
      "question_id": "105",
      "model_score": 87.3,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False\nThe OS handles the fault, allocates physical page and the executes the same instruction on which the fault occurred; otherwise that instruction remains would be lost"
    },
    {
      "question_id": "63",
      "model_score": 50.4,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "In H space narrow band around 120 degrees, broad range of I below 1, broad range of S above 0"
    },
    {
      "question_id": "64",
      "model_score": 77.0,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "create a saturation mask, with saturation above a certain threshold for S to eliminate grayish colors (maybe 0.2, could be lower). multiply with original image to get regions where the petals could possibly be. now create a hue mask from this image, with a narrow band in H centered around 0 degrees (red) or the natural shade of red in roses. multiply the mask with the original image to get the petals."
    },
    {
      "question_id": "6",
      "model_score": 16.2,
      "human_score": 0.0,
      "question": "Chi-square goodness of fit test evaluates the error between (                                                                                   ) and (                                                                                   )                    (                                                                     )",
      "instructor_answer": "Observed and assumed/Estimated PDF",
      "student_answer": "mean and standard deviation"
    },
    {
      "question_id": "41",
      "model_score": 31.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTRUE. A process can not be scheduled immediately because it will change child process.\n"
    },
    {
      "question_id": "86",
      "model_score": 53.2,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "to allow vector operations and transformations"
    },
    {
      "question_id": "9",
      "model_score": 76.2,
      "human_score": 1.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "future cash flows and discount rate"
    },
    {
      "question_id": "64",
      "model_score": 67.7,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue Angle for red is zero degrees. Hence, a narrow range of 0/360 degrees for H. For S, we need somewhat high value of saturation, since among R,G,B we have less color content of G and  B, whereas more color content of R. And narrow range of I around 0.3-0.4."
    },
    {
      "question_id": "92",
      "model_score": 31.9,
      "human_score": 0.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Classification uses image points involving eigen values."
    },
    {
      "question_id": "66",
      "model_score": 56.7,
      "human_score": 1.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "Market sentiment based, quick and convenient"
    },
    {
      "question_id": "78",
      "model_score": 66.5,
      "human_score": 1.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "cascade, pumped, storage"
    },
    {
      "question_id": "49",
      "model_score": 79.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n Process is a running instance of program\n there can be many instances of a single program and each process will have different PCB"
    },
    {
      "question_id": "56",
      "model_score": 83.8,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbiased, consistency, sufficiency"
    },
    {
      "question_id": "65",
      "model_score": 62.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)The program becomes more structured.\nFor example, in the class vending machine, if the member functions are insert_coin, serve_drink etc, then their working is evident from their name, hence implementation can be defined elsewhere and it makes our program more structured.\nBasically, inline and outline functions make our programs easily readable\n2) We might also want to declare a member function in one class without giving the definition if it is inherited.\nFor example\nShape{\n   public:\n      virtual int area(){}\n};\n\n\n/*The definition of area need not to be given here as for each child class the formula for area will be different, and then we can define these functions  for each child class afterwards, forample*/\n\nint Rectangle::area(){\n   return length*breadth;\n}\nint Circle::area(\n"
    },
    {
      "question_id": "104",
      "model_score": 22.2,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " A:- If the process contains undefined quantities such as any number divided by zero (0/0) or logarithmic value of a zero, in these cases the SEGVFAULT occurs and process is killed.\nIf the process tries to fetch any address which is out of bound ( i.e., out of virtual address space then again the interrupt occurs and the process is descheduled (or killed.\nIn both the above cases, the user mode goes into kernel mode and immediately the process gets descheduled ( i.e., by limited direct execution."
    },
    {
      "question_id": "49",
      "model_score": 90.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Different processes cannot share the same PCB, it is copied when fork (followed by exec) is called. Though in exceptional circumstances (for eg: copy-on-write optimization where no write occurs, they may share or temporarily memory temporarily."
    },
    {
      "question_id": "33",
      "model_score": 87.9,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "through fall and stem flow"
    },
    {
      "question_id": "72",
      "model_score": 97.5,
      "human_score": 2.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "Data rate should not exceed the channel capacity. Full capacity of the comm. channel should be utilized. Max quality should be preserved."
    },
    {
      "question_id": "40",
      "model_score": 32.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nFalse. Either can be used for read or write but they should be alternate (1-read, 0-write) and same should be used throughout the program. \n"
    },
    {
      "question_id": "39",
      "model_score": 93.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\n **False**, fd[0] -> for read\nfd[1] -> for write "
    },
    {
      "question_id": "71",
      "model_score": 68.5,
      "human_score": 1.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "Dust, Soot, Organic matter, Ash"
    },
    {
      "question_id": "96",
      "model_score": 52.7,
      "human_score": 1.0,
      "question": "Why to test the level of significance in hydrological time series analysis and modeling? Which test will you use to test the level of significance?",
      "instructor_answer": "The test of level of significance is used to test how well our prediced model fits observed data (goodness of Fit test).It is important because it gives the prorbability of rejecting the null hypothesis using a statistical test. The chi-square (X2) test is used to test the level of significance.",
      "student_answer": "Level of signficance is important in hydrological time series because it gives the probability of rejecting the null hypothesis in a Statistial test, whenever true. It shows the probability that the event could occur by chance, for find the lead of significance we can use t-test."
    },
    {
      "question_id": "65",
      "model_score": 70.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) keeping all the declaration together helps the programmer keep track of all the member functions he has introduced and what is left to be done. it also helps some other person trying to understand the code that what are the all properties/ functions of the object. \n2) it it easier to make changes to code later on as it does not change anything in the main part where declarations are made. reduce the chance for typos. \n3) the member functions may use other functions dec"
    },
    {
      "question_id": "25",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Full form of ELISA is ____________________.",
      "instructor_answer": "Enzyme linked immunosorbent assay",
      "student_answer": "enzyme linked immunosorbent assay"
    },
    {
      "question_id": "46",
      "model_score": 77.3,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "OS can schedule ready processes & share CPU without time slice. But to make it happen the running process should make a system call @ raise a signal so that the OS gains control & schedules next process until the child process terminates."
    },
    {
      "question_id": "84",
      "model_score": 23.5,
      "human_score": 1.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "major difference is the updation weights by learning on its own will increase or  will be more accurate in case of multilayer"
    },
    {
      "question_id": "44",
      "model_score": 22.4,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nSolution: False\nCPU have the capability to run multiple processes at the same time.\n"
    },
    {
      "question_id": "65",
      "model_score": 58.0,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. When we see only the declaration of member function in the class we get an abstract idea of what the function will do from function name.\n2. The Class will look a bit more cleaner and compact if we just declare the functions in the class and define it outside them. If we want to view the implementation of the function, we can just "
    },
    {
      "question_id": "83",
      "model_score": 86.0,
      "human_score": 1.0,
      "question": "What is the difference between basin order and channel order?",
      "instructor_answer": "Basin order is highest order of any stream in that basin whereas Channel order is order of stream\nwhich denotes that what order of streams has joined the channel.",
      "student_answer": "Order of Basin is the order of its highest ordered channel. Channel order places important role in deciding Basin order whereas Channel order is used to shows the branching level in river or run off systems."
    },
    {
      "question_id": "83",
      "model_score": 93.0,
      "human_score": 1.0,
      "question": "What is the difference between basin order and channel order?",
      "instructor_answer": "Basin order is highest order of any stream in that basin whereas Channel order is order of stream\nwhich denotes that what order of streams has joined the channel.",
      "student_answer": "The highest channel order of the basin is the\nbasin order whereas channel order is n if\n2(n-1) order channels joins\nit. For 1 channel order, it has no tributaries."
    },
    {
      "question_id": "60",
      "model_score": 49.7,
      "human_score": 1.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "Windrow composting\nBiodrying\nanaerobic process"
    },
    {
      "question_id": "65",
      "model_score": 24.6,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1: o advantage of separating declaration from definition is that it makes the block of the class smaller, because writing the description of the member functions make the class bigger.\n2:"
    },
    {
      "question_id": "66",
      "model_score": 73.7,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "market based , quick and convenient "
    },
    {
      "question_id": "85",
      "model_score": 25.1,
      "human_score": 2.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "it does not make distinction between horizontal and vertical weir"
    },
    {
      "question_id": "65",
      "model_score": 63.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "It reduces the clutter and co while declaring variables and functions/member functions all at a place"
    },
    {
      "question_id": "1",
      "model_score": 88.1,
      "human_score": 0.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "Capital structure doesn't change"
    },
    {
      "question_id": "79",
      "model_score": 97.2,
      "human_score": 2.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them."
    },
    {
      "question_id": "33",
      "model_score": 85.7,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "through fall, stem flow"
    },
    {
      "question_id": "49",
      "model_score": 71.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n while forking, diff process have diff PCB"
    },
    {
      "question_id": "56",
      "model_score": 64.7,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "efficient sufficient unbiased"
    },
    {
      "question_id": "71",
      "model_score": 82.1,
      "human_score": 1.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "dust particles like clay, salts etc          "
    },
    {
      "question_id": "42",
      "model_score": 34.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\n **FALSE**. A user process has the capability to initiate a context switch, as in the popen() case the 2'nd process is completely up to the OS process scheduler.\n"
    },
    {
      "question_id": "19",
      "model_score": 49.2,
      "human_score": 2.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "based on the location of current node decides where to move next"
    },
    {
      "question_id": "65",
      "model_score": 40.4,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "One of the advantage is that , if the implementation of the member function is long we may go some wrong with intendation and class would also become big ,program would look "
    },
    {
      "question_id": "53",
      "model_score": 67.9,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Different categories of roads could be based on the size of the road, build material, number of lanes. So for this the features which are necessary are pixel colour and the pixel width of road. "
    },
    {
      "question_id": "81",
      "model_score": 80.2,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "very low eigen values means high correlation in that axis of the transformation which means that the eigen vector will lose the most information among all the other eigen vectors. We can drop this feature for dimensionality reduction."
    },
    {
      "question_id": "1",
      "model_score": 92.7,
      "human_score": 2.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "constant capital structure during projection period"
    },
    {
      "question_id": "19",
      "model_score": 45.9,
      "human_score": 2.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "Takes actions like Rotate180, Rotate left/Rotate Right ...etc"
    },
    {
      "question_id": "44",
      "model_score": 79.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse. Without the timer interrupt, one has to call syscalls manually, so if a program doesn't have syscalls, it might take much time.\n"
    },
    {
      "question_id": "98",
      "model_score": 35.2,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "Excellent wear resistance"
    },
    {
      "question_id": "103",
      "model_score": 43.4,
      "human_score": 1.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "Expensive and high power consumption"
    },
    {
      "question_id": "3",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "                                                                                                                                                                                                                                                                                                                                                                   efficiency is the ratio of the quantity of water stored in the root zone of the crops to the quantity of water actually delivered into the field.",
      "instructor_answer": "Efficiency of water application",
      "student_answer": "efficiency of water application"
    },
    {
      "question_id": "47",
      "model_score": 86.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue. exec system can be used in any process."
    },
    {
      "question_id": "48",
      "model_score": 92.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False, exec system call can be called anywhere in parent or child processes."
    },
    {
      "question_id": "105",
      "model_score": 34.9,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True/False. It executes the faulting instruction first & then moves on only if\nIt executes the next instruction as sail the first time. The next time we again access, then no pagefault is encountered & data pc read."
    },
    {
      "question_id": "44",
      "model_score": 8.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "True."
    },
    {
      "question_id": "79",
      "model_score": 71.6,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "Any equation which canot be derived but progressed and accepted are empirical."
    },
    {
      "question_id": "41",
      "model_score": 26.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "Ans: FALSE -> A process can be interrupted due to and scheduled for completion."
    },
    {
      "question_id": "41",
      "model_score": 32.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "TRUE It may not be rescheduled immediately b'cos after the fork() schedules another process & it is still running without any interrupt"
    },
    {
      "question_id": "105",
      "model_score": 22.8,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True, that's due to lazy allocation means we will map the virtual address to physical address whenever the virtual address is accessed."
    },
    {
      "question_id": "68",
      "model_score": 58.3,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "when the single perceptron neural network is not able to train or learn well using training data and when there is a need for more than n-1 planes to classify the data given n is the no of classes into which data can be divided."
    },
    {
      "question_id": "49",
      "model_score": 89.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False.\n As PCB is different for different process even though the processes execute the same program simultaneously."
    },
    {
      "question_id": "69",
      "model_score": 37.7,
      "human_score": 0.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "The time period from start of reservoir until it is fully sedimented to the top is the Usable life of reservoir"
    },
    {
      "question_id": "100",
      "model_score": 59.7,
      "human_score": 2.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "Low MRR, Harmful to operator, Expensive equipment"
    },
    {
      "question_id": "40",
      "model_score": 16.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "False, both can be done."
    },
    {
      "question_id": "7",
      "model_score": 71.8,
      "human_score": 2.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "periodically removing the top 1-2cm of the filter media including the biological mat \"Schmutzdecke\". When the filter media height is minimum required, the discarded medium is cleaned and used again."
    },
    {
      "question_id": "46",
      "model_score": 29.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nFalse, the timer interrupt should be required to schedule READY processes and share the CPU for multitasking.\n"
    },
    {
      "question_id": "52",
      "model_score": 96.9,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a change in length / original length"
    },
    {
      "question_id": "63",
      "model_score": 72.2,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "As the green leaves and stem is green and greish green respectively, we have to segment it by changing the hue angle to 120 degrees and taking a conical angle around this angle and then adjususting the saturation"
    },
    {
      "question_id": "72",
      "model_score": 55.9,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "If compressed file is large and downlink has less capacity, transmission error willl take place. If it is too small, then information loss will happen which is undesirable to end users"
    },
    {
      "question_id": "44",
      "model_score": 92.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\n **False**, Some processes make use of **syscalls** on interrupt which shifts the control to OS, and hence OS can schedule other processes through this.\n"
    },
    {
      "question_id": "106",
      "model_score": 65.8,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "The child process hint needs to be added to the PTABLE so that the scheduler is aware of the existence of the process (and can hence, schedule it at some point). Since the context stored in the PCB in just a pointer to the OS was in (and not the process), it can be initialized to some arbitrary initialization context. fork() also holds the parent, but the child process was exactly similar to the parent one (i.e. it returns from fork() with the same values of all registers, is copied to the child's topframe while the topframe of child is initialized to the exception that the 'eax' in the topframe of child with the (indicating child return from fork() with value 0). Now, when on the schedule driven to schedule the child, the OS will switch to the child's context and now since there is a simulated return to the child kstack, it can form the parent, but when made, memory (all the registers values from the parent's return from fork() ) with value 0 (due to eax = 0 in child's topframe)."
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "Constant Capital Structure"
    },
    {
      "question_id": "75",
      "model_score": 26.5,
      "human_score": 1.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "The sum of muskigham parameter is 1\nprismatic storage is constant\nwedge storage is varriying\ns=f(Q)\n"
    },
    {
      "question_id": "82",
      "model_score": 74.1,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "A non-linear discriminant helps separate non linear data while a linear discriminant can only separate linear data."
    },
    {
      "question_id": "49",
      "model_score": 61.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "-> True, when we run multiple some executable of a process simultaneously, simultaneously on multiple terminals the processes of same\n False, different PCB is used for the same program with different process id (pid), when same binary program is used to execute more than one process simultaneously"
    },
    {
      "question_id": "64",
      "model_score": 68.6,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A narrow range of H around 0 degrees (Because Hue angle for red is around 0 degrees) and Intensity(I) centered around 0.5"
    },
    {
      "question_id": "14",
      "model_score": 14.6,
      "human_score": 0.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "it is the ratio of fourth moment of the data about mean"
    },
    {
      "question_id": "43",
      "model_score": 78.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFALSE. While handling the interrupt (in kernel mode), the OS might decide upon context switching  and schedule some other process on returning to user mode.\n"
    },
    {
      "question_id": "104",
      "model_score": 45.3,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " (i) disabling timer interrupt: This is one interrupt that tells os time is passing and this can't be done by sitting user process.\n(ii) When user process tries to override signal handler function of SIGKILL, SIGSTOP\n(iii) In x86 in virtual address 2GB are reserved for virtual user and kernel address space if we tries to access kernel address then os panics."
    },
    {
      "question_id": "56",
      "model_score": 81.9,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbiaseness, consistency, efficiency, "
    },
    {
      "question_id": "14",
      "model_score": 98.7,
      "human_score": 2.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "the difference between its own kurtosis coefficient and kurtosis coefficient of the normal distribution"
    },
    {
      "question_id": "53",
      "model_score": 67.8,
      "human_score": 0.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "the examples of useful features might be The width of the road (double lane/single lane). Presence / absence  of boundary/ foot path (residential/non residential roads) and separating different kinds of roads"
    },
    {
      "question_id": "74",
      "model_score": 78.5,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "If the number of hidden layer is very large than the neural  network will take a lot of time to train. Also It will be generalize poorly. It will be specific to the training sits and it won't be able to classify for a new set of features,"
    },
    {
      "question_id": "31",
      "model_score": 33.6,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "single descriminant function will classify one to one classification"
    },
    {
      "question_id": "15",
      "model_score": 28.6,
      "human_score": 1.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "Meteorological drought is defined by Intensity of wetness,that is Drought is (100- Intensity of wetness).If Drought is greater then 40% then it is called drought year."
    },
    {
      "question_id": "83",
      "model_score": 90.5,
      "human_score": 2.0,
      "question": "What is the difference between basin order and channel order?",
      "instructor_answer": "Basin order is highest order of any stream in that basin whereas Channel order is order of stream\nwhich denotes that what order of streams has joined the channel.",
      "student_answer": "Basin order is determined by the High stream order present in a particular basin. Generally, it is the order of the stream that reaches the outlet whereas Channel order is associated with each individual stream in the basin, starting from 1,2, 3 and highest orders."
    },
    {
      "question_id": "86",
      "model_score": 16.1,
      "human_score": 0.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "for maintaining the sam"
    },
    {
      "question_id": "21",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Differentiate between true random number and pseudorandom number generators.",
      "instructor_answer": "TRNG uses unpredictable physical mean for computation of random\nnumber, results are truely random and unpredictable , some random numbers cannot be reproduced. PRNG uses mathematical algorithm which are computer based. Its logical which uses mathematical formulas to generate sequence of random number. Some random number can be produced.",
      "student_answer": "TRNG uses unpredictable physical mean for computation of random\nnumber, results are truely random and unpredictable , some random numbers cannot be reproduced. PRNG uses mathematical algorithm which are computer based. Its logical which uses mathematical formulas to generate sequence of random number. Some random number can be produced."
    },
    {
      "question_id": "106",
      "model_score": 72.8,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "When allocating/creating a new process on the fork system calls the kernel Stack and trap frame of the parent process is copied to that of the child process. The only field which is not copied is the register which stores the return value of the system call (eax). For the parent process, the pid of the child process is returned and for the child process the value 0 is returned. What is noteworthy is that both the parent process and the child process store the same value in the eip registers which stores the value of the program counter or the instruction pointer. Hence, even the child process returns from a trap since the trap instruction was getting handled be right before its creation"
    },
    {
      "question_id": "94",
      "model_score": 78.8,
      "human_score": 1.0,
      "question": "Why for an asymmetric variable, median is the best measure of central tendency?",
      "instructor_answer": "because around median 50 percent of the distribution is on the left and 50 percent is on the right , so in case of asymmetrial distribution where it is skewed, median will be the best measure of central tendency as mean in case of assymetrical distribution is not accurate measure of central tendency",
      "student_answer": "As the median represents the central value of the set of data for that variable, it will represent the best measure of central tendency even though, the variable is asymmetric "
    },
    {
      "question_id": "68",
      "model_score": 18.7,
      "human_score": 0.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "if there are different initial weight then multilayer perception neural network with multiple layer are desirable"
    },
    {
      "question_id": "11",
      "model_score": 79.2,
      "human_score": 2.0,
      "question": "Define Slutzsky-Yule effect",
      "instructor_answer": "This effect states that summation or average of random series may generate osscilations when no such movements exist in the original set of data.",
      "student_answer": "The moving summation of average of random series may generate oscillation when no such movements exists in original data."
    },
    {
      "question_id": "65",
      "model_score": 63.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. A neater, more compact code inside the class {} block which easier easier to read and gain information about the existing members/member functions\n\n2. definitions listed separately "
    },
    {
      "question_id": "81",
      "model_score": 52.4,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "The very low eigen values convey the noise where as parts with large eigen values corresponds to noise free data."
    },
    {
      "question_id": "87",
      "model_score": 53.7,
      "human_score": 1.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "biological mechanism and mechanical both included but still we say it is biological mechanism becuase of the micro"
    },
    {
      "question_id": "33",
      "model_score": 65.4,
      "human_score": 1.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "Stem flow and leaves flow"
    },
    {
      "question_id": "64",
      "model_score": 43.5,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "narrow range around 0       for H and broad range around 0.5 for I"
    },
    {
      "question_id": "11",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Define Slutzsky-Yule effect",
      "instructor_answer": "This effect states that summation or average of random series may generate osscilations when no such movements exist in the original set of data.",
      "student_answer": "This effect states that summation or average of random series may generate osscilations when no such movements exist in the original set of data."
    },
    {
      "question_id": "8",
      "model_score": 60.5,
      "human_score": 0.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1 and N4 are not likely to be the leader as whole entries for any term are not present"
    },
    {
      "question_id": "7",
      "model_score": 6.2,
      "human_score": 0.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "physical and chemical processes"
    },
    {
      "question_id": "103",
      "model_score": 24.6,
      "human_score": 2.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "It is Energy inefficient because of High Power Consumption"
    },
    {
      "question_id": "49",
      "model_score": 33.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "TRUE: This is done using \"threads\". Here, the sub processes share a TCB (Thread control block) of their own and share the same PCB."
    },
    {
      "question_id": "69",
      "model_score": 76.6,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "is the life after the economic expiry of reservoir, where still it can be used for recreational purposes."
    },
    {
      "question_id": "64",
      "model_score": 63.3,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "The rose petals are mostly red in color, hence, a narrow range aroun"
    },
    {
      "question_id": "64",
      "model_score": 12.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A broad range of H around 0/360 degrees"
    },
    {
      "question_id": "46",
      "model_score": 52.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTRUE but CPU is not efficient without time interrupt until there is any interrupt or termination in process the process continues to run and other process are in READY state"
    },
    {
      "question_id": "64",
      "model_score": 39.0,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "in H space narrow band above 0 and below 360, broad range for I around 0.5 , broad range for S above 0"
    },
    {
      "question_id": "104",
      "model_score": 15.9,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " - user process may keep on running without exiting.\n- user process may change its PCB to handle cases in which it would have been controlled and thus process can gain control over CPU for extended period of time."
    },
    {
      "question_id": "32",
      "model_score": 89.3,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "when the natural slope is more than the longitudinal slope in the irrigation channel."
    },
    {
      "question_id": "65",
      "model_score": 41.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)The class definition is compact, and all the functions of the class are listed together.\n\n2)A function(B) defined after another function(A) can also "
    },
    {
      "question_id": "101",
      "model_score": 78.3,
      "human_score": 2.0,
      "question": "Write down the difference between seasonality and long-term oscillations in a hydrlogic time series data.",
      "instructor_answer": "Seasonality oscillation, Due to rotation of earth, around the sun, monthly and seasonal hydrologic events exhibit regular oscillating varations. Oscillations are found around the trend line some oscillations occur over very large period of time, known as long term oscillations. They are well distributed about their mean value.",
      "student_answer": "The variation in weather pattern due to rotation of earth around the sun bring seasonality. Long term is cyclic trend, and may be found near the trend line and well distributed around mean."
    },
    {
      "question_id": "48",
      "model_score": 94.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. \nParent process and child process are two individual processes and hence in no way restrict the other processes execution. We can use exec in parent even before the child terminates."
    },
    {
      "question_id": "84",
      "model_score": 99.9,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features."
    },
    {
      "question_id": "81",
      "model_score": 70.1,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "very low eigen values of PCT conveys least variance axes of corresponding eigen vectors of that values and represent noise in the input image of high dimension feature vector."
    },
    {
      "question_id": "105",
      "model_score": 28.9,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True/False. On a page fault, as the OS is using a lazy allocation policy."
    },
    {
      "question_id": "36",
      "model_score": 80.2,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1. standard of living\n2. population of the town\n3. geographic location of the town\n4. climatic conditions of the town"
    },
    {
      "question_id": "77",
      "model_score": 44.8,
      "human_score": 1.0,
      "question": "What are the two important scales in Hydrology? ---------------------",
      "instructor_answer": "Availability of driking water, time scale, length of the process, spatial scale.",
      "student_answer": "Availability of drinking water, water transportation "
    },
    {
      "question_id": "66",
      "model_score": 73.2,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "market sentiment based; quick & convenient"
    },
    {
      "question_id": "66",
      "model_score": 48.2,
      "human_score": 1.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "ease of use, arrival at estimates "
    },
    {
      "question_id": "64",
      "model_score": 64.1,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "\"a narrow range around 0      degrees for H\"(as for red color hue is zero degrees)\n\"a range around 0.75 to 1 for I\"(condition for I can be loosened a bit ad intensity may vary a bit depending on RGB values),\n\"a range from [0, 0.15] and [0.8, 1] for S\"(the lower range on S is mainly to capture blackish red portion in bottom left and center left part of the images, which have very low saturation)"
    },
    {
      "question_id": "42",
      "model_score": 16.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nNo, it can be done in privileged operation."
    },
    {
      "question_id": "105",
      "model_score": 34.6,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True\nWhen a page fault occurs, it ends up in trap handler where new page is allocated and the instruction that initiated the page fault is returned to. And next instruction is proceeded with (whenever that process is scheduled) as if page was already allocated."
    },
    {
      "question_id": "19",
      "model_score": 55.1,
      "human_score": 1.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "It decides the actions to be taken by the eBot with respect to the current node."
    },
    {
      "question_id": "39",
      "model_score": 47.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse, write on fd[0] & read on fd[0] is only possible.\n"
    },
    {
      "question_id": "101",
      "model_score": 66.1,
      "human_score": 1.0,
      "question": "Write down the difference between seasonality and long-term oscillations in a hydrlogic time series data.",
      "instructor_answer": "Seasonality oscillation, Due to rotation of earth, around the sun, monthly and seasonal hydrologic events exhibit regular oscillating varations. Oscillations are found around the trend line some oscillations occur over very large period of time, known as long term oscillations. They are well distributed about their mean value.",
      "student_answer": "Seasonality oscillation occurs certion period in a year. Long-torm oscillation, as the name suggest, the period of this oscillation is high, may be\nthousands of year."
    },
    {
      "question_id": "104",
      "model_score": 4.1,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": "The image is a blank page. There is no text to be extracted."
    },
    {
      "question_id": "65",
      "model_score": 67.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. By giving declaration at one place we can easily get the functions used in the program without alot scrolling\n2.Makes easy to modify the code in future. \n"
    },
    {
      "question_id": "31",
      "model_score": 54.4,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "In such case let the range of the discriminant function be then the function's range can be divided into n parts (given there are n classes). clear boundary for each class."
    },
    {
      "question_id": "49",
      "model_score": 89.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n Each instance of a program i.e. each process has its own PCB.\n Because each process has its own stack, heap, & code/data blocks and also may be working on different inputs. So, each process needs its own PCB."
    },
    {
      "question_id": "15",
      "model_score": 49.2,
      "human_score": 1.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "It is characterized by deficiency in the precipitation from the annual precipitation if deficiency is more than 25 percent it is"
    },
    {
      "question_id": "104",
      "model_score": 18.5,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " A user process may try to peek and read other process's data form it's files.\nThe user process may schedule itself before any other process gets to schedule again and again.\nThe user process may attempt to change the timer interrupt value to a larger value so that it gets more CPU time.\n\nThese all attempts are prevented by the OS via LDE setup."
    },
    {
      "question_id": "76",
      "model_score": 14.9,
      "human_score": 0.0,
      "question": "What are the two important aspects of reservoir routing under a flood control criterion?",
      "instructor_answer": "peak discharge reduced and\n peak flow gets shifted",
      "student_answer": "finding the muskingham coefficients and the outflow discharge"
    },
    {
      "question_id": "64",
      "model_score": 78.2,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Narrow range of rose Red hue (330 to 340 degrees approx)\n\nbroad range of intensity (from 0.1 to 1)\n\n narrow range of saturation from (0.8 to 1)"
    },
    {
      "question_id": "26",
      "model_score": 67.3,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "produce custom and precision parts at high speed and to cut holes in any shape."
    },
    {
      "question_id": "67",
      "model_score": 47.5,
      "human_score": 1.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "rank regression (least square), maximum likelihood"
    },
    {
      "question_id": "49",
      "model_score": 62.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False - Each process has a different PCB. Its threads will have the same PCB for a program"
    },
    {
      "question_id": "40",
      "model_score": 2.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTRUE"
    },
    {
      "question_id": "40",
      "model_score": 41.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "**False** Vice-versa -> read using fd[0] can't be written using fd[1] -> this is NOT how pipe works -> the fd[0] input in pipe (fd[0]) while the fd[1] reads from the pipe (fd[1])."
    },
    {
      "question_id": "47",
      "model_score": 26.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nF\non successfull exec system call / parent process will also exit. Should not call exec system call from child process."
    },
    {
      "question_id": "65",
      "model_score": 71.3,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)Whole interface is presented in a better and easy to understand manner by separating declaration and definition.\n\n2)We can restrict someone form viewing implementation by putting declaration and definition in separate modules. "
    },
    {
      "question_id": "24",
      "model_score": 42.5,
      "human_score": 1.0,
      "question": "For cooling, the samples from oven or furnace are moved to desiccator primarily to                                                       ",
      "instructor_answer": "bring down the temperature without any type of condensation process or moisture addition from surrounding",
      "student_answer": "To protect chemical that are hygroscopic which react with water in humidity"
    },
    {
      "question_id": "65",
      "model_score": 34.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) it gives the scope for dynamic binding since the function can be declared in super class and it's several new definitions can be defined in its subclasses \n\n2) this helps in role playing we can have 2 seperate parent classes defined for the two different roles and then can make a child inheriting both the classes and then as required we could directly call functions from the child class by declaring pointer of the respective parent role we want \nthis is only pos"
    },
    {
      "question_id": "90",
      "model_score": 74.2,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "A theorem says that when data is projected to a sufficiantly large dimension it can be linearly separated. Non linear transformations are the such way to project the data to a higher dimension. This allows us to use SVM etc. to find a hyperplane that separates the data."
    },
    {
      "question_id": "106",
      "model_score": 41.4,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " Solution: When fork is called, all the stack heap and other data variables of the process are copied into a new stack/memory space with a different pid number.\nWhen executing the child process, all the data variables are stored in the kernel stack and when the process is done the data is copied into the original stack and the return values are stored in trap table, the child process then calls the parent to execute."
    },
    {
      "question_id": "52",
      "model_score": 96.6,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a ratio of change in length to orignal length"
    },
    {
      "question_id": "63",
      "model_score": 64.9,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "The stem and leaves are green, so we take a filter which filters out only those pixels whose hue is around 120 degrees, but the filter is skewed, since we want to eliminate all cyan components but retain yellow components as the bottom stem is yellowish. Hence, the filter will be towards the yellow side more than the blue side (i.e. not exactly symmetric about h=120 degrees). Since petals are of various intensities, we allow all to pass through. We can also add a saturation thr sh"
    },
    {
      "question_id": "42",
      "model_score": 84.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse, context switching and scheduling is a kernel mode function and can only be done by OS and with highest privilege level, so a user process can not do so. "
    },
    {
      "question_id": "15",
      "model_score": 23.9,
      "human_score": 0.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "when rainfall happened but get zero infiltration"
    },
    {
      "question_id": "31",
      "model_score": 63.8,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "When we use single discriminant function to handle a multiclass Classification, The response of the discriminant Should be encoded in range of discrete values like 0,1, 2, 3, 4..."
    },
    {
      "question_id": "6",
      "model_score": 88.8,
      "human_score": 1.0,
      "question": "Chi-square goodness of fit test evaluates the error between (                                                                                   ) and (                                                                                   )                    (                                                                     )",
      "instructor_answer": "Observed and assumed/Estimated PDF",
      "student_answer": "Observed PDF and Theoretical PDF"
    },
    {
      "question_id": "11",
      "model_score": 74.0,
      "human_score": 2.0,
      "question": "Define Slutzsky-Yule effect",
      "instructor_answer": "This effect states that summation or average of random series may generate osscilations when no such movements exist in the original set of data.",
      "student_answer": "If we get moving summation of any random series, even if there is no movement in the entire series, oscillation may be visible in moving summations."
    },
    {
      "question_id": "65",
      "model_score": 75.8,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Separate declaration and definition makes the code more readable and easy to understand. It also reduces overall clutter and brings neatness in the code.\n2) It also makes making changes to the implementation of the code much easier, convenient and safer. "
    },
    {
      "question_id": "15",
      "model_score": 41.1,
      "human_score": 0.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "In a particular water year if the rainfall is less than 18 cm then it is known as meteorological drought"
    },
    {
      "question_id": "3",
      "model_score": 36.8,
      "human_score": 0.0,
      "question": "                                                                                                                                                                                                                                                                                                                                                                   efficiency is the ratio of the quantity of water stored in the root zone of the crops to the quantity of water actually delivered into the field.",
      "instructor_answer": "Efficiency of water application",
      "student_answer": "water conveyance efficiency"
    },
    {
      "question_id": "106",
      "model_score": 67.8,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " Since the child process is (almost) related to the parent\nthe RIGHT trap of the parent is captured to the \nchild (except eax which is copied to the \nthe child & ebx for parent). The return value is 0 (zero)\nanother schedulable entity & when it is \nscheduled by the scheduler the OS via the trapframe of the\nprocess knows that it had to return to the process\nvia the interrupt handler, it also uses the topframe\nto infer where in the process it had to return to."
    },
    {
      "question_id": "10",
      "model_score": 29.5,
      "human_score": 0.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "A higher priority process or task kicks out a lower priority task."
    },
    {
      "question_id": "64",
      "model_score": 40.5,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "we consider narrow band around"
    },
    {
      "question_id": "64",
      "model_score": 28.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360 degrees for H"
    },
    {
      "question_id": "106",
      "model_score": 52.4,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "Ans) In the parent process, the return path from kernel mode to user mode happens via the trap/interrupt handler but when we call fork() system call, to make a child process in that case the child process there is no such trap. So in the case of child process, it return from the kernel mode to user mode with the parent process. As the parent process comes to user mode, the child process also shift to user mode."
    },
    {
      "question_id": "53",
      "model_score": 68.0,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "edge detection (roads will have good edges separating them from neighbourhood objects.). neighbour support class compatibility- especially directional support. Different roads will have a texture different from other objects"
    },
    {
      "question_id": "87",
      "model_score": 70.8,
      "human_score": 1.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "formation of thin layer          smutzdecke          by sediments and organic matter, traps fine particulates."
    },
    {
      "question_id": "81",
      "model_score": 88.0,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "Very low eigen value when applied to high dimensional data means that there are dimensions along which the data is very highly correlated and there is very less variation in the data."
    },
    {
      "question_id": "60",
      "model_score": 90.3,
      "human_score": 1.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "static aerated pile, windrow,aerated "
    },
    {
      "question_id": "65",
      "model_score": 59.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)If we want to use a function say f in another function g and also g in f then it's advantageous to declare f before the definition of g and define f after the definition of g.\n2) Separating declaration and definition is helpful when different people contribute to the different functions' definition. In this way they can work on different machines and later just include the declarations in the file containing the compiled definitions by different persons."
    },
    {
      "question_id": "56",
      "model_score": 99.2,
      "human_score": 2.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "Unbiasedness, Consistency, Efficiency and Sufficiency "
    },
    {
      "question_id": "40",
      "model_score": 2.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue"
    },
    {
      "question_id": "45",
      "model_score": 90.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue. There is no way to control which process would be scheduled next. But, this would not have the capability to initiate a context switch and schedule the target process onto the CPU."
    },
    {
      "question_id": "43",
      "model_score": 14.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse"
    },
    {
      "question_id": "105",
      "model_score": 33.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "The above statement is false since in an OS using a lazy allocation policy for memory allocation to processes, the OS directly executes next instruction without handling the page fault first."
    },
    {
      "question_id": "104",
      "model_score": 38.9,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. Change the value of the time-out time register. \nThis is a privileged action which the user process cannot perform because this would lead to starvation if the user process is maliciously updating this register, i.e. so that it is never interrupted, i.e. it executes on the CPU forever.\n2. It may try to write on a read-only region of disk. \nThis is prevented by the OS to adhere with the permissions of files.\n3. Change the action initiated with the interrupt signal\nSome OS use on the in to first point, the process can choose to ignore the interrupt and won on the CPU forever, starving every other process."
    },
    {
      "question_id": "104",
      "model_score": 48.3,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. Accessing a memory address which is not assigned to it.\n2. Disable trap handler.\n- Uses process knows that if something unexpected happens OS will handle it using trap handler. So it might try to disable it."
    },
    {
      "question_id": "29",
      "model_score": 97.6,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "rainfall intensity, time"
    },
    {
      "question_id": "63",
      "model_score": 31.9,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H should vary in narrow range around 120"
    },
    {
      "question_id": "49",
      "model_score": 61.3,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE\n If a binary program instantiates more than 1 process simultaneously (threads)\n Threads have different k-stack (processes use different PCB)"
    },
    {
      "question_id": "87",
      "model_score": 99.3,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "bio filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter"
    },
    {
      "question_id": "92",
      "model_score": 73.7,
      "human_score": 2.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "A large number of image application benefit from interest points like corners. we have large scale satellite imaging application that depend on corners to mark land boundaries and mark region of interest. We also have small scale applications the object detectors and feature developers that use corner information to segment and identify objects and build image features on them."
    },
    {
      "question_id": "43",
      "model_score": 35.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse, If interrupt causes the process to terminate it will not be rescheduled until next again.\n"
    },
    {
      "question_id": "19",
      "model_score": 85.4,
      "human_score": 2.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "decideaction node was used to decide which direction the bot should turn e depending on the state of the bot,  "
    },
    {
      "question_id": "31",
      "model_score": 59.9,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "A single discriminant function can calculate the probability of the output being of a particular class and should output whether the input feature vector belongs to that particular class."
    },
    {
      "question_id": "63",
      "model_score": 82.3,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H : A narrow band around 120 degrees. Since 120 degrees correspond to Green in HSI, and since there is no other green body, hue should be a narrow band around 120 degrees\n\nS : Here also leaves and stems have shadow, so saturation needs to be a wide band like 0.3 to 1, i.e. centred a little above  0.5 so that leaves and stem remain close to green saturation.\n\nI : Due to shadow of leaves and stem, the green is darker in some portions and bright in some portions, hence I should be wide band centred at 0.5, like 0.15 to 0.85"
    },
    {
      "question_id": "105",
      "model_score": 81.6,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "Same, vas if page fault is not allocated physical addresses then the process would using lazy allocation policy so speed up the process it is updated."
    },
    {
      "question_id": "54",
      "model_score": 58.1,
      "human_score": 0.0,
      "question": "The appetitive      faculty corresonds to      ",
      "instructor_answer": "Plato's theory of the soul, the appetitive faculty is one of the 3 divisions of the soul. It is the part dealing with desires and passions",
      "student_answer": "appetitive faculty mainly corresponds to"
    },
    {
      "question_id": "76",
      "model_score": 9.0,
      "human_score": 0.0,
      "question": "What are the two important aspects of reservoir routing under a flood control criterion?",
      "instructor_answer": "peak discharge reduced and\n peak flow gets shifted",
      "student_answer": "soil characteristics and intensity of rainfall\n"
    },
    {
      "question_id": "78",
      "model_score": 12.1,
      "human_score": 0.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "tangential plant, axial plant,radial plant"
    },
    {
      "question_id": "33",
      "model_score": 21.5,
      "human_score": 1.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "evapotranspiration, through flow with soil system"
    },
    {
      "question_id": "65",
      "model_score": 14.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.We can change the type of object our variable is holding.(but class-subclass rule must be followed.)\n2.By this we can declare pointers of abstract classes without intansiating them,and later we can point them to a subclass which is not absrtact."
    },
    {
      "question_id": "49",
      "model_score": 85.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n The executables can create child processes, but\n they all have their own PCBs, PCBs are unique\n to processes."
    },
    {
      "question_id": "65",
      "model_score": 58.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Suppose we have a code of a 500 lines then without knowing exactly how many functions were there in this class, we would fell difficult to read it . \n2) Interface provides us an idea about membered functions and arguments they take in and also how many membered functions are there for a particular class.\n3) So, we can jump to implementation part to study a particular membered function.\n So, It is better to have interface and implementation parts."
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False; once a page fault occurs in long allocation policy, the OS then directly goes & executes the instructions of next page."
    },
    {
      "question_id": "64",
      "model_score": 53.2,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "three components:\n1. Red roses\n2. blue sky\n3. green leaves and stems\n\n1. To segment red roses we can see it is almost pure colour so we can set hue around to 0 degrees with some upper and lower threshold, then for saturation as it is known it is a pure colour saturation will also be high so we can again put narrow range for saturation for intensity as for red only one of the three colours is present in abundance so the intensity will be low ( not minimum but low) so we will put a range around 0.3 as it is only one colour out of three primary colours.\n\n2. To segment blue sky we can set hue to a range around 240 degrees with a little wide range because of the white cloud, saturation will also be quite high but the range will not be very narrow, as there is also cloud ( white) present to saturation can be low also, then for the intensity it will again be low as blue will have only one intensity majorly and a quite broad range because of white cloud.\n\n3. then green stems and leaves are there with little of black or darkness present, so hue should be around 120 degrees, saturation high for green colour but also low for darkness in stems, intensity low to minimum for green and black around 0-0.5 range."
    },
    {
      "question_id": "42",
      "model_score": 25.8,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFALSE. The exec system call executes a different program. The parent process can't do that - use exec to run another process without waiting for child to terminate.\n"
    },
    {
      "question_id": "10",
      "model_score": 18.0,
      "human_score": 0.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "New priority after inversion = Maximum Priority - 1 - Old Priority."
    },
    {
      "question_id": "104",
      "model_score": 41.3,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " The user process can try to update the timer register then it may lead to very large time value monitoring the CPU hence user process should not be able to do this it is prevented by OS via LDE\nOr user process can try to update CR3 register which states the PGDR of the process & this should not happen hence OS prevent it via LDE step"
    },
    {
      "question_id": "65",
      "model_score": 21.3,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "we can alter the definition at any time any where in the code \n\n"
    },
    {
      "question_id": "5",
      "model_score": 88.1,
      "human_score": 2.0,
      "question": "A reactor which is used when intense agitation is required is _____________.",
      "instructor_answer": "Completely mixed flow reactor (CMFR)",
      "student_answer": "complete mixed flow reactor"
    },
    {
      "question_id": "85",
      "model_score": 88.1,
      "human_score": 2.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "1. No distinction between horizontal and vertical creep lengths\n2. Loss of head is considered proportional to creep length which is actually not so\n3. uplift pressure distribution is not linear as assumed, it's a sine curve"
    },
    {
      "question_id": "66",
      "model_score": 76.6,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "market-based and quick and convenient"
    },
    {
      "question_id": "80",
      "model_score": 23.5,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "having symmetry about two orthogonal planes"
    },
    {
      "question_id": "32",
      "model_score": 49.6,
      "human_score": 1.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "When there is a change in ground level"
    },
    {
      "question_id": "100",
      "model_score": 45.4,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "Wearing of the nozzle tip, harmful for operator if no shielding"
    },
    {
      "question_id": "49",
      "model_score": 88.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE, Each individual process has its own PCB.\n * A single program can be loaded into multiple processes but the PCB for all those different processes needs to be different. If P1 and P2 had the same PCB, OS couldn                        t distinguish b/w them."
    },
    {
      "question_id": "65",
      "model_score": 48.8,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) it is possible to have abstract class due to this.\n2)declaring function first unables us to use the function elesewhere without thinking about its defination.\n3) this also makes the program well structured."
    },
    {
      "question_id": "92",
      "model_score": 60.7,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "CV applications for converting satellite images of roads & buildings into maps can make use of corner  features. Self driving cars can also benefit from interest points like corners."
    },
    {
      "question_id": "42",
      "model_score": 29.3,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "False, the program can voluntarily wanting-to-context switch voluntarily with the user-level process."
    },
    {
      "question_id": "17",
      "model_score": 64.5,
      "human_score": 0.0,
      "question": "Define reservoir area curve.",
      "instructor_answer": "It is a plot of water spread area vs the reservoir elevations",
      "student_answer": "It is the plot of water spread"
    },
    {
      "question_id": "104",
      "model_score": 23.0,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Two privileged actions are when a process may attempt to perform and which are prevented by most O.S and are limited - directed security setup are:\n1. Read input from a file: To read from a file, the process will have to make a read() system call, which will further get access to I/O file handlers, which is a private method and not available to a user process.\n2. Write to a file: Same discussion as above.\n3. System calls: All system calls must be executed in the kernel mode."
    },
    {
      "question_id": "40",
      "model_score": 92.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "True. In the pipe system call the file descriptor fd[1] can be used only for writing & fd[0] is used only for reading thus it is used only for writing & fd[0] is used only for reading thus it is used for reading from a pipe."
    },
    {
      "question_id": "69",
      "model_score": 17.2,
      "human_score": 0.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "the time till the dead storage is less than the normal storage level."
    },
    {
      "question_id": "5",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "A reactor which is used when intense agitation is required is _____________.",
      "instructor_answer": "Completely mixed flow reactor (CMFR)",
      "student_answer": "Completely Mixed flow reactor (CMFR)"
    },
    {
      "question_id": "79",
      "model_score": 18.8,
      "human_score": 0.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "units are not the same but through dependency of parameters result can be obtained"
    },
    {
      "question_id": "104",
      "model_score": 23.2,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Every process knows that signal exists that they go through than go to the user process.\n\n- user process interrupt the execution of another process if not prevented, user process knows interrupt exists. This, it can do by using system calls like sys-kill.\n\n- user process may override that itself interrupting in case of timer interrupt & keep running forever if not prevented."
    },
    {
      "question_id": "72",
      "model_score": 81.7,
      "human_score": 2.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "Data rate should not exceed the channel capacity. Information loss that happens during quantization phase should be minimized. Full use of channel capacity should be ensured"
    },
    {
      "question_id": "90",
      "model_score": 51.9,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "In high dimension space these allow us to expand the information and also take into account the covariance of features"
    },
    {
      "question_id": "90",
      "model_score": 64.5,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "When a given data is not linearly separable in that case we transform input feature vectors to higher dimension to create a classification boundary and the feature vector is classified into different classes"
    },
    {
      "question_id": "71",
      "model_score": 68.3,
      "human_score": 1.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "dust particles, salts impurities"
    },
    {
      "question_id": "90",
      "model_score": 76.5,
      "human_score": 0.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Non-linearly transforming of feature help us to classify the data set which cannot be classified in 1D but can be classified in 2D form."
    },
    {
      "question_id": "51",
      "model_score": 51.6,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1.Adsorption of charge inducing ions (OH-, S2-). \n\n2. Metallic Ions are charged in their various oxidation states eg (Fe(III), Al(III)).\n\n3. Due to common ion effect, ionic salts like KI have a layer of I- outside which also contributes to them being charged."
    },
    {
      "question_id": "66",
      "model_score": 44.6,
      "human_score": 1.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "actual market transactions and easy to use"
    },
    {
      "question_id": "65",
      "model_score": 59.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)If we want to use a function say f in another function g and also g in f then it's advantageous to declare f before the definition of g and define f after the definition of g.\n2) Separating declaration and definition is helpful when different people contribute to the different functions' definition. In this way they can work on different computers and later just include the declarations in their file and the compiled definitions by different persons."
    },
    {
      "question_id": "32",
      "model_score": 33.5,
      "human_score": 0.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "A canal fall is provided when the head of canal is too low"
    },
    {
      "question_id": "1",
      "model_score": 71.3,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "constant capita structure"
    },
    {
      "question_id": "49",
      "model_score": 82.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n These powers can do code-sharing, but having\n same pcb implies that we can have only address\n L1 (only change in ref count and no other change)\n one context to be saved in pcb. But, we need\n multiple contexts, kernel stack due to multiple\n instances of the program. Eg: multiple pc's to be saved!"
    },
    {
      "question_id": "102",
      "model_score": 82.8,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "vibration amplitude, ultrasonic frequency, particle size"
    },
    {
      "question_id": "105",
      "model_score": 85.2,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False\nIt will execute the same instruction for which page fault occurred. (Not the next)\nLet's say if it was a ~read~ instruction but there's no page. So, OS handles the page fault & allocates a page. Now it should run the same instruction again to perform 'write' operation."
    },
    {
      "question_id": "27",
      "model_score": 20.0,
      "human_score": 0.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "Helps in spectroscopy and X ray photography"
    },
    {
      "question_id": "47",
      "model_score": 66.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\n **True**, the PID doesn't change anyways when we call exec(), so the process will still be the parent (it terminated child becomes an orphan)."
    },
    {
      "question_id": "94",
      "model_score": 77.4,
      "human_score": 2.0,
      "question": "Why for an asymmetric variable, median is the best measure of central tendency?",
      "instructor_answer": "because around median 50 percent of the distribution is on the left and 50 percent is on the right , so in case of asymmetrial distribution where it is skewed, median will be the best measure of central tendency as mean in case of assymetrical distribution is not accurate measure of central tendency",
      "student_answer": "because median gives the central tendency, it devides the distribution curve in two equal halves. "
    },
    {
      "question_id": "84",
      "model_score": 91.5,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "A single perceptron classifier cannot correctly classify the xor function because it is not linearly separable. On the other hand, by using 3 neurons in a MLP, we can correctly handle the XOR problems."
    },
    {
      "question_id": "30",
      "model_score": 76.2,
      "human_score": 1.0,
      "question": "If there is one explanatory variable, regression analysis is termed as (                                                               )       else it is termed as (                                                                             )",
      "instructor_answer": "Univariate and Multivariate",
      "student_answer": "simple regression, multivariate regression"
    },
    {
      "question_id": "29",
      "model_score": 97.6,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "rainfall intensity,  time"
    },
    {
      "question_id": "60",
      "model_score": 90.0,
      "human_score": 2.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "Windrow\nIn vessel\nStatic Aerated pile"
    },
    {
      "question_id": "52",
      "model_score": 84.0,
      "human_score": 0.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a change in unit length/total length of the specimen chosen"
    },
    {
      "question_id": "74",
      "model_score": 69.8,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "when the number of hidden layer is very large then generalization of classifier is very poor.. It works well on training data but performs poorly on test data."
    },
    {
      "question_id": "87",
      "model_score": 79.4,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "slow sand filters work through the formation of a gallatious layer called hypogeal layer or schmutzdecke in the top few milimeters of the fine sand layer."
    },
    {
      "question_id": "65",
      "model_score": 77.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. All the included functions are declared and concentrated in one place, so the complexity of the code is reduced and it makes it much easier to read. Also the compilation time is reduced. 2. It also helps separate interface and implementation. Users of the class only need to see the declaration of the function to write code that uses it. This makes the code more neat and less cluttered."
    },
    {
      "question_id": "90",
      "model_score": 73.4,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Non-linearly transformation of feature vector help us to classify the features using a linear boundary."
    },
    {
      "question_id": "46",
      "model_score": 80.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue\nThe CPU may do so during syscalls or when a program voluntarily gives up control (what some early OSes/did). However, there can be processes which may prevent this (buggy/malicious code). \n"
    },
    {
      "question_id": "85",
      "model_score": 6.1,
      "human_score": 0.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "not applicable to all scenarios"
    },
    {
      "question_id": "8",
      "model_score": 71.8,
      "human_score": 2.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "The node N1 is most likely not a leader in any of the three terms. Since if N1 would be a leader all the entries of the term should be present in it as it can be seen in N2, N3 and N4."
    },
    {
      "question_id": "100",
      "model_score": 42.4,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "low mrr taper stray cutting operator threat"
    },
    {
      "question_id": "82",
      "model_score": 52.9,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "It is not always happen that we can discriminant two classes by linear discriminant function."
    },
    {
      "question_id": "65",
      "model_score": 64.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.) When declaration is separated from definition, then names of all the member functions inside a particular class can be found at the same place and it would make the body of the class look less cumbersome.\n2.) When the functions are declared first and then defined later, then during defining a particular member function, we can use the other member functions of the class too inside this function's definition as they were already declared earlier and hence there will be no error. \n3.) Instead of writing a single long function, we can divide the function into two parts and then, use one of the function in the other function. For example, we can write a function to eject a drink from the vending machine, eject_drink(int drinkid) and also another function insert_coin(int value) which will take in the coin and find the drinkid corresponding to the inserted coin. We can declare both these functions in the vending machine in the start and then we can use eject_drink function inside insert_coin function to eject the drink after knowing the drinkid instead of a single long function which finds the drinkid and also ejects it.\n4.) The advantage from the example explained in the 3rd point can be seen during debugging as there will be separate functions for finding drinkid and ejecting drink "
    },
    {
      "question_id": "98",
      "model_score": 56.8,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "it helps in improving the quality of the product's surface and also increases tool life"
    },
    {
      "question_id": "93",
      "model_score": 13.5,
      "human_score": 0.0,
      "question": "Which statistical parameter influences the PMP estimation at large ------",
      "instructor_answer": "Maximum average annual precipitation and standard deviation of it",
      "student_answer": "hydrological method, stand"
    },
    {
      "question_id": "82",
      "model_score": 61.8,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Advantage of a non-linear discriminant function classifier over a linear one is : It helps to classify funtions which are non-linear in nature. It handles outlier data effectively"
    },
    {
      "question_id": "67",
      "model_score": 55.1,
      "human_score": 1.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "point estimation, method of likelihood"
    },
    {
      "question_id": "46",
      "model_score": 61.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue. The OS still has opportunities to schedule Ready processes especially if processes willingly give control to the CPU OS\n"
    },
    {
      "question_id": "83",
      "model_score": 86.0,
      "human_score": 1.0,
      "question": "What is the difference between basin order and channel order?",
      "instructor_answer": "Basin order is highest order of any stream in that basin whereas Channel order is order of stream\nwhich denotes that what order of streams has joined the channel.",
      "student_answer": "Order of Basin is the order of its highest ordered channel. Channel order places important role in deciding Basin order whereas Channel order is used to shows the branching level in river or run off systems."
    },
    {
      "question_id": "48",
      "model_score": 9.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\n$\\rightarrow$ True"
    },
    {
      "question_id": "65",
      "model_score": 69.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) declarations of all the member function at the same time in the class makes structure of code better and at the same time we get an overview idea of what function all functions are we supposed to create\n2) Also defining one function at a time outside the class make it easier for us to and the reader to check whether the functions is working correctly as per our requirements\n"
    },
    {
      "question_id": "69",
      "model_score": 85.7,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "the life in which the reservoir can continue to do some purposes to a limited value after even the expiry of its economic life, either alone or in group with some other facilities made for same purpose."
    },
    {
      "question_id": "33",
      "model_score": 83.5,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "through-fall, stem flow"
    },
    {
      "question_id": "106",
      "model_score": 45.2,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " The child process is returned through the return request of folk system call. from kernel mode, to was mode.\nJust like be returned from trap / interrupt syscall\nChild also returned from both syscall\nChild return\nThat is why it returns 0 in parent\nDid a in child process"
    },
    {
      "question_id": "10",
      "model_score": 36.6,
      "human_score": 1.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "Giving higher priority to low priority value and lower priority to higher priority value"
    },
    {
      "question_id": "50",
      "model_score": 34.0,
      "human_score": 1.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "Reservoir control flooding\nflood routing predict hydrograph"
    },
    {
      "question_id": "15",
      "model_score": 49.1,
      "human_score": 1.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "The prolonged time duration of no rainfall or no baseflow and surface flow."
    },
    {
      "question_id": "24",
      "model_score": 79.9,
      "human_score": 1.0,
      "question": "For cooling, the samples from oven or furnace are moved to desiccator primarily to                                                       ",
      "instructor_answer": "bring down the temperature without any type of condensation process or moisture addition from surrounding",
      "student_answer": "bring down the temperature to room temperature"
    },
    {
      "question_id": "27",
      "model_score": 55.7,
      "human_score": 1.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "1)In microscopy\n2)For cutting and welding of metals"
    },
    {
      "question_id": "80",
      "model_score": 50.8,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "it has 3 plane of material property symmetry"
    },
    {
      "question_id": "39",
      "model_score": 96.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "FALSE. Writes and reads cannot be interchanged, data can be read from fd[0], written to fd[1]."
    },
    {
      "question_id": "15",
      "model_score": 51.2,
      "human_score": 1.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "It is characterized by deficiency in the precipitation from the annual precipitation."
    },
    {
      "question_id": "2",
      "model_score": 97.2,
      "human_score": 2.0,
      "question": "\nWhat\nis the Full form of RCP?",
      "instructor_answer": "Representative Concentration Pathway",
      "student_answer": "Representative Concentration Pathways"
    },
    {
      "question_id": "98",
      "model_score": 64.0,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "it has good adhesion,toughness, and resistance to chipping and performs well on drills and reamers where moderate temperatures are generated at the cutting edge, also it has excellent wear resistance."
    },
    {
      "question_id": "65",
      "model_score": 72.7,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The program will be organised, and is easy to read and find errors.\n2. We know all the member functions as an overview in the declarations, and helps us understand each of them at a high level before we explain about them in depth in the definitions. It is a good way to understand abstractions."
    },
    {
      "question_id": "87",
      "model_score": 19.0,
      "human_score": 0.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "easy sedimentation after flocculation and coagulation"
    },
    {
      "question_id": "56",
      "model_score": 68.1,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "consistency; efficency ; sufficiency"
    },
    {
      "question_id": "63",
      "model_score": 57.1,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "To segment green leaves,\nH -- Narrow range around 120 ( Green has hue of 120)\nS -- Close to 1 (Green is primary color and all primary colors are pure colors)\nI -- Broad range / Almost full range (This to handle both dark and bright regions of the leaves)\n\nTo segment stem,\nH -- Broad range/ entire range \nRange in rose petals and green leaves can be subtracted to avoid wrong segmentation\nS -- Close to 0 (Color of stem is brownish and grey like. So color in RGB will be close to grey axis)\nI -- Close to 0 (Most of the stem region is very dark)\n"
    },
    {
      "question_id": "64",
      "model_score": 68.7,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "In HSI model, intensity of red is low so it is between 0 and 1 but somewhat closer to 0 as compared to 1. Also here in the lower part of rose petals some black portion is present which also has low intensity. \nSaturation is the purity of colour and as by looking at this image, it looks like it has high saturation because this red colour in the upper part of petal does not contain gray component, but also in the lower part of petals the red colour looks diminished due to presence of dark portion. But overall it looks highly saturated. \nHue is 0 degree for pure red colour, here hue must be close to 0 degree. "
    },
    {
      "question_id": "6",
      "model_score": 96.6,
      "human_score": 2.0,
      "question": "Chi-square goodness of fit test evaluates the error between (                                                                                   ) and (                                                                                   )                    (                                                                     )",
      "instructor_answer": "Observed and assumed/Estimated PDF",
      "student_answer": "Observed and assumed PDF"
    },
    {
      "question_id": "105",
      "model_score": 75.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " TRUE, when malloc() is called a space in virtual space address\nFALSE is allocated in the heap but allocation of corresponding\nphysical page is done when writing is done at that\nVA, pagefault is handled in trap & physical page\nis allocated, but executes the same instruction\nbut not next instruction."
    },
    {
      "question_id": "57",
      "model_score": 9.0,
      "human_score": 0.0,
      "question": "The dispersion number characterizes the degree of dispersion relative to ________________.",
      "instructor_answer": "the degree of advection",
      "student_answer": "non dimensional variance"
    },
    {
      "question_id": "65",
      "model_score": 31.3,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.The functions and variables declared can be modified as per the requirement of user .\n2.The function "
    },
    {
      "question_id": "105",
      "model_score": 25.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "The 25 doubles the page fault another new instruction in lazy allocation policy"
    },
    {
      "question_id": "8",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader "
    },
    {
      "question_id": "98",
      "model_score": 30.7,
      "human_score": 0.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "Low chemical affinity with most materials, hard "
    },
    {
      "question_id": "65",
      "model_score": 61.8,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) All member function declaration is available at one place for easy reference.\n2) Easy to debug for a programmer and easy to refer to this as a manual for user."
    },
    {
      "question_id": "44",
      "model_score": 50.9,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFALSE. There are other interrupts.\n"
    },
    {
      "question_id": "45",
      "model_score": 82.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "True, Yes it cannot be scheduled at user level as OS has to set up as kernel doesn't trust userland processes."
    },
    {
      "question_id": "49",
      "model_score": 89.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False: Each process runs with a unique PID and thus a unique PCB."
    },
    {
      "question_id": "97",
      "model_score": 11.5,
      "human_score": 0.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "low stiffness, inhomogenity, type of chips"
    },
    {
      "question_id": "41",
      "model_score": 3.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "**TRUE**"
    },
    {
      "question_id": "42",
      "model_score": 27.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nTrue, it can stop the running process using sigstop & start the target process using sigcont as it knows the pid of target process."
    },
    {
      "question_id": "105",
      "model_score": 4.2,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True."
    },
    {
      "question_id": "85",
      "model_score": 35.0,
      "human_score": 0.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "losses of head does not take place in the same proportions as the creep length. Also the uplift pressure distribution is not linear but follow a sine curve."
    },
    {
      "question_id": "42",
      "model_score": 54.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "FALSE. At the time of context switching, it has to change the kernel stack pointers to hardware and also, it should save current context in software. As user level can't reach kernel. Hence, impossible to create context-switched immediately (and control returns back to the paused process) on completion of the scheduled incoming process."
    },
    {
      "question_id": "65",
      "model_score": 75.7,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)  It makes the code more neat and readable.It will help the coder or \nsome other person reading that code to understand its functioning better without any confusion.\n\n2)  It makes debugging the code much easier. Separated declarations from definitions helps us to find errors (if any) in code faster. "
    },
    {
      "question_id": "65",
      "model_score": 28.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1: This leads us to use that variable anywhere by just declaring it.Like if we define a global variable a,then we can use it anywhere in the program, but if we declare a there then value of a will be fixed in the program.\n\n2: "
    },
    {
      "question_id": "82",
      "model_score": 30.5,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "A linear discriminant function classifier assumes that the data is normally distributed and all categoreies are identically distributed. Also it does not work well in case of differnet covariance matrices."
    },
    {
      "question_id": "105",
      "model_score": 20.3,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True: This is what happens in lazy allocation."
    },
    {
      "question_id": "63",
      "model_score": 65.4,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "using the equation of hue and theta, we get that G is maximum around hue=120. So a band around "
    },
    {
      "question_id": "43",
      "model_score": 79.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nF. **False**. Not necessarily. Another process can be rescheduled after the interrupt to prevent data loss."
    },
    {
      "question_id": "104",
      "model_score": -1.1,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": "."
    },
    {
      "question_id": "29",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "rainfall intensity and time"
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " OS handles VA to PA memory mapping. Pg table is used to translate Virtual Address to Physical Address.\nunmapped physical pages -> page-fault interrupt tells OS to take care of these mappings and stores it, and then executes the next instruction"
    },
    {
      "question_id": "46",
      "model_score": 25.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "False\nOS does multitasking using timer interrupt. By switching between processes of higher priority.\n"
    },
    {
      "question_id": "102",
      "model_score": 70.8,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "particle size, vibration frequency, tool cross section area"
    },
    {
      "question_id": "43",
      "model_score": 23.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse: OS stores the context on the kernel stack after it performs the interrupt handling. After the based on the policy, a context switch can be performed."
    },
    {
      "question_id": "65",
      "model_score": 64.6,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)The implementation(definition) is separated from the abstraction(declaration).\n2)This way,we can ensure that the user is given access only to the  \"abstraction\" or \"interface\" and not the internal working."
    },
    {
      "question_id": "97",
      "model_score": 57.9,
      "human_score": 1.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "overhang of workpiece, depth of cut"
    },
    {
      "question_id": "63",
      "model_score": 43.3,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "a narrow range around 120 degrees of H"
    },
    {
      "question_id": "27",
      "model_score": 79.4,
      "human_score": 2.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "1. Lasers are used in the biomedical field to destroy tumours and cancer cells. 2. Lasers are extensively used in material processing such as cutting, engraving, drilling, Etc "
    },
    {
      "question_id": "51",
      "model_score": 77.3,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "imperfection in crystal structure, ionisation of surface sites."
    },
    {
      "question_id": "74",
      "model_score": 79.0,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "If Number of hidden layers are very large than We need more training samples to train our model. Our Model may became high variance model. so overfilting problem can be possible. Due to overfitting we will get a very low accuracy for testing samples. We might need more iteration to train our large number off weight. so computation cost increases."
    },
    {
      "question_id": "19",
      "model_score": 62.8,
      "human_score": 2.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "it is a state to know to make a which turn left, right or u-turn "
    },
    {
      "question_id": "42",
      "model_score": 11.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse"
    },
    {
      "question_id": "106",
      "model_score": 0.9,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "4"
    },
    {
      "question_id": "49",
      "model_score": 85.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Every process will have its own PCB. PCB stores a lot of information reg. the process, so even if the registers are involved, the pre-process info. may very depending on the values of registers stored as such."
    },
    {
      "question_id": "47",
      "model_score": 93.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\n **TRUE**\n As after using exec, the PID of parent remains the same, there would be no problem."
    },
    {
      "question_id": "87",
      "model_score": 81.0,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "principal of slow sand filter is filtration by organic thin layer called schmutzdecke."
    },
    {
      "question_id": "104",
      "model_score": 14.2,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " The user process cannot turn off interrupts.\nIf the user process is able to turn off interrupts, then it can maliciously keep using the resources of the computer and create a denial of service.\n\nThe user process cannot change the timer for interrupts.\nIf the user process can change the interval, then it may set the interval to a large value and not again deny service to other processes."
    },
    {
      "question_id": "44",
      "model_score": 31.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "True, for multitasking the cpu shall execute instructions from all processes bit by bit if not each process has to wait till the initial one is completed so the above statement is justified."
    },
    {
      "question_id": "49",
      "model_score": 81.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False To execute multiple processes, the parent program needs to fork() and then the child program executes a process (for it gets converted into the executed process). The PCB of parent and child are different. Using same PCB for multiple processes may cause unexpected behavior in memory because they will share the same pgdir, and hence page tables and address mappings."
    },
    {
      "question_id": "72",
      "model_score": 32.1,
      "human_score": 0.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "Some critical issues are the efficiency and the quality of the system."
    },
    {
      "question_id": "90",
      "model_score": 52.1,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Many time using the features vectors as such, it becomes very hard to classify, if the decision boundaries are very complex and/or the classifier at hand classify different classes."
    },
    {
      "question_id": "64",
      "model_score": 48.1,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "narrow range around 0 degrees for H"
    },
    {
      "question_id": "64",
      "model_score": 77.0,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "create a saturation mask, with saturation above a certain threshold for S to eliminate grayish colors (maybe 0.2, could be lower). multiply with original image to get regions where the petals could possibly be. now create a hue mask from this image, with a narrow band in H centred around 0 degrees (red) or the natural shade of red in roses. multiply the mask with the original image to get the petals."
    },
    {
      "question_id": "95",
      "model_score": 49.6,
      "human_score": 1.0,
      "question": "Why the steeper main streams results in the Hydrographs with smaller time base?",
      "instructor_answer": "Steeper basin streams allows the run off  to leave the basin quickly because of high slope.Time base means the amount of time for run off to leave the catchment after the storm. So, if there is steeper slope,  excess run off will get out  quickly. Hence time base reduces.",
      "student_answer": "The steeper main streams results in the hydrographs with smaller time base , because it has less surface. Area leads to less evaporation loss. The stream can get flooded fastly with available streamflow as compared to broadwide main streams. "
    },
    {
      "question_id": "2",
      "model_score": 99.9,
      "human_score": 2.0,
      "question": "\nWhat\nis the Full form of RCP?",
      "instructor_answer": "Representative Concentration Pathway",
      "student_answer": "Representative Concentration Pathway"
    },
    {
      "question_id": "32",
      "model_score": 88.7,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "Canal fall are provided when natural slope of a country is steeper than the longitudinal slope provided in channel"
    },
    {
      "question_id": "48",
      "model_score": 69.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse\nParent & child become 2 separate entities & can be used independently."
    },
    {
      "question_id": "39",
      "model_score": 86.4,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse. Read on fd[1] and write on fd[0] is not possible using pipe syscall.\n"
    },
    {
      "question_id": "49",
      "model_score": 17.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE - Each protein will have its own ROM, used to"
    },
    {
      "question_id": "64",
      "model_score": 52.1,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H can vary from -45 to +45 degree, I can vary from 0.2 to 0.8 and S can from 0.1 to 1 to get red flower. to get leafs H can vary from 100 to 160 degree, s ca"
    },
    {
      "question_id": "95",
      "model_score": 86.1,
      "human_score": 2.0,
      "question": "Why the steeper main streams results in the Hydrographs with smaller time base?",
      "instructor_answer": "Steeper basin streams allows the run off  to leave the basin quickly because of high slope.Time base means the amount of time for run off to leave the catchment after the storm. So, if there is steeper slope,  excess run off will get out  quickly. Hence time base reduces.",
      "student_answer": "Time base of hydrograph depends upon rainfall and catchment charactertitles both. if the catchment is steep, water drop of farthest remote point take less time to reach the outlet of the stream. Hence steeper main stream results in the hydrograph with smaller time base."
    },
    {
      "question_id": "13",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Define firm yield.",
      "instructor_answer": "Firm yield is the maximum amount of supply guaranteed during a critical dry period",
      "student_answer": "Firm yield is the maximum amount of supply guaranteed during a critical dry period"
    },
    {
      "question_id": "11",
      "model_score": 67.8,
      "human_score": 1.0,
      "question": "Define Slutzsky-Yule effect",
      "instructor_answer": "This effect states that summation or average of random series may generate osscilations when no such movements exist in the original set of data.",
      "student_answer": "In Slutzsky-Yule effect, moving average may generate oscillation "
    },
    {
      "question_id": "19",
      "model_score": 68.8,
      "human_score": 2.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "it is used to decide what turn/movement the robot has to make"
    },
    {
      "question_id": "65",
      "model_score": 61.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. the body of class looks clear\n    and readable.\n\n2. as all definitions are at one\n    place we can easily understand\n    the member functions.\n\n3. if all definitions are inside the\n    class body the class body\n    appears to be extremely large\n    and difficult to understand and\n    follow up about what is going\n    on inside the class as we might\n    get confused while studying the\n    program."
    },
    {
      "question_id": "27",
      "model_score": 70.7,
      "human_score": 2.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "1)medical purposes (eye surgeries).\n2) welding and cutting metlas.\n"
    },
    {
      "question_id": "90",
      "model_score": 45.0,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Non linear transformation of vectors helps in overwritting the problem of linearly separable"
    },
    {
      "question_id": "72",
      "model_score": 9.6,
      "human_score": 0.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "Irreversible nature of the compressed image, after being quantized. The function could be similar but not identical due to  loss of certain features after any transform."
    },
    {
      "question_id": "40",
      "model_score": 80.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue, it basically connecting the 2 descriptors similar to 0 being stdin,1 being stdout so 1 for writing and 0 for reading."
    },
    {
      "question_id": "91",
      "model_score": 34.2,
      "human_score": 1.0,
      "question": "What theorem do we use to prove symmetry of stiffness matrix",
      "instructor_answer": "Maxwell Betti Reciprocal Theorem",
      "student_answer": "equilibrium, maxwell betty"
    },
    {
      "question_id": "92",
      "model_score": 31.1,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "structural analysis application benefit from interest points like corners"
    },
    {
      "question_id": "104",
      "model_score": 49.5,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Two privileged actions that a user process may attempt to perform are: - \n1. Disabling Interrupts: The user process knows how to disable interrupts and might try to an attempt to perform it in order to prevent the OS from getting the control of the CPU helping the user process to monopolize the CPU.\n2. Updating the CPU's timer register: The user process knows about the CPU's times register which the OS uses to invoke timer interrupt and gain back the control from the user program. Thus, the user process might try to change its value in order to gain more time at the CPU."
    },
    {
      "question_id": "65",
      "model_score": 61.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "It reduces the clutter and confusion while declaring variables and functions/member functions all at a place.\nIt also gives an additional advantage of scope as declaration would be separately done.\nA variable can be defined again(or it might be defin)"
    },
    {
      "question_id": "49",
      "model_score": 89.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False.\n Each process has a unique process control block, even if it may be running the same program. A PCB stores PID (to identify process uniquely) and other essential process-specific information."
    },
    {
      "question_id": "8",
      "model_score": 26.6,
      "human_score": 0.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N4, even if N5 votes for N4, it still cannot get majority votes"
    },
    {
      "question_id": "63",
      "model_score": 78.3,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Hue: A narrow range around 120 degrees\nSat: High value, preferably more than 0.5 or 0.6\nIntensity: Can be of varying range for to presence of light and dark areas in green leaves and stem"
    },
    {
      "question_id": "99",
      "model_score": 41.3,
      "human_score": 0.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "non uniform coating, maintaining pressure is difficult"
    },
    {
      "question_id": "64",
      "model_score": 63.4,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Red and dark pink is around 0 degree and 360 Hue, so narrow range of 0 to 10 degrees and 350-360 degrees can be selected for red and pink. Since there are both dark and bright petals, we can select Intensity to be broad range of 0-1. For saturation we can choose narrow range of 0-0.2 as the rose red is generaly pure red color"
    },
    {
      "question_id": "64",
      "model_score": 62.2,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A small range around 0/360 degrees for H component to detect the red colour\nSaturation indicates the amount of greyness in the colour. This has high variance in the rose petals and hence we "
    },
    {
      "question_id": "106",
      "model_score": 54.6,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " There will be no trap in child process.\nThe process will be as follows:\n1) syscall of fork form process parent (hardware changes parent to kernel mode)\n2) does the fort, creates a child process (creates all entries needed for process)\n3) calls sched_lock (before calling sched) (interrupt handler for parent process)\n4) goes to scheduler (schedules the next process)\n\nNow child is also a process in scheduling. We dont need to change its x process in userlevel by parent. Parents (level) need to be change which will be handled by the trap (syscall) given in question.\n\nThere is no need of trap beacuse the fork itself created all the entries in child. (No need of trap to do extra changes)\nThere is no need to return to child because it didn't even enter into kernel mode."
    },
    {
      "question_id": "45",
      "model_score": 21.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "Ans: TRUE -> user process PID and another target process not working READY if 1 is running after finish then next so it doesn't have capability."
    },
    {
      "question_id": "86",
      "model_score": 74.6,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "by using homogeneous coordinates we can combine  multiplicative and additive transformation matrices. this is useful when we have log sequence of matrices"
    },
    {
      "question_id": "47",
      "model_score": 37.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "False, the exec system call can't be used in the parent process before the child process terminates."
    },
    {
      "question_id": "105",
      "model_score": 72.2,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. It has to reuse the page following instruction so that the changes that the user desired have taken effect"
    },
    {
      "question_id": "90",
      "model_score": 74.0,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Non-linearly transformation of feature vector help us to increase the information of feature into a high dimension space and thus introducing more variance. As a result the output model has more flexibility."
    },
    {
      "question_id": "28",
      "model_score": 58.6,
      "human_score": 1.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "it helps to define boundary specifically and avoid dangling edge or face"
    },
    {
      "question_id": "49",
      "model_score": 58.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, each process of the same program is a separate instance which is owned pid. This is because, despite them having the same binary, they might do different things based on user arguments."
    },
    {
      "question_id": "64",
      "model_score": 37.1,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H can vary from -45 to +45 degree, I "
    },
    {
      "question_id": "63",
      "model_score": 70.1,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Leaves and stem are green in colour. Intensity = (r+g+b)/3. Since green we take intensity as (-0.7,0.7) and hue as (97.5, 144.5) centered around 120 degrees.Here saturation is maximum for green but in the shadowish areas saturation will be low."
    },
    {
      "question_id": "98",
      "model_score": 63.0,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "Increases tool life for high speed tools due to high hardness"
    },
    {
      "question_id": "40",
      "model_score": 34.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nFalse, fd[0] are two file descriptor pointers to share the data through one is possible to write to one and read through another.\n"
    },
    {
      "question_id": "43",
      "model_score": 54.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse, It can switch to other process whenever an interrupt occurs, kernel stack stores data so no data loss."
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False. As page fault is an interrupt, we may see a different\nprocess scheduled by the os, and may not execute the next\ninstruction."
    },
    {
      "question_id": "63",
      "model_score": 41.1,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "I range from 0.2 to 0.33\nH range from 120 to 180"
    },
    {
      "question_id": "65",
      "model_score": 51.2,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. we can modify easily the defination while writing different other codes \n2."
    },
    {
      "question_id": "48",
      "model_score": 34.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. PID of parent process changes but process id of both process remains same & both are running. So child still remain connected to parent."
    },
    {
      "question_id": "65",
      "model_score": 39.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "A neater, more compact code inside the class {} block which is easier to read and to gain information about the existing members/member functions.\npublic, private, protected keywords have concise lists of member functions which "
    },
    {
      "question_id": "47",
      "model_score": 40.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue, a child process is created by forking a new process using fork() system call. And then the parent process can use exec system call on its child process."
    },
    {
      "question_id": "39",
      "model_score": -3.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "None"
    },
    {
      "question_id": "85",
      "model_score": 32.7,
      "human_score": 0.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "losses of head does not take place in same proportions as creep length"
    },
    {
      "question_id": "65",
      "model_score": 74.5,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)If the definitions of member functions are separated from declarations then readability of the program improves.\n2) The reader of the program can at a glance look at the abstraction and get an overall idea of the class, which helps in making changes to the program quickly and debugging easy."
    },
    {
      "question_id": "54",
      "model_score": 73.3,
      "human_score": 2.0,
      "question": "The appetitive      faculty corresonds to      ",
      "instructor_answer": "Plato's theory of the soul, the appetitive faculty is one of the 3 divisions of the soul. It is the part dealing with desires and passions",
      "student_answer": "Third part of the soul, which is related to desire for pleasure, be it sensual or intellectual."
    },
    {
      "question_id": "14",
      "model_score": 86.3,
      "human_score": 0.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "kurtosis coefficient of time series in any distribution - kurtosis coefficient of normally distributed time series (3)"
    },
    {
      "question_id": "51",
      "model_score": 77.0,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1.imperfection in crystal structure \n2.ionization of surface site\n"
    },
    {
      "question_id": "65",
      "model_score": 13.6,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1: This leads us to use that variable anywhere by"
    },
    {
      "question_id": "100",
      "model_score": 85.5,
      "human_score": 2.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "Low MRR, Limited life of nozzle"
    },
    {
      "question_id": "49",
      "model_score": 37.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False,\n The two processes will have their own separate PC's"
    },
    {
      "question_id": "90",
      "model_score": 62.4,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Non- linear transformation of feature vectors can be very useful as it may bring about differences in some intrinsic dimension."
    },
    {
      "question_id": "94",
      "model_score": 83.8,
      "human_score": 2.0,
      "question": "Why for an asymmetric variable, median is the best measure of central tendency?",
      "instructor_answer": "because around median 50 percent of the distribution is on the left and 50 percent is on the right , so in case of asymmetrial distribution where it is skewed, median will be the best measure of central tendency as mean in case of assymetrical distribution is not accurate measure of central tendency",
      "student_answer": "because median divides the entire distribution (CDF) into two equal halves.\nthat is , the area under distribution to the left of median = area under distribution curve to its "
    },
    {
      "question_id": "45",
      "model_score": 71.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue, as context switch can be done by OS only, which runs in kernel mode & has higher privileges.\n"
    },
    {
      "question_id": "46",
      "model_score": 26.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "False.  If the first occurred process contains an infinite loop, without timer interrupt, the OS still has opportunities to schedule other process which may complete if cannot stop this process and reschedule other process which may complete faster."
    },
    {
      "question_id": "98",
      "model_score": 49.6,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "increasing tool life and rate of production\nand improving the quality of product surface\n"
    },
    {
      "question_id": "48",
      "model_score": 89.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFALSE - After a fork, both the child & parent are executed simultaneously, but separately. The exec merely rewrites the instruction set of the process, after it's call and so, it isn't dependent on the parent process."
    },
    {
      "question_id": "66",
      "model_score": 68.8,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "easy to use and are based on actual market transactions"
    },
    {
      "question_id": "89",
      "model_score": 39.1,
      "human_score": 1.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "Can be used for ungauged basins to find UH if we know basin properties of ungauged basin and hydraulic parameters/results for *similar* catchment. Indirect Approach."
    },
    {
      "question_id": "102",
      "model_score": 67.3,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "Frequency (Current), Abrasive Slurry Flow rate, Depth of cut"
    },
    {
      "question_id": "105",
      "model_score": 86.1,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False.\nThe faulting instruction is executed again, as the process wasn't able to perform the intended change due to the pagefault."
    },
    {
      "question_id": "84",
      "model_score": 59.1,
      "human_score": 1.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "Perceptron with just one feature cannot seperate the data. perceptron with two features can seperate the classes effectively. perceptron classifier underperforms than multiperceptron classifier for many problems including XOR."
    },
    {
      "question_id": "63",
      "model_score": 66.3,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "create a saturation mask, with saturation above a certain threshold for S to eliminate grayish colors (maybe 0.2, could be lower). multiply with original image to get regions where the stem and leaves could be. now create a hue mask from this image, with a narrow band in H centred around 120 degrees (green) or the natural shade of green in leaves. multiply the mask with the original image to get the leaves and stems."
    },
    {
      "question_id": "25",
      "model_score": 95.8,
      "human_score": 2.0,
      "question": "Full form of ELISA is ____________________.",
      "instructor_answer": "Enzyme linked immunosorbent assay",
      "student_answer": "Enzyme Linked Immuno Sorbent Assay"
    },
    {
      "question_id": "47",
      "model_score": 87.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue, after fork() both parent & child processes can be used to call exec system call and it doesn't affect the other process."
    },
    {
      "question_id": "65",
      "model_score": 47.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)The implementation(definition) is separated from the abstraction(declaration).This way,we can ensure that the user is given "
    },
    {
      "question_id": "47",
      "model_score": 64.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "True. Yes we can initiate exec system call in parent because child process schedule in parent parent first then child next the schedules parent that first then child and above is possible."
    },
    {
      "question_id": "65",
      "model_score": 53.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) To make the code look clean and clear,we can write all declarations at one place and all definitions at one place.\n2) It will be be easy for the one who is reading the code to know what are all the variables used in the code ."
    },
    {
      "question_id": "84",
      "model_score": 91.7,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "A perceptron classifier will not be able to correctly classify the XOR problem as XOR is not a linear separable function. A multilayer perceptron can handle and accurately classify this problem."
    },
    {
      "question_id": "88",
      "model_score": 55.0,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "1.To maintain self neutralization\n\n2.To balance the fluctuations in the level of water "
    },
    {
      "question_id": "14",
      "model_score": 32.2,
      "human_score": 0.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "Kurtosis of the sample for"
    },
    {
      "question_id": "86",
      "model_score": 51.1,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "because they treat Euclidean and ideal points in the same way and can be described as matrices"
    },
    {
      "question_id": "27",
      "model_score": 59.6,
      "human_score": 1.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "1. Lasers are used in the biomedical field to destroy tumours and cancer cells. 2"
    },
    {
      "question_id": "42",
      "model_score": 31.7,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nAns) False, this is not possible as each process has unique PID, so it may only happen when process PID is changed.\n"
    },
    {
      "question_id": "47",
      "model_score": 92.1,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTRUE, the parent process can call exec system call"
    },
    {
      "question_id": "65",
      "model_score": 45.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) when we declare a function in a base class and there is a hierarchy inheritance with two derived class. we have flexibility to  write different defination in the derived classes according to our need.\n\n2)"
    },
    {
      "question_id": "106",
      "model_score": 80.9,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When the fork() system call is called, the child process\nmade with the trapframe to be identical to its parent\nso, the eip-register would point to the same instruction\n(instruction next to fork in this case); but the parent process\nreturns via trap-handler.\n\nBut when the child-process is first scheduled, it returns to\ntrap-handler from fork-ret-function instead of fork\nbut it still returns to trap-handler and returns to\nkernel mode via trap-handler.\n\nWhen the child-process does not return from trap-handler\nbut it is scheduled by the scheduler directly and\nstarts executing the instruction that is pointed by eip\nregister, so this way, the child process returns directly\nkernel mode to use mode."
    },
    {
      "question_id": "47",
      "model_score": 85.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue. The above can be done but if the parent process exits before child process then the child process will become an orphan process."
    },
    {
      "question_id": "11",
      "model_score": 86.6,
      "human_score": 2.0,
      "question": "Define Slutzsky-Yule effect",
      "instructor_answer": "This effect states that summation or average of random series may generate osscilations when no such movements exist in the original set of data.",
      "student_answer": "He suggested that moving summation (i.e EPi) or average of a random series may generate osscilations when no such movements exist in the original set of data."
    },
    {
      "question_id": "65",
      "model_score": 62.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "To avoid problems when our class/function /whatever are included in more than one place. 2 to have a separate interface and implementation. Compilation speed. Avoiding code duplication."
    },
    {
      "question_id": "48",
      "model_score": 88.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. The instance fork() is called, 2 processes are in existence. Even if the parent performs exec() and terminates, the child will run and exit independently."
    },
    {
      "question_id": "92",
      "model_score": 76.3,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Applications such as image stitching or object detection and recognition benefit from interest points like corners."
    },
    {
      "question_id": "65",
      "model_score": 62.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Seperating Definition from declaration can be used in cases like virtual functions where a function is declared in parent class and it is defined in subclasses as we have done in the labs\n\n2)Seperating Definition from declaration\nalso makes the readability and indentation of code easy"
    },
    {
      "question_id": "85",
      "model_score": 80.3,
      "human_score": 2.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "no distinction between horizontal and vertical creep."
    },
    {
      "question_id": "49",
      "model_score": 90.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n Each process needs to have a separate PCB otherwise they may interfere with each other's execution."
    },
    {
      "question_id": "65",
      "model_score": 50.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. By only declaring a virtual function, we can later define that function in sub-classes, which gives us more freedom about defining that function for only those sub-classes that need it. For example, in classes cube, square and circle deriving from class shapes, the function area() only needs to be defined in classes square and circle. \n\n2. Another benefit is that we can define the functions tailored as per the requirements of the class. For example, when defining the function area() for class square, we'll have to return s*s, while for circle::area() we'll have to output 3.14*s*s. So we'll define the two functions differently for the two classes. "
    },
    {
      "question_id": "106",
      "model_score": 22.5,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "Maybe use context switching to switch to parent process."
    },
    {
      "question_id": "51",
      "model_score": 53.0,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1. Adsorption of ions(either positively or negatively charged ) from the solution.\n2. Development of Helmholtz electrical double layer"
    },
    {
      "question_id": "53",
      "model_score": 62.1,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "To put road in different category we may use Any of the classifier along with Contextual Classification. As Road an generally small and straight they might look like edges, so a edge detector based Contextual classifier might be useful here."
    },
    {
      "question_id": "65",
      "model_score": 73.7,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Program looks structured and is comprehensive. It becomes easier for the reader to get a quick idea about the working of the class by just looking at the names of member functions once. Defining a member function at the place of its declaration gives an untidy look to the program.\n\n2) Editing/adding/deleting a member function becomes easier. When the member functions are declared at the same place (without definition), the editing of a program becomes easy. This also helps to fix an error (in case any) that arises at the time of compilation."
    },
    {
      "question_id": "103",
      "model_score": 46.4,
      "human_score": 1.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "Lower metal removal rate"
    },
    {
      "question_id": "35",
      "model_score": 66.0,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "sprinkle irrigation, drip irrigation"
    },
    {
      "question_id": "64",
      "model_score": 66.7,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H: narrow range centered at 0/360degree , possibly (330,20) for red color\nS: range betweem 0.5 and 1\nI: broad range centered at 0.4, possibly (0.1, 0.7) to include shadow regions also"
    },
    {
      "question_id": "94",
      "model_score": 19.7,
      "human_score": 0.0,
      "question": "Why for an asymmetric variable, median is the best measure of central tendency?",
      "instructor_answer": "because around median 50 percent of the distribution is on the left and 50 percent is on the right , so in case of asymmetrial distribution where it is skewed, median will be the best measure of central tendency as mean in case of assymetrical distribution is not accurate measure of central tendency",
      "student_answer": "it divide the entire data"
    },
    {
      "question_id": "65",
      "model_score": 63.6,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.)Codes doesn't look messy when defined and declared at different lines. As it will be neat and clean\n2.)When we separate declaration from definition then All the defined member functions of a particular class gets placed in consecutive lines which makes the user to easily analyse all the functions and also this reduces the confusion of which function is of which class"
    },
    {
      "question_id": "30",
      "model_score": 68.5,
      "human_score": 0.0,
      "question": "If there is one explanatory variable, regression analysis is termed as (                                                               )       else it is termed as (                                                                             )",
      "instructor_answer": "Univariate and Multivariate",
      "student_answer": "simple linear regression ; multiple regression"
    },
    {
      "question_id": "49",
      "model_score": 90.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, each instance of the executable will run as independently of each other. The PCB cannot be shared across mine as executing the processes would be in different states of execution."
    },
    {
      "question_id": "48",
      "model_score": 82.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFALSE \nOnce fork() is called, the two processes run independently."
    },
    {
      "question_id": "86",
      "model_score": 73.5,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "translation requires matrix addition where all others reflection, scaling etc require matrix multiplication. hence to reduce computer memory , to save space and time also to bring uniformity homogeneous transformation are used, by using which every transformation is converted into matrix multiplication only."
    },
    {
      "question_id": "85",
      "model_score": 85.3,
      "human_score": 2.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "no distinction between horizontal and vertical creep"
    },
    {
      "question_id": "68",
      "model_score": 49.8,
      "human_score": 1.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "it is desirable when the classification to be performed is having more than 2 classes and the input feature vectors have different weight vector for different feature vector. also when each feature vector has a vector of weight corresponding to it which needs to be updated in case of classification"
    },
    {
      "question_id": "102",
      "model_score": 68.3,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "Particle size,vibration amplitude,tool cross section "
    },
    {
      "question_id": "45",
      "model_score": 9.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nFalse"
    },
    {
      "question_id": "41",
      "model_score": 81.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "TRUE, It depends upon the scheduling policy on which process to schedule next and hence original process may or may not be scheduled."
    },
    {
      "question_id": "45",
      "model_score": 83.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue, o/s will context switch happens in kernel mode so user process doesn't have the power to initiate a context switch and schedule the target process next on CPU."
    },
    {
      "question_id": "89",
      "model_score": 53.5,
      "human_score": 0.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "it is used for rainfall - runoff modelling"
    },
    {
      "question_id": "82",
      "model_score": 77.2,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "There is a limitation of linear discriminant function that if data is distributed in such a manner that single linear discriminant function Cannot Seperate them then we need a non linear discriminant function to transform data  & then classity. Also another advantage of non linear discriminant is that it can handle outlier data also."
    },
    {
      "question_id": "64",
      "model_score": 66.0,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To sample Red, we can take Hue (H) in a narrow range around 45       or 315      . Then we can adjust the angle values depending on the Saturation, which should be close to 1 for the segmented rose petals. We concentrate more on Hue as it contains the color information and petals are mostly red (excluding the shadows on them). Intensity should be from 0.3 to 0.4."
    },
    {
      "question_id": "81",
      "model_score": 81.7,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "low eigen values indicates that there is very low variance in the eigen vector direction which implies that there is a high chance of collinearity in the data."
    },
    {
      "question_id": "63",
      "model_score": 58.4,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H: narrow region centered at 120 degree e.g. (105,135)\nS: range between 0.5 and 1 centers around 0.75\nI: broad range centers at 0.5"
    },
    {
      "question_id": "105",
      "model_score": 23.2,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " Time: due to limited memory physical pages cannot be allocated on some of\nA process cannot use all it's allocated address space so to minimize effectiveness w design hangsage such that there is valid virtual address but unmapped"
    },
    {
      "question_id": "41",
      "model_score": 47.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "True. The OS might decide to schedule something else"
    },
    {
      "question_id": "18",
      "model_score": 69.4,
      "human_score": 1.0,
      "question": "Define trap efficiency of a reservoir and write down the factors affecting the trap efficiency",
      "instructor_answer": "It is defined an the ratio of deposited sediment to the total sediment inflow for given period within the reservoir economic life time.Factors affecting the trap efficiency: Diameter of silt particles, size and weight and type of debrais. Wind flow direction. Shape of the dam.Topography of the dam structure. Material of the dam.",
      "student_answer": "Trap effideny is ratio of  deposited sediments to the sediment of total sediment deposited during economic life of reservior."
    },
    {
      "question_id": "82",
      "model_score": 69.4,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Non linear discriminant function provides high accuracy where data is not linearly classifiable. It gives output in terms of Class when input feature vector are given. Non- linear discriminant function also takes account the distributon and spatial correlation in account"
    },
    {
      "question_id": "97",
      "model_score": 65.3,
      "human_score": 1.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "Work piece material properties, cutting parameters, cutting dynamics"
    },
    {
      "question_id": "103",
      "model_score": 99.1,
      "human_score": 2.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate. Also, it is generally an expensive process"
    },
    {
      "question_id": "40",
      "model_score": 34.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue. In this case, each of fd[0] and fd[1] corresponds to STDOUT. This is the PID of another target process to which data is being written and STDIN. Writes using fd[0] and read using fd[1] not do anything. "
    },
    {
      "question_id": "64",
      "model_score": 20.6,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A narrow range of I centered around 0.33 as R is 1 in red region and others are approximately 0\nAlso, a broad range of H around 120 degrees"
    },
    {
      "question_id": "71",
      "model_score": 86.4,
      "human_score": 2.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "clay minerals, organic and ordinary ocean salts"
    },
    {
      "question_id": "104",
      "model_score": -1.0,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": "No picture was uploaded"
    },
    {
      "question_id": "36",
      "model_score": -4.1,
      "human_score": 0.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "I'm Nightscale Uuxelta, some random girl who wants to make a living off of videos someday. I'm a transfemme, born male, becoming female, and I love gaming! I'm a proud Canadian and furry, and"
    },
    {
      "question_id": "64",
      "model_score": 62.7,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360 degrees for H with saturation S above a certain threshold"
    },
    {
      "question_id": "19",
      "model_score": 72.2,
      "human_score": 2.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "it is used to decide what turn/movement the robot has to make next"
    },
    {
      "question_id": "65",
      "model_score": 21.4,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.Declaration gives us idea of where to use the files and how to use the files\n2.Definition gives us idea that why we should use this files "
    },
    {
      "question_id": "101",
      "model_score": 84.7,
      "human_score": 2.0,
      "question": "Write down the difference between seasonality and long-term oscillations in a hydrlogic time series data.",
      "instructor_answer": "Seasonality oscillation, Due to rotation of earth, around the sun, monthly and seasonal hydrologic events exhibit regular oscillating varations. Oscillations are found around the trend line some oscillations occur over very large period of time, known as long term oscillations. They are well distributed about their mean value.",
      "student_answer": "Seasonality: monthly & seasonal, hydrologic event exhibits a regular oscillatory form of variation due to rotation of earth around sun is called seasonality. Long-term Oscillation: Annual or decadal event exhibits.\na regular oscillatory form of variation lasting over a longer duration of observation is called long term oscillation."
    },
    {
      "question_id": "48",
      "model_score": 87.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. we can use exec in the parent. It has nothing to do with the forked child. The child will keep on running without any issues."
    },
    {
      "question_id": "36",
      "model_score": 82.1,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "climatic conditions, quality of water, size of the city, geographical location, living standards of people, cost of water"
    },
    {
      "question_id": "66",
      "model_score": 59.8,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "quick and convenient, \nmarket based"
    },
    {
      "question_id": "105",
      "model_score": 28.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True. In lazy allocation, only the virtual address space is incremented and the corresponding physical memory is allocated only when a page fault occurs and the OS sees the virtual address as valid."
    },
    {
      "question_id": "41",
      "model_score": 50.1,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "True, it depends on the scheduling policy implemented."
    },
    {
      "question_id": "52",
      "model_score": 83.8,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a Change in length upon original length\nengineering strain =         l/l=l-lo/lo\ntrue strain is dl/l integration=ln(1+e)"
    },
    {
      "question_id": "50",
      "model_score": 25.5,
      "human_score": 0.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "we can control the flood by estimating the down stream discharge"
    },
    {
      "question_id": "65",
      "model_score": 73.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) It is easier to see what functions have been defined in the given class .\n2) Understanding the code becomes simpler by just declaring the functions in classes and defining them later ."
    },
    {
      "question_id": "45",
      "model_score": 84.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "True. For example, if two processes are there which process 1 is running and fd[0] is for read and process 2 is ready which doesn't have capability to initiate a context switch and it is scheduled after process 1."
    },
    {
      "question_id": "63",
      "model_score": 11.8,
      "human_score": 0.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "1. narrow range around"
    },
    {
      "question_id": "86",
      "model_score": 77.6,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "Those allow us to use matrix algebra to perform multiple transformations and make the entire math convenient"
    },
    {
      "question_id": "64",
      "model_score": 40.8,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H=0, S is app=0.8, 0.5"
    },
    {
      "question_id": "75",
      "model_score": 57.3,
      "human_score": 2.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "1. The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1\n\n2. "
    },
    {
      "question_id": "106",
      "model_score": 54.0,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "A child process can return to user mode of the control shifts to scheduler (with a timer interrupt or parent waiting and hence & it selects the child process to run 6. Now as eip is copied from parents, content Af, we know now where to return to in user mode when there is an switching back."
    },
    {
      "question_id": "105",
      "model_score": 81.2,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. After allocation (mapping), the OS executes the same instruction (faulty instruction)"
    },
    {
      "question_id": "64",
      "model_score": 52.7,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H(350-360,0-30)\nS(0.6-0.9)\nI(0.4-0 8)"
    },
    {
      "question_id": "87",
      "model_score": 13.1,
      "human_score": 0.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "coagulation and flocculation"
    },
    {
      "question_id": "45",
      "model_score": 79.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "True Scheduling is supposed to be the task of the OS and a privileged operation. So, this functionality shouldn't be available to user-mode programs."
    },
    {
      "question_id": "47",
      "model_score": 71.8,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue - This will lead to child being orphaned and some other process will reap this child."
    },
    {
      "question_id": "79",
      "model_score": 35.5,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "Empirical equations are the equations are the equations which doesn't follow dimension equality(as discussed in class)"
    },
    {
      "question_id": "79",
      "model_score": 69.4,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "equation derived from experiment"
    },
    {
      "question_id": "49",
      "model_score": 88.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False.\n Every process has its own address space, which contains its own PCB. It is not shared between them. A contains state for that process. For eg. When one process is running and the other is ready. It is kept in STATE in PCB, which is different."
    },
    {
      "question_id": "102",
      "model_score": 72.9,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "Frequency, Abrasive Slurry Particle Diameter, Mass flow rate"
    },
    {
      "question_id": "29",
      "model_score": 95.7,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "Intensity of rainfall and time duration"
    },
    {
      "question_id": "72",
      "model_score": 51.9,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "The compressed image file is suitable to capacity of downlink system. It should not be undercompressed or not be overcompressed."
    },
    {
      "question_id": "72",
      "model_score": 27.8,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "In an online compression system it is possible that some information, such as neighbour supports are left out. since space images are difficult to down in a vey high resolution, these small loses can have large effects."
    },
    {
      "question_id": "65",
      "model_score": 55.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Readability. That is, while reading the class member functions and variables, one can easily locate a member function that is being searched for.\n2. Use of global variables. Although this need not apply to everyone, personally, if I would like to use a global variable and change its value when the function is called, I "
    },
    {
      "question_id": "48",
      "model_score": 62.9,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse, the exec can be used & then it terminate all the child of that parent."
    },
    {
      "question_id": "27",
      "model_score": 31.6,
      "human_score": 0.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "To make things visible in dark\nTo conduct experiments like YDSE\nwhich uses monochromatic light"
    },
    {
      "question_id": "42",
      "model_score": 88.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "False. Process scheduling is in the hands of OS and user processes don't have the privilege -to schedule which process runs next. It can indirectly cause a context switch by making blocking system calls but that doesn't  schedule immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss."
    },
    {
      "question_id": "102",
      "model_score": 66.5,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "particle size, vibration frequency, "
    },
    {
      "question_id": "35",
      "model_score": 73.1,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Flooding method\nFurrow method\nSprinklr method"
    },
    {
      "question_id": "106",
      "model_score": 0.9,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "4"
    },
    {
      "question_id": "32",
      "model_score": 75.2,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "Natural slope of Country steeper than longitudinal slope"
    },
    {
      "question_id": "56",
      "model_score": 71.5,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "sufficiency, efficiency, consistency"
    },
    {
      "question_id": "46",
      "model_score": 26.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nFalse. Without the timer interrupt a task would go on till its completion without sharing the CPU."
    },
    {
      "question_id": "70",
      "model_score": 69.5,
      "human_score": 1.0,
      "question": "What approach should be followed to find a reasonable probability distribution for a given time series?",
      "instructor_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanalysis the results\n",
      "student_answer": "to find reasonable probability distribution goodness of fit test must be used. eg- Chi-squared test."
    },
    {
      "question_id": "44",
      "model_score": 73.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "False, OS can use co-operative instead of non-cooperative which uses some system call called yield instead of time interrupt. This does not have the capability to imitate a context switch and schedule the target process next on the CPU."
    },
    {
      "question_id": "88",
      "model_score": 76.4,
      "human_score": 2.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "1) balance fluctuating flow, concentration\n2)encourages self neutralisation of influent\n3)stop discharge of periodic 'slug'"
    },
    {
      "question_id": "49",
      "model_score": 85.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n Each process matters to (or even of the same program) will have a different entry in page table and will have its own PCBs. They can have different PCBs variables like parent, pid (definitely different), etc."
    },
    {
      "question_id": "105",
      "model_score": 82.4,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "FALSE It must execute the faulting instruction before going to the next."
    },
    {
      "question_id": "48",
      "model_score": 33.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\n **FALSE**"
    },
    {
      "question_id": "63",
      "model_score": 77.1,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "For green leaves hue in narrow range around 120 degrees and intensity in broad range over 0to1 as some leaves are brighter while others are shadowed"
    },
    {
      "question_id": "44",
      "model_score": 27.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "TRUE It needs to check the schedule using time interrupt"
    },
    {
      "question_id": "64",
      "model_score": 33.3,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "In HSI model, intensity of red is low so it is between 0 and 1 but somewhat closer to 0 as compared to 1.\nSaturation is the purity of colour and as by looking at this image, it looks like it has high saturation because if it was less saturated th"
    },
    {
      "question_id": "12",
      "model_score": 65.2,
      "human_score": 1.0,
      "question": "Define design flood.",
      "instructor_answer": "It is the flood adopted for the design of the structures",
      "student_answer": "Flood adopted for the design"
    },
    {
      "question_id": "67",
      "model_score": 99.6,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "method of moments, method of maximum likelihood"
    },
    {
      "question_id": "79",
      "model_score": 24.1,
      "human_score": 0.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "equations that give results proportional to the original result"
    },
    {
      "question_id": "49",
      "model_score": 85.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Using fork(), a program can instantiate and execute more than 1 process simultaneously but bo these processes use different PCBs."
    },
    {
      "question_id": "99",
      "model_score": 24.1,
      "human_score": 0.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "Cannot be used for brittle materials"
    },
    {
      "question_id": "65",
      "model_score": 76.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. increases the readability of code for programmers and easy debugging as more modularity is shown than previous\n2.\nmakes it easy for new people introduced to program to just know what are the functions in class and values to pass and purpose and need not know about working \n"
    },
    {
      "question_id": "39",
      "model_score": 61.1,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "False, Pipes can read using fd[0] only in one direction. It functions only in one user and process."
    },
    {
      "question_id": "63",
      "model_score": 70.0,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Leaves and Stem are green in color. And green has Hue around 120 degrees. So hue H can have a narrow range around 120 degrees.  The amount of saturation is varied in each of the leaves and Stem regions. So saturation can take a broad range of values from 0 to 1. Intensities also can take large range of values from 0 to 1. Especially because in the lower left region, the stem is very dark. But the leaves in the top are very bright. So a large range is required. This will work because there are no other objects in green color in the image and this is handled well by Hue. "
    },
    {
      "question_id": "53",
      "model_score": 41.0,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Like a typical classfication problem we need to extract a set of features for each object based on Spatial fetaure, NDVI, Texture feature, shape feature and contextual feature. "
    },
    {
      "question_id": "63",
      "model_score": 45.7,
      "human_score": 0.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H varies from 125 deg to 145 deg (mean values is 135 deg for gree"
    },
    {
      "question_id": "90",
      "model_score": 74.1,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Non linearly transforning feature vectors can have many uses:  It is possible that the dataset is not  \"nice\" enough or simple enough to , be classified linearly and introducing the non linearity can help transform our feature space to a form which is simple."
    },
    {
      "question_id": "43",
      "model_score": 54.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False Due to interrupt, the process is now in kernel mode of CPU has to decide whether to continue the process or not. After completion of the interrupted else CPU can initiate cooperative multitasking."
    },
    {
      "question_id": "50",
      "model_score": 49.3,
      "human_score": 0.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "Reservoir routing is easier to perform than river routing because storage discharge relations for pipes, weirs and spillways are single valued functions independent of inflow."
    },
    {
      "question_id": "53",
      "model_score": 63.7,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "The features which may be useful are: length of the straight road and width of the road"
    },
    {
      "question_id": "60",
      "model_score": 78.0,
      "human_score": 2.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "windrow,static areated,in-vessle"
    },
    {
      "question_id": "32",
      "model_score": 33.3,
      "human_score": 1.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "In cross-drainage works, when the difference between bed level of canal and that of drainage is small"
    },
    {
      "question_id": "49",
      "model_score": 76.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. For different process instances, cleaning value of crucial registers like PC, $p$ are different hence such naive reference counter won't work. Moreover different I/O can cause totally different executions."
    },
    {
      "question_id": "44",
      "model_score": 16.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFALSE"
    },
    {
      "question_id": "104",
      "model_score": 2.4,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " The image contains the following text:\n\nThe Great Depression was a severe worldwide economic depression that began in the United States in the 1930s. The global gross domestic product (GDP) decreased by an estimated 15% between 1929 and 1932. During the Great Recession, global GDP decreased by less than 1% from 2008 to 2009.\n\nThe Great Depression was the twentieth century's longest, deepest, and most widespread decline. It began in the United States, with the stock market crash on October 29, 1929 (known as Black Tuesday). The global gross domestic product (GDP) decreased by an estimated 15% between 1929 and 1932. During the Great Recession, global GDP decreased by less than 1% from 2008 to 2009.\n\nThe Great Depression had many causes, both domestic and international. Domestically, the unregulated financial system allowed for excessive risk-taking and speculation. This led to a bubble in the stock market, which burst in 1929. Internationally, the global economy was interconnected and interdependent, so the Great Depression in the United States had a ripple effect that spread to other countries.\n\nThe Great Depression caused widespread unemployment, poverty, and social unrest. In the United States, the unemployment rate reached 25%, and millions of people lost their jobs, homes, and savings. The Great Depression also led to a decline in output, investment, and trade.\n\nThe Great Depression ended in the late 1930s, with the outbreak of World War II. The war stimulated the economy and helped to create jobs. However, the Great Depression had a lasting impact on the United States and the world. It led to the creation of new social programs, such as Social Security, and it changed the way that people thought about the economy and the role of government."
    },
    {
      "question_id": "7",
      "model_score": 55.1,
      "human_score": 2.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "Reverse spray. Pressurized water is directed from the bottom of the filter upwards.\nFew cms of biological mat is also removed."
    },
    {
      "question_id": "8",
      "model_score": 70.0,
      "human_score": 0.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N4 was likely in leader in term 1, N3 in term 2 and N2 in term 3. N1 and N5  was likely never a leader."
    },
    {
      "question_id": "78",
      "model_score": 66.8,
      "human_score": 1.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "1. runoff\n2. cascade\n3. storage "
    },
    {
      "question_id": "45",
      "model_score": 9.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nFalse"
    },
    {
      "question_id": "105",
      "model_score": 76.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, the cpu handles the pg fault as mentioned above but it doesn't execute the next instruction. Instead it executes the faulting instruction again. This time it wont give pgflt as the phy pg has been mapped to the faulting va & it executes successfully performing the desired access & subses"
    },
    {
      "question_id": "39",
      "model_score": 92.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "False The write syscall can be performed only on fd[1] file and this data can be read only on fd[0] file. Not the other way round."
    },
    {
      "question_id": "65",
      "model_score": 54.3,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)code will be easy to understand\n2)we are able to think in abstract sense"
    },
    {
      "question_id": "72",
      "model_score": 31.2,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "issue in design of online compression are statistical , coding, interpixel, pyscologiacl redundancy. The disadvantage of online compression is the compression rate is arbitrary."
    },
    {
      "question_id": "39",
      "model_score": 15.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "FALSE"
    },
    {
      "question_id": "70",
      "model_score": 13.6,
      "human_score": 0.0,
      "question": "What approach should be followed to find a reasonable probability distribution for a given time series?",
      "instructor_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanalysis the results\n",
      "student_answer": "probability paper method and histogram"
    },
    {
      "question_id": "63",
      "model_score": 81.1,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "\nThen green stems and leaves are there with little of black or darkness present, so:\nHue should be around 120 degrees because of green colour\nSaturation high for green colour but also low for darkness in stems. it will again vary from low values to high (0.1-.9)\nintensity is low to minimum for green and black around 0-0.5 range.\n\nagain here if were to ignore the shadowed pixes then we can use narrow range for HS and I. H around 120, S around .8-1 and I to be around 0.33"
    },
    {
      "question_id": "64",
      "model_score": 70.8,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360 in hue, a wide range around 0.5-1 in saturation and wide range centered at 0.5 in intensity"
    },
    {
      "question_id": "101",
      "model_score": 80.2,
      "human_score": 2.0,
      "question": "Write down the difference between seasonality and long-term oscillations in a hydrlogic time series data.",
      "instructor_answer": "Seasonality oscillation, Due to rotation of earth, around the sun, monthly and seasonal hydrologic events exhibit regular oscillating varations. Oscillations are found around the trend line some oscillations occur over very large period of time, known as long term oscillations. They are well distributed about their mean value.",
      "student_answer": "Seasonality is the regular oscillations in time series values that occur due to the rotation of earth. These are short term cyclic. Long-tom oscillation are long term cyclic variations that occur about the mean."
    },
    {
      "question_id": "19",
      "model_score": 67.7,
      "human_score": 1.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "DecideAction is used to take action( for eg. direction change) based on the color sensor value and IR value."
    },
    {
      "question_id": "65",
      "model_score": 68.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Avoids bunching of code in the class and hence has better readibility.\n2. Class is easy to understand as an object which has member functions, without knowing the details of how the task is implemented.\n3. Pure Virtual functions are based on this idea where declaration is present in superclass but definition is present in subclasses. These "
    },
    {
      "question_id": "65",
      "model_score": 27.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)the module (be it function or member function)can be overridden depending upon situation in classes and user under different namespaces\n2)"
    },
    {
      "question_id": "104",
      "model_score": 13.6,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " In dock():\nsyscall_interrupt_handler() ; gives the control to OS\nas creating a new process requires memory allocation which is a privileged action.\nwait():\nasking for the process to wait - we wait with \nto kernel made where OS schedule another \nprocess."
    },
    {
      "question_id": "65",
      "model_score": 14.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "We can create abstract classes."
    },
    {
      "question_id": "64",
      "model_score": 77.2,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A broader range around 0/360 degrees in H such that all red color is covered. The suitable range has to be found empirically. This is done as rose petals are red in color and red color can be easily segmented in hue space. \nFurthermore, intensity can't be used as it varies from dark to light for both red rose and green leaves/stem. Saturation should also not be used as both red and green will probably have good saturation as the color seems pure. So, a saturation threshold might not be helpful in this case. However, hue is different for rose petals than other parts of image as no other red is visible in image."
    },
    {
      "question_id": "90",
      "model_score": 52.5,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Various times using the features vectors as such, it becomes very hard to classify the data , if the decision boundaries are very complex and/or the classifier at hand classify the classes."
    },
    {
      "question_id": "84",
      "model_score": 52.6,
      "human_score": 1.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "in the performance of a perceptron classifier, Single activation function is used while as in multilayer perceptron, two or more activation fucntions can be used. Multi layer perceptron classifier is more time consuming and iterative process compared to perceptron classifier. Multilayer perceptron classifier is good in handling the XOR problems."
    },
    {
      "question_id": "56",
      "model_score": 94.2,
      "human_score": 2.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbiased, efficient, consistent, sufficient "
    },
    {
      "question_id": "56",
      "model_score": 85.0,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbiasedness,consistency, efficiency"
    },
    {
      "question_id": "63",
      "model_score": 63.4,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "a narrow range around 120 degrees for H. Because leaves and stem have greenish colour with some mixture from brown. Intensity is varying for leaves in the image from very low to very high so we can't threshold using I. Similarly saturation is varying for stems in bottom left a lot so we can't use this as threshold."
    },
    {
      "question_id": "65",
      "model_score": 30.0,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "you can avoid problems when your class/functions are included in more than one place."
    },
    {
      "question_id": "49",
      "model_score": 80.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE; both process may use same binary program to execute, but address space are different as both are independent of each other."
    },
    {
      "question_id": "65",
      "model_score": 47.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Program will thus be written in an orderly fashion, and is easy to read, understand and find errors.\n2. "
    },
    {
      "question_id": "89",
      "model_score": 53.6,
      "human_score": 2.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "converts effective storm hyetograph into runoff hydrograph"
    },
    {
      "question_id": "49",
      "model_score": 91.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": " False, Each instance of program (process) uses a different PCB. Processes must be isolated despite being same program."
    },
    {
      "question_id": "67",
      "model_score": 17.9,
      "human_score": 0.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "point estimation and interval estimation"
    },
    {
      "question_id": "82",
      "model_score": 52.5,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Perceptors with single feature cannot seperate the data in the case of linear discriminant function but. In non linear discriminant function it can be done."
    },
    {
      "question_id": "39",
      "model_score": 90.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse. \nfd[0] is opened in read mode and fd[1] is in write mode. So read on fd[1] and write on fd[0] is not possible. Hence the answer is false. The 'or' in qn meant any one of the statements to be true.\n"
    },
    {
      "question_id": "81",
      "model_score": 54.4,
      "human_score": 0.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "very low eigen value would indicate the direction of slowest change."
    },
    {
      "question_id": "80",
      "model_score": 12.5,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "symmetry about 3 orthogonal planes"
    },
    {
      "question_id": "74",
      "model_score": 70.2,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "Too many hidden layers may result in overfitting and no.of neuron in the hidden layers can increase the time it takes to train the network"
    },
    {
      "question_id": "43",
      "model_score": 60.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False, after completion of the interrupt handler, if the process is terminated or exited or in some schedules the process is never scheduled, then the same process won't be scheduled."
    },
    {
      "question_id": "41",
      "model_score": 40.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTRUE\nWhile this is happening the interrupt handler P may still be running. To handle the process P might still be executing and P, may not be rescheduled immediately."
    },
    {
      "question_id": "85",
      "model_score": 35.1,
      "human_score": 0.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "It apporximates that the creep losses is inversely telated to creep length"
    },
    {
      "question_id": "106",
      "model_score": 44.2,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "As the child process does not have its own trap, its returning trap happens differently. Basically, first child process goes to the parent, then the parent goes to the loop. After trap is done, parent gives it back to child. Eventually child finishes, but for it to really end, it gets reaped by the parent."
    },
    {
      "question_id": "47",
      "model_score": 64.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "**TRUE**. It can be used. But this may not a have the effect that user wants to use. If a process ( child ) fork and executes, this leads to termination of parent after exec."
    },
    {
      "question_id": "64",
      "model_score": 70.4,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "using the equation of hue and theta, we know that R is maximum when hue is 0(or 360 equivalently). So a band around 0/360 going either way (0+ and 360-) should be able to do the task. Since g and b values are low, the band should be narrow. All I values and all S values should be accepted as the petals become black at many places."
    },
    {
      "question_id": "2",
      "model_score": 99.9,
      "human_score": 2.0,
      "question": "\nWhat\nis the Full form of RCP?",
      "instructor_answer": "Representative Concentration Pathway",
      "student_answer": "Representative Concentration Pathway"
    },
    {
      "question_id": "39",
      "model_score": 4.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "TRUE"
    },
    {
      "question_id": "35",
      "model_score": 59.3,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Sprinkler, Drip irrigation"
    },
    {
      "question_id": "63",
      "model_score": 72.9,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Leaves is a mix of bright green and dirty green while the stem is mostly dark green with little to no bright portions. The colour information of green is mostly contained in hue and saturation denotes purity of green colour while intensity denotes the average grayness (or brightness) of pixel. Therefore as hue of green is about 120. H must be in a narrow range around 120 (say       10), S can more broad in range and centered about a , say S can be centered around 0.65 and in range       0.35. I has average grayness information and as some part of petals are bright red while some more dark/gray red, range of I must be broad"
    },
    {
      "question_id": "106",
      "model_score": 75.8,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " After fork() system call, \na new PCB and PID are allocated to child process\n(by copying page tables and physical pages)\nmemory of parent process\nand a new kernel stack is also created.\n\nAnd the fork system call copies the entire trapframe of the \nparent process and changes eax in it and return pointer\nto forkret and context is copied from parent process\nand that is also saved in kernel stack and context\ncontains eip at which code has to start running from.\nChild process can start executing after returning from\n(Copied from page 169)\nIt also working copy"
    },
    {
      "question_id": "42",
      "model_score": 59.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFALSE. It has capability to initiate a context switch but scheduling the target process next or not depends on OS schedular."
    },
    {
      "question_id": "41",
      "model_score": 50.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "TRUE. The process may not be rescheduled immediately, cause it depends on the scheduling policy."
    },
    {
      "question_id": "104",
      "model_score": 1.1,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": "No picture detected."
    },
    {
      "question_id": "65",
      "model_score": 56.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "easy to identify the member functions\nclass becomes easier to read and edit"
    },
    {
      "question_id": "15",
      "model_score": 58.6,
      "human_score": 1.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "meteorological drought is defined as drought which is based on degree of dryness and duration of dry period."
    },
    {
      "question_id": "49",
      "model_score": 89.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n Each process has its own independent PCB. A binary program initiates new processes using system calls fork() which creates a new (child) process which has its PCB distinct from the parent PCB."
    },
    {
      "question_id": "79",
      "model_score": 86.9,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "equation derived from observations and experiments"
    },
    {
      "question_id": "65",
      "model_score": 22.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1: This leads us to use that variable anywhere by just declaring it.Like if we define a global variable a,then we can use it anywhere in the program, but if we declare a there then value of a will be fixed in the program.\n\n2: This helps us in the program of dynamic binding where we can inherited other class object into other class star type variable.\n  A *a;  B *b = new B();   // A and B are two classes\n   a=b;"
    },
    {
      "question_id": "50",
      "model_score": 89.5,
      "human_score": 1.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to subme"
    },
    {
      "question_id": "104",
      "model_score": 25.1,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) User process asks for 16MB space for OS\nUser process access an address > 16MB (other processes data may be)\nBy LDB, OS stops this was it is privileged to read other processes data\n2) tries to change timer on timer interrupt on IDT registers\nOS stops this by saying these registers are fixed and cannot be read/written\n3) user program: size of (m,l) : n bytes (adding a new instruction to ISA)\nOS stops this by giving an error saying that it is not allowed to change size of datatype, because the ISA is fixed."
    },
    {
      "question_id": "58",
      "model_score": 53.3,
      "human_score": 2.0,
      "question": "The philosophies to define environmental management are                                                                                                            ",
      "instructor_answer": "Conservationism, Preservationism, Deep Ecology, Social Ecology",
      "student_answer": "conservatism is the philosophy to define the environment management which include optimum resource management, waste reduction, energy utilization and many more things to conserve the environment\nother philosophies include preservatism, deep ecology and social ecology"
    },
    {
      "question_id": "53",
      "model_score": 63.8,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Roads in an urban area are typically adjacent to buildings. Also roads are genrally long. Hence edge information of roads and the probability of occurance of buildings in the neighbourhood can be useful features."
    },
    {
      "question_id": "42",
      "model_score": 65.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse. The scheduler can choose any process from the READY processes to schedule on the CPU.\n"
    },
    {
      "question_id": "48",
      "model_score": 12.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False\nActually Incorrect"
    },
    {
      "question_id": "43",
      "model_score": 89.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "**False** It is NOT necessary that the process will be re-scheduled immediately. For eg., read() is a blocking system call, so, if this process went into state 'D' due to a timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking."
    },
    {
      "question_id": "104",
      "model_score": 21.0,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " int *p = (int *)malloc(size of (int));\n*p = 100;   // the heap size of just 4bytes, when we try to access 100th byte, OS raises a page fault.\n\nint fd = open(file, RD_ONLY);\nwrite(fd, buff);  // to a readonly file if we tries to write it raises a trap or panics & gives an error"
    },
    {
      "question_id": "51",
      "model_score": 56.0,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1.Imperfection sites in colloids:\ninstead of silicon sometimes there are lesser metal valency atoms which causes a net negative charge.\n2."
    },
    {
      "question_id": "41",
      "model_score": 92.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTRUE. The next turn of the process will be decided by the OS scheduler, which may/may not schedule it immediately on completion of the interrupt handler."
    },
    {
      "question_id": "49",
      "model_score": 84.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False.\n Each process requires its own stack, heap memory, list of open files, etc., and thus requires its own TCB."
    },
    {
      "question_id": "30",
      "model_score": 98.9,
      "human_score": 2.0,
      "question": "If there is one explanatory variable, regression analysis is termed as (                                                               )       else it is termed as (                                                                             )",
      "instructor_answer": "Univariate and Multivariate",
      "student_answer": "univariate, multivariate"
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, the OS may schedule another process, so the EIP may be set to another of the other process, not necessarily the next instruction of the same process."
    },
    {
      "question_id": "15",
      "model_score": 55.7,
      "human_score": 0.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "drought caused by the change in meteorological parameters"
    },
    {
      "question_id": "65",
      "model_score": 16.1,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. We can use the Base class to create a container to store all the instances of the subclasses. This reduces a lot of redundancies. Say, e.g:\n\nRectangle and Circle inherit the Shape class.\n\nvector<Shape*> shapes;\nshapes.push_back(new Rectangle());\nshapes.push_back(new Circle ());\n\nIf shape class has virtual functions, we can use dynamic binding and call all the functions in Circle/Rectangle we want, without refering to the internal contents of shapes"
    },
    {
      "question_id": "21",
      "model_score": 80.6,
      "human_score": 2.0,
      "question": "Differentiate between true random number and pseudorandom number generators.",
      "instructor_answer": "TRNG uses unpredictable physical mean for computation of random\nnumber, results are truely random and unpredictable , some random numbers cannot be reproduced. PRNG uses mathematical algorithm which are computer based. Its logical which uses mathematical formulas to generate sequence of random number. Some random number can be produced.",
      "student_answer": "TRNG occur or get generated randomly without any repetition mainly without any hidden equation behind. While PRNG has some hidden mathematical form or equation for us they seem random. These can be generated again by giving same seed and other same Parameters again and again."
    },
    {
      "question_id": "99",
      "model_score": 54.3,
      "human_score": 0.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "coating may not be sufficiently thick to protect against wear depending on chemistry. Coating may not bind well with the surface. coating may be susceptible to cracks as brittle material."
    },
    {
      "question_id": "51",
      "model_score": 49.4,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "Adsorption of ions &"
    },
    {
      "question_id": "63",
      "model_score": 73.0,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "for leaves :\"a narrow range around 120 for H, a broad range for I around 0.33, a narrow range around 1 for saturation for stem : \"a narrow range around 120 for H, a narrow range for I around 0.33, a narrow range around 0 for saturation"
    },
    {
      "question_id": "105",
      "model_score": 83.7,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False. The next instruction is not the one executed.\nAfter the fault, the OS allocates a new page and restores the current instruction, rather continues it."
    },
    {
      "question_id": "36",
      "model_score": 88.9,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1) Climatic conditions \n2) Geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available"
    },
    {
      "question_id": "65",
      "model_score": 58.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) this division helped us in a way that whenever we want to use a function multiple times in a program, we don't need to define it every time, just declaration would work.\nmeans we can use the function at a later stage just by declaring.\n\n2) second advantage is that it provides us the chance to define functions at a later time also, like if "
    },
    {
      "question_id": "65",
      "model_score": 65.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)in classes it is useful to get an idea of the class's abstraction\n2)if the function call is needed before writing it's implementation, writing the declaration before the call would suffice.This is a very useful idea and so is the first one."
    },
    {
      "question_id": "97",
      "model_score": 25.4,
      "human_score": 0.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "spindle speed, material properties of workpiece"
    },
    {
      "question_id": "42",
      "model_score": 80.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "FALSE. That is a privileged operation meant only for the scheduler."
    },
    {
      "question_id": "105",
      "model_score": 86.3,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " TRUE, The OS steps into the page fault and allocates page.\nFALSE, After handling the page fault by allocation, the OS ensures re-execution of the faulting instruction."
    },
    {
      "question_id": "69",
      "model_score": 61.8,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "which is not useful for main purpose due to silt collection but we can use that reservoir for another side purposes"
    },
    {
      "question_id": "105",
      "model_score": 87.6,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. After OS handles the page fault as given, it executes the same instruction again."
    },
    {
      "question_id": "78",
      "model_score": 76.6,
      "human_score": 2.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "Run of River plant\nStorage plant\ncascade plant"
    },
    {
      "question_id": "40",
      "model_score": 36.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nFalse, we can read from fd[0] & close read & then write into fd[1]\n"
    },
    {
      "question_id": "65",
      "model_score": 67.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Separate declaration and definition makes the code more readable and easy to understand. It also reduces overall clutter and brings neatnw"
    },
    {
      "question_id": "97",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "Depth of Cut, Hardness of Workpiece, Width of cut"
    },
    {
      "question_id": "48",
      "model_score": 87.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. There are no restrictions on any process that is either parent process or child process. In those cases child process after fork system call can also use exec system call and need not wait for the child process to end."
    },
    {
      "question_id": "65",
      "model_score": 73.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) The program becomes easy to understand as all the declarations will be available in one place.\n2) The body of the class is short as all the defination will be outside the class and the program can be more easily readable."
    },
    {
      "question_id": "37",
      "model_score": 95.3,
      "human_score": 2.0,
      "question": "Negative electrode used in Nickel         MH Batteries are _____________.",
      "instructor_answer": "Hydrogen absorbing alloys (MH)",
      "student_answer": "a hydrogen absorbing alloy"
    },
    {
      "question_id": "58",
      "model_score": 82.2,
      "human_score": 1.0,
      "question": "The philosophies to define environmental management are                                                                                                            ",
      "instructor_answer": "Conservationism, Preservationism, Deep Ecology, Social Ecology",
      "student_answer": "1. conservationism 2. preventionism 3. deep ecology 4. social ecology"
    },
    {
      "question_id": "72",
      "model_score": 64.2,
      "human_score": 2.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "If the image is compressed more than the downlink capacity then the image quality will detoriate and the image should be compressed enough to be easily transmitted through the downlink."
    },
    {
      "question_id": "74",
      "model_score": 68.6,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "issues in Learning:  The learning can become very slow as the back-propagated changes become smaller and smaller. So updates to nodes in initial layers can be very small. issues in generalization: Very big and complex NNS tends to overfit to the training data and fail to generalize well."
    },
    {
      "question_id": "90",
      "model_score": 71.8,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "By transforming the feature, vectors non -linearly and adding the transformed feature into feature vector can help in easy classification of data using dimension hyper plane"
    },
    {
      "question_id": "19",
      "model_score": 57.6,
      "human_score": 1.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "It decides the actions for the eBot whether to turn or not"
    },
    {
      "question_id": "94",
      "model_score": 82.9,
      "human_score": 2.0,
      "question": "Why for an asymmetric variable, median is the best measure of central tendency?",
      "instructor_answer": "because around median 50 percent of the distribution is on the left and 50 percent is on the right , so in case of asymmetrial distribution where it is skewed, median will be the best measure of central tendency as mean in case of assymetrical distribution is not accurate measure of central tendency",
      "student_answer": "Because median divides the distribution in two equal areas ( 50% area on both sides), so for skewed/assymetric "
    },
    {
      "question_id": "75",
      "model_score": 15.2,
      "human_score": 0.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "linear response of catchment"
    },
    {
      "question_id": "66",
      "model_score": 7.6,
      "human_score": 0.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "Intrinsic value is obtained"
    },
    {
      "question_id": "47",
      "model_score": 7.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nFalse, we can't."
    },
    {
      "question_id": "67",
      "model_score": 98.1,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "method of moment, method of maximum likelihood"
    },
    {
      "question_id": "56",
      "model_score": 76.6,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "consistency, efficiency, sufficiency"
    },
    {
      "question_id": "39",
      "model_score": 41.9,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFALSE. The file contents of fd[0] after writing to it are copied over to fd[1], not the other way around. So reads can only be on fd[1].\n"
    },
    {
      "question_id": "65",
      "model_score": 73.7,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) The code will be more clear and easier for the reader to understand\n2) By writing seperately , we can easily override our definition"
    },
    {
      "question_id": "47",
      "model_score": 60.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "True Can be achieved by a blocking/sleep syscall in the child process. After the exec call in the parent, the child process will be adopted by the init process and reaped by it."
    },
    {
      "question_id": "43",
      "model_score": 85.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False, on completion of the interrupt handler the process may be rescheduled later if its time quantum exceeds."
    },
    {
      "question_id": "55",
      "model_score": 94.0,
      "human_score": 2.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "cetyl alcohol and stearyl alcohol"
    },
    {
      "question_id": "65",
      "model_score": 52.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) when in a class while defining a large number of member functions , seperating the declaration so that we can declare it after the class is completed helps in getting the overall idea of how many member functions are present ,which are virtual ,which are pure virtual functions ..etc. all the variables, constructors, member functions , will be  lined up one below the other which gives good picture of total functions of the class.\n\n2) seperating the declaration from definition helps a lot in inheritance , example :\nwhen there is a virtual function in base class that is not declared yet and is inhertited to a daughter class "
    },
    {
      "question_id": "64",
      "model_score": 42.5,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment the rose petals from the image the hue must be in range around from 240degress to 360 degrees."
    },
    {
      "question_id": "63",
      "model_score": 86.7,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Hue should be centered around 120 degrees for green color. Intensity. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, the saturation is low as the green color is not very pure."
    },
    {
      "question_id": "106",
      "model_score": 48.3,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When the parent forks a child, it makes its state Runnable apart from copying all the data and making it identical.\nThe next time the scheduler is scheduling, if it encounters child before any process, child, it will switch the kernel mode to user mode and return from a trap\nAlso, since there was no trap in child process, no need to return from a trap"
    },
    {
      "question_id": "68",
      "model_score": 61.3,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "when we are trying to learn a complex (non-linear) mapping from input features to output class we should use mlp. example- single layer perception cannot learn XOR function on two variables but mlp can. if the training loss on using a single layer perception doesnot decrease with epochs (underfitting) we should go for a multilayer perception"
    },
    {
      "question_id": "14",
      "model_score": 47.1,
      "human_score": 0.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "Excess kurtosis means the distribution big event outcome has fat tails on the bell shaped curve that is outcome has more outlier results."
    },
    {
      "question_id": "63",
      "model_score": 26.5,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "narrow range of S centred around 0.5"
    },
    {
      "question_id": "4",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "A rating curve is only valid when?",
      "instructor_answer": "A rating curve is only valid when there is no over flow or flood in a region.",
      "student_answer": "A rating curve is only valid when there is no over flow or flood in a region."
    },
    {
      "question_id": "99",
      "model_score": 64.0,
      "human_score": 2.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "coating is thin in nature- may not be sufficient to"
    },
    {
      "question_id": "105",
      "model_score": 68.8,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " Edge:\nThe first half is correct, but it does not consider the next instruction after handling the page fault. Instead, it issues the same instruciton i.e. the one which caused page fault. After it has handled the page fault it knows that instruction was not executed completly due to the page fault exception."
    },
    {
      "question_id": "58",
      "model_score": 17.5,
      "human_score": 0.0,
      "question": "The philosophies to define environmental management are                                                                                                            ",
      "instructor_answer": "Conservationism, Preservationism, Deep Ecology, Social Ecology",
      "student_answer": "\nUltimate goal of environmental management is to attain sustainability "
    },
    {
      "question_id": "64",
      "model_score": 79.9,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "I range should be a broad range around 0.5, nearly full scale.\nSaturation should be a very narrow window near 1, the component of green would be minimal or 0 entirely\nHue should be a narrow sector around 0/360 degrees i.e red but more towards 300 degrees because of the color magenta.\nThis takes care of the red color of all intensities to be classified as petals."
    },
    {
      "question_id": "9",
      "model_score": 40.0,
      "human_score": 0.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "Assumptions, Constant Capital Structure"
    },
    {
      "question_id": "46",
      "model_score": 27.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\n$\\rightarrow$ False, exec() system call has nothing to do with the CPU, using switch it can only send signal to initiate a scheduled process, while exec() only has the program is overwritten but file descriptors /child are not affected."
    },
    {
      "question_id": "18",
      "model_score": 72.9,
      "human_score": 2.0,
      "question": "Define trap efficiency of a reservoir and write down the factors affecting the trap efficiency",
      "instructor_answer": "It is defined an the ratio of deposited sediment to the total sediment inflow for given period within the reservoir economic life time.Factors affecting the trap efficiency: Diameter of silt particles, size and weight and type of debrais. Wind flow direction. Shape of the dam.Topography of the dam structure. Material of the dam.",
      "student_answer": "It is defined an the ratio of deposited sediment to the total sediment inflow for given period within the reservoir economic life time. Factors affecting trap effieciency are Trap efficieney depends on the catchment from where inflow is coming in the reservoir."
    },
    {
      "question_id": "35",
      "model_score": 73.6,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Types of irrigation methods are\n1)flooding\n2)burrow \n3)sprinkler irrigation \n4) drip irrigation "
    },
    {
      "question_id": "47",
      "model_score": 27.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue. Both processes are in dependent entities."
    },
    {
      "question_id": "68",
      "model_score": 46.4,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "it is desirable when our classes are not linearly separable because in NN we introduce non linear function in terms of activation function. so that provides non- linearity to our system"
    },
    {
      "question_id": "49",
      "model_score": 89.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "- FALSE\n Different processes of the same program will have different PCB, because they might have different IP, stack pointers at any point of time during their execution."
    },
    {
      "question_id": "91",
      "model_score": 79.4,
      "human_score": 1.0,
      "question": "What theorem do we use to prove symmetry of stiffness matrix",
      "instructor_answer": "Maxwell Betti Reciprocal Theorem",
      "student_answer": "Maxwell's reciprocal theorem"
    },
    {
      "question_id": "53",
      "model_score": 61.2,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Roads in an high-resolution of urban area can be segmented as edges. Hence features that deal with identifying and classifying edges would be helpful. A robust edge detector can be used to segment can classify the roads"
    },
    {
      "question_id": "63",
      "model_score": 26.4,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Consider H in narrow range of 115 to 125 degrees."
    },
    {
      "question_id": "65",
      "model_score": 73.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The code looks nicer, the definition of the class is short and readability increases.\n\n2. It makes it possible to use another class or some function of another class inside this function even when the second class has to be defined after the declaration of this class."
    },
    {
      "question_id": "66",
      "model_score": 71.8,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "Market based and Quick and convinent"
    },
    {
      "question_id": "54",
      "model_score": 47.2,
      "human_score": 1.0,
      "question": "The appetitive      faculty corresonds to      ",
      "instructor_answer": "Plato's theory of the soul, the appetitive faculty is one of the 3 divisions of the soul. It is the part dealing with desires and passions",
      "student_answer": "The desire for three kinds of pursuits. intellectual pursuits as done by a seeker of knowledge , fame and power as of a politician or military official and the bodily desires such as sex."
    },
    {
      "question_id": "16",
      "model_score": 68.5,
      "human_score": 2.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "Noise in a time series data is the irregularity occured in data due to various reason like false measurement of data."
    },
    {
      "question_id": "68",
      "model_score": 57.0,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "multilayer perceptron NN with >1 hidden layer is required when the problem is too complex to solve. those problems when solved with single layer perceptron results in failure in overfitting"
    },
    {
      "question_id": "105",
      "model_score": 79.5,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. It should execute the faulting instruction because it needs to give the memory access to the instruction that asked for it. Since that process has accessed correct memory."
    },
    {
      "question_id": "64",
      "model_score": 82.8,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "The rose petals are red (shades of red) in colour. Red colour has zero hue,maximum saturation i.e. one and low intensity( about one-third). So to segment the rose petals, a hue H can be taken in range of 0       to 30       (for different shades of red), saturation S can be in range of 0.5 to 1 , intensity I can be  in range of 1/3( pure red)  to 0.5 (light shades of red)."
    },
    {
      "question_id": "43",
      "model_score": 83.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "FALSE, on completion of interrupt handler, the OS may call the scheduler and some other process in ready state may also begin, for eg in a blocking system call like read without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking."
    },
    {
      "question_id": "64",
      "model_score": 53.0,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H can vary from -45 to +45 degree, I can vary from 0.2 to 0.8 and S can from 0.1 to 1 to get red flower. "
    },
    {
      "question_id": "65",
      "model_score": 49.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "The code appears neatly in a structured manner in which all the functions which are accessible"
    },
    {
      "question_id": "105",
      "model_score": 80.9,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " FALSE\nIt executes the same instruction after allocating update from V to P\naddress mappings in page table."
    },
    {
      "question_id": "102",
      "model_score": 89.9,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "amplitude, frequency, fraction of abrasive in slurry"
    },
    {
      "question_id": "41",
      "model_score": 79.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTRUE. Scheduler may schedule some other process and save the state of previous process."
    },
    {
      "question_id": "67",
      "model_score": 62.4,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "1. Point Method - method of moments, method of maximum likelihood \n2. Interval Method"
    },
    {
      "question_id": "98",
      "model_score": 59.9,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "they generally have higher adhesion, ductility and excellent wear resistance"
    },
    {
      "question_id": "43",
      "model_score": 17.7,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFALSE: To prevent data loss, all context is stored on the kernel stack.\n"
    },
    {
      "question_id": "10",
      "model_score": 69.2,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "When a low priority task preempts a high priority task. Locks and semaphores usually lead to priority inversion"
    },
    {
      "question_id": "78",
      "model_score": 63.7,
      "human_score": 2.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "run off river, turnish power plant, cascade, pump storage"
    },
    {
      "question_id": "4",
      "model_score": 57.9,
      "human_score": 1.0,
      "question": "A rating curve is only valid when?",
      "instructor_answer": "A rating curve is only valid when there is no over flow or flood in a region.",
      "student_answer": "A rating curve is valld only when stage has been measured properly. It is used to measure discharge for same stream. The curve has been obtained from straight stretch of a stream."
    },
    {
      "question_id": "106",
      "model_score": 69.3,
      "human_score": 2.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " * After fork(), in child eip is set to forkret() function which is a kernel function and it tries to mimic the trap.\nSo we already have the trapframe set up for child when we copied data from it's parent.\nIn forkret(), it populates the return address above the"
    },
    {
      "question_id": "32",
      "model_score": 91.2,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "when slope of canal is less than slope of ground"
    },
    {
      "question_id": "72",
      "model_score": 58.7,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "We should exactly knwo the compression ratio of the image so that we can compress it to the maximum size which can be sent over the bandwidth without any signal loss."
    },
    {
      "question_id": "64",
      "model_score": 90.8,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "I range should be a broad range around 0.5, nearly full scale\nSaturation should be a very narrow window near 1\nHue should be a narrow sector around 0/360 degrees\nThis takes care of the red color of all intensities to be classified as petals"
    },
    {
      "question_id": "26",
      "model_score": 8.9,
      "human_score": 0.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "surface cleaning of impurities"
    },
    {
      "question_id": "45",
      "model_score": 80.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nT\nthe next running process is depends on schedular policy"
    },
    {
      "question_id": "42",
      "model_score": 78.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "False\nThis decision is left to the scheduler."
    },
    {
      "question_id": "19",
      "model_score": 67.3,
      "human_score": 2.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "it decides what action to perform. eg. rotate right OR go straight OR rotate 180 degree"
    },
    {
      "question_id": "64",
      "model_score": 63.5,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Red is around 0 degree Hue, so narrow range of 0 to 10 degrees and 350-360 degrees can be selected for red. Since there are both dark and bright petals, we can select Intensity to be broad range of 0-1. For saturation we can choose narrow range of 0-0.2 as the rose red is generaly pure red color"
    },
    {
      "question_id": "64",
      "model_score": 61.4,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H should be between from 0 deg to 15 deg (mean values is 0 deg for red). Saturation varies from 0.4 to 0.6. Saturation of pure colour is 1 and 0 for gray scale. As rose is mixture of red and white, its saturation will lie midway. Intensity varies from 0.333 to 0.5 as intensity of red colour alone is (1/3). Further green and blue pixels will provide some additional intensity."
    },
    {
      "question_id": "104",
      "model_score": 24.2,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " - Writing to file: Changing disk contents is a privileged operation, had it not been, a process could change some # contents on disk not owned by it. The OS handles this by trapping the process on a write request and then itself executing it. This also prevents malicious writes.\n- Memory Access: A user process may try to access memory not owned by it by trying out random accesses. The OS prevents this again by limiting direct access of memory, instead providing virtual addresses."
    },
    {
      "question_id": "79",
      "model_score": 53.2,
      "human_score": 0.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "equations which can't be derived but are implicitly correct"
    },
    {
      "question_id": "65",
      "model_score": 65.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The class only gives a high level idea of what the functions would be doing and so it serves as an abstraction for the object.\n2. We can package the definitions and share them as black box if we do not wish to reveal the implementation. This also separates the abstraction from the implementation."
    },
    {
      "question_id": "42",
      "model_score": 93.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFALSE\nWhich process runs next is completely in the hands of the scheduler and a another process has no say in it. \n"
    },
    {
      "question_id": "63",
      "model_score": 73.1,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "As the green leaves and stem is green and greish green respectively, we have to segment it by changing the hue angle to 120 degrees and taking a conical angle around this angle and then adjususting the saturation (0.2 given to stem and 0.6 given to leaves) and need not required to touch Value axis."
    },
    {
      "question_id": "64",
      "model_score": 73.5,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Rose petals are saturated red. H = narrow range around 0. S is clos"
    },
    {
      "question_id": "21",
      "model_score": 85.2,
      "human_score": 2.0,
      "question": "Differentiate between true random number and pseudorandom number generators.",
      "instructor_answer": "TRNG uses unpredictable physical mean for computation of random\nnumber, results are truely random and unpredictable , some random numbers cannot be reproduced. PRNG uses mathematical algorithm which are computer based. Its logical which uses mathematical formulas to generate sequence of random number. Some random number can be produced.",
      "student_answer": "TRNG use an unpredictable physical means to generate numbers ex- atmospheric noise. PRNG use a Mathematical algorithms to generate number."
    },
    {
      "question_id": "64",
      "model_score": 42.9,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "HSI can decouple the color information and intensity information seperately."
    },
    {
      "question_id": "49",
      "model_score": 87.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False;\n The same binary program's different executions are different processes altogether and hence whole PCB will be different."
    },
    {
      "question_id": "47",
      "model_score": 38.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "False, this isn't possible, as exec will end the parent & initiate a new process, and if the child hasn't terminated, it will have an incorrect pid."
    },
    {
      "question_id": "45",
      "model_score": 32.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nFalse, as the user process can jump to the target process by integrating the target process into the user process like using exec command."
    },
    {
      "question_id": "34",
      "model_score": 55.5,
      "human_score": 1.0,
      "question": "Key steps in anaerobic digestion process are                                                                                                                                                          .",
      "instructor_answer": "The four key stages of anaerobic digestion involve hydrolysis, acidogenesis, acetogenesis and methanogenesis.",
      "student_answer": "hydrolysis , fermentation , methogenis"
    },
    {
      "question_id": "44",
      "model_score": 28.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nTrue, because timer interrupt knows the PID of another process (from a pool of several READY processes), it does not have the capability to initiate a context switch and schedule the target process next on the CPU.\n"
    },
    {
      "question_id": "102",
      "model_score": 72.2,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "Abrasive size, effect of slurry, effect of frequency, effect of amplitude"
    },
    {
      "question_id": "105",
      "model_score": 86.8,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False. After handling the fault via allocation & copies ... \n... in the page table the os should execute\nthe same instruction which caused the fault\nagain"
    },
    {
      "question_id": "77",
      "model_score": 35.0,
      "human_score": 2.0,
      "question": "What are the two important scales in Hydrology? ---------------------",
      "instructor_answer": "Availability of driking water, time scale, length of the process, spatial scale.",
      "student_answer": "time or length of process"
    },
    {
      "question_id": "49",
      "model_score": 29.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False True.\n Consider During exec() system call, the PCB, Pid remains the same as the process which called exec(). Only code instructions change. So, an executable program can be used to instantiate and execute more than one process simultaneously."
    },
    {
      "question_id": "65",
      "model_score": 75.3,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) This way we can use other structures or classes defined after definition of our initial class which would give error if we don't separate the two.. Therefore it helps us include various other functionalities involving use of other classes/objects/structures.\n\n2)It makes the code representation very fluent and efficient with all the functions listed at a place and defined explicitly in some other place. The code can be understood and analysed easily. It also helps in debugging. Therefore it's a good practice "
    },
    {
      "question_id": "63",
      "model_score": 57.6,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "To segment green leaves,\nH -- Narrow range around 120 ( Green has hue of 120)\nS -- Close to 1 (Green is primary color and all primary colors are pure colors)\nI -- Broad range / Almost full range (This to handle both dark and bright regions of the leaves)\n\nTo segment stem,\nH -- Broad range/ entire range \nRange in rose petals and green leaves can be subtracted to avoid wrong segmentation\nS -- Close to 0 (Color of stem is brownish and grey like. So color in RGB \n"
    },
    {
      "question_id": "104",
      "model_score": 51.8,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. Disable interrupts\nThe instruction to disable interrupts is prevented to be used by user process so that a malicious process can't prevent usage of CPU by other processes.\n2. Disable virtualization\nThe instruction(s) to disable user memory virtualization (ie. disabling page table walk) is prevented in user space. Otherwise user may disable that and mess with memory of other processes."
    },
    {
      "question_id": "65",
      "model_score": 45.1,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Writing all declarations at a single place helps others to know how exactly is the class built.\n\n"
    },
    {
      "question_id": "48",
      "model_score": 93.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False An exec call in the parent process can be executed before it terminates, in which case the parent process for the child will change."
    },
    {
      "question_id": "49",
      "model_score": 13.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, if the breakable file has a fcntl(), then it's create a new FCB for child and copies everything from the parent."
    },
    {
      "question_id": "68",
      "model_score": 39.7,
      "human_score": 1.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "this will be useful when the size of our training set is large and hence we require to train a larger network to cater the larger information and complexity"
    },
    {
      "question_id": "36",
      "model_score": 81.3,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1) Geographic Location\n2) Size of city\n3) Quality of water\n4) Extent of industrialisation"
    },
    {
      "question_id": "102",
      "model_score": 75.5,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "frequency of the tool, number density of abrasive particles in the slurry, "
    },
    {
      "question_id": "58",
      "model_score": 20.4,
      "human_score": 1.0,
      "question": "The philosophies to define environmental management are                                                                                                            ",
      "instructor_answer": "Conservationism, Preservationism, Deep Ecology, Social Ecology",
      "student_answer": "1. emphasize on sustainable development\n2. multi disciplinary approach\n3. to meet increasing human needs\n4. importance of leadership to bring a change\n5. comprehensive root level systems approach"
    },
    {
      "question_id": "19",
      "model_score": 71.5,
      "human_score": 2.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "DecideAction outputs the next state and next action which should be taken by robot by taking various inputs from robot."
    },
    {
      "question_id": "67",
      "model_score": 99.6,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "method of moments, method of maximum likelihood"
    },
    {
      "question_id": "65",
      "model_score": 75.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) It improves the readability of the code.\n2) The creator of the code can hide the implementation from the user by this technique. He can write the declarations in a header file and the implementations in a .cpp file. Then compile the .cpp file to create an object module (.o file). Then, the user can use all of the functionality using object module and header file wih"
    },
    {
      "question_id": "89",
      "model_score": 50.9,
      "human_score": 0.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "time area method used in hydrology in calculating peak of the basin."
    },
    {
      "question_id": "65",
      "model_score": 47.7,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "We can create abstract classes.It will be easier to understand the code and will be presented better."
    },
    {
      "question_id": "104",
      "model_score": 17.5,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. If a process executes kill(i, SIGINT); essentially trying to terminate the init process, the OS will stop it from doing so.\n"
    },
    {
      "question_id": "106",
      "model_score": 83.3,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " For the child process, the first time it gets scheduled, the return path from kernel mode to user mode is through the forkret() function (in x86).\n\nThis function is called if process is a child process and is in the\nforkret again has to restore user content, but this is now the context which was copied from parent process when it called fork. Then it uses an instruction similar to return-from-trap to switch back to user mode."
    },
    {
      "question_id": "106",
      "model_score": 75.2,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "When fork() is called and a child process is created, the child's process eip will be set to a function \"forkret\" along with its change in value of eax register in trapframe to 0. In \"forkret\" function, the child process first releases lock of ptable held by it during alloc_proc() and then eventually exits from kernel mode using eip and other register values in its trapframe by popping them out using trapret function."
    },
    {
      "question_id": "64",
      "model_score": 43.2,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "in H space narrow band above 0 and below 360, broad range for I around 0.33,  Values of S above 0 excluding narrow band above 0"
    },
    {
      "question_id": "63",
      "model_score": 47.0,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "narrow range around 120 degree for H, broad range of S from 0.5-1, narrow range of I from around 0.8-1"
    },
    {
      "question_id": "98",
      "model_score": 73.8,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\n\n"
    },
    {
      "question_id": "46",
      "model_score": 6.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "TRUE"
    },
    {
      "question_id": "53",
      "model_score": 67.1,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "If roads are to be put in different category, then the intensity of light capture from that portion of  image of urban area can be used as One of the features. Also the length of the roads and the shape can be taken as differnt feature."
    },
    {
      "question_id": "92",
      "model_score": 64.6,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Corner detection algorithm can help in various image analysis like Classification: A image with corners detected passed in classifier like SVM gives better accuracy that a SVM without corners detected."
    },
    {
      "question_id": "42",
      "model_score": 83.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nF. **False**. The process can change state of another process but it can't ensure that the other process will run next on the CPU."
    },
    {
      "question_id": "56",
      "model_score": 98.2,
      "human_score": 2.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbiasedness, sufficiency, efficiency, consistency "
    },
    {
      "question_id": "11",
      "model_score": 68.1,
      "human_score": 2.0,
      "question": "Define Slutzsky-Yule effect",
      "instructor_answer": "This effect states that summation or average of random series may generate osscilations when no such movements exist in the original set of data.",
      "student_answer": "When moving avg are generally carried out for random series, then there may be some oscillations even when no such effects exist in the data."
    },
    {
      "question_id": "104",
      "model_score": 37.2,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " -> A limited - directed execution setup restricts processes running in user space to certain non-privileged actions. Only OS can perform these privileged actions.\n\na) Write data into any memory location, regardless of it is readable/writable etc. Since this action is performed normally user can't know about this but it is privileged to protect data of other processes or readable data etc.\n\n-> 2) Accessing any I/O device, its data, turning it on or off are privileged actions which OS can perform but not word directly. User can request I/O device but it may be rejected."
    },
    {
      "question_id": "39",
      "model_score": 12.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\n**False**"
    },
    {
      "question_id": "36",
      "model_score": 50.0,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1) Geographic Location\n2) Size of city\n3) "
    },
    {
      "question_id": "64",
      "model_score": 45.4,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petals we take product of satu"
    },
    {
      "question_id": "49",
      "model_score": 84.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n Every process has a separate PCB.\n PCB also stores trapframe on context switch. If some PCB is used with reference counter, the process state, trapframe, ... etc can't be tracked."
    },
    {
      "question_id": "60",
      "model_score": 83.4,
      "human_score": 2.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "Windrow, Static aerated, In-vessel"
    },
    {
      "question_id": "105",
      "model_score": 15.8,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True,\nlazy allocation means that memory will be allocated only when it is needed."
    },
    {
      "question_id": "49",
      "model_score": 34.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True. Take fork(), exec() commands, they can create new processes within the main process using the same PCB."
    },
    {
      "question_id": "46",
      "model_score": 81.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTRUE: Implicit / Explicit interrupts from the p currently running process, & hardware interrupts allow OS to take control & gives i opportunities to schedule other processes."
    },
    {
      "question_id": "69",
      "model_score": 59.8,
      "human_score": 0.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "the time period till when the reservoir can store extra water"
    },
    {
      "question_id": "42",
      "model_score": 70.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse, the user process may reasonably attempt to initiate a context switch with a good reason, but it does not have the privilege to schedule tasks on the CPU. \n"
    },
    {
      "question_id": "65",
      "model_score": 66.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. It makes code easy to read what are the functions defined and can read the its defination seperately. Altogether it is better way abstraction.\n2. If in some class many virtual and simple member functions then it become to keep track of them, especially when we inherit this class to some other subclass."
    },
    {
      "question_id": "106",
      "model_score": 46.0,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " fork()\nreturn path from the kernel mode to the user mode for the child process, there was no trap in child."
    },
    {
      "question_id": "68",
      "model_score": 71.3,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "multilayer perception with multiple hidden layers is sometimes needed for learning complex data and better generalisation, smaller layer won't be able to learn on complex relation at all"
    },
    {
      "question_id": "29",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "rainfall intensity and time"
    },
    {
      "question_id": "64",
      "model_score": 71.7,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue Angle for red is zero degrees. Hence, a narrow range of 0/360 degrees for H. For S,bwe need somewhat high value of saturation, since among R,G,B we have less color content of G and  B, whereas more color content of R. "
    },
    {
      "question_id": "105",
      "model_score": 26.1,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True - Lazy allocation means that the physical addresses aren't allocated until accessed.\nSo, when a valid VA is accessed, the OS raises a page fault and assigns a PA to the VA.\nIt then continues on with the instructions."
    },
    {
      "question_id": "45",
      "model_score": 71.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue: Context switching requires kernel-level privilege, which the user does not have.\n"
    },
    {
      "question_id": "52",
      "model_score": 58.7,
      "human_score": 0.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a dimensionless quantity"
    },
    {
      "question_id": "98",
      "model_score": 35.2,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "excellent wear resistance"
    },
    {
      "question_id": "65",
      "model_score": 70.0,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The abstraction becomes more clearer. At a single glance at the class declaration, one can get an idea of the different functions and the arguments taken by the functions.\n\n2. In case we are working with two classes where both classes need access to each other's member functions, this technique is helpful.\nOnly declaring the class A and it's functions before class B and then defining the member functions of class A after class B's declaration is a good technique. This allows functions of both classes to function properly and access/call each other's functions."
    },
    {
      "question_id": "2",
      "model_score": 82.9,
      "human_score": 1.0,
      "question": "\nWhat\nis the Full form of RCP?",
      "instructor_answer": "Representative Concentration Pathway",
      "student_answer": "Representatuve Concentration Pathways"
    },
    {
      "question_id": "16",
      "model_score": 59.0,
      "human_score": 1.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "A time series would be white noise if the variales are independent and identically distributed with a mean zero."
    },
    {
      "question_id": "79",
      "model_score": 74.5,
      "human_score": 2.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "emperical equations are backed by experiments and gives value for the provided input predicting the corresponding output"
    },
    {
      "question_id": "90",
      "model_score": 57.3,
      "human_score": 0.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "A non-linear tranformation alters the linear relationship between variables, thereby changing the correlation. It can be used to reduce or amplify it as per the correlation desired. we can either combine multiple features or differntiate similar features"
    },
    {
      "question_id": "49",
      "model_score": 44.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE: This is not how it works. Each process has its own PCB and it does not share it with anyone."
    },
    {
      "question_id": "33",
      "model_score": 87.9,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "through-fall, stem-flow"
    },
    {
      "question_id": "104",
      "model_score": 21.5,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " - A user process cannot allocate memory for another user process.\n- Change contents at any physical address. Since process only has its access over its own process address space, it cannot change contents of other processes. The second gal privileges due to which it can update the thread stack of all processes, but user processes should"
    },
    {
      "question_id": "105",
      "model_score": 73.1,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. Since runs an exception (that is, that means the instruction on which the exception occurred effect is not seen subsequently) will not be seen again."
    },
    {
      "question_id": "29",
      "model_score": 97.6,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "rainfall intensity, time"
    },
    {
      "question_id": "34",
      "model_score": 71.6,
      "human_score": 2.0,
      "question": "Key steps in anaerobic digestion process are                                                                                                                                                          .",
      "instructor_answer": "The four key stages of anaerobic digestion involve hydrolysis, acidogenesis, acetogenesis and methanogenesis.",
      "student_answer": "Hydrolysis, Acidogenisis, Acetogenisis, Methanogenisis"
    },
    {
      "question_id": "84",
      "model_score": 68.5,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "A perceptron classifier with linear decision boundary aren't do the job. Multilayer perception will be able to perform well as handles non -linear boundary."
    },
    {
      "question_id": "42",
      "model_score": 82.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse. Scheduler functions in kernel space, not user space.\n"
    },
    {
      "question_id": "31",
      "model_score": 43.1,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "Since we can use only 1 discriminant function the response of the function upon input of the feature vectors should be highly clustered for each class. There should be high intra - class variation and low intra - class variation."
    },
    {
      "question_id": "72",
      "model_score": 55.4,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "Lower compression will cause loss of value which downlink during transmission due to bandwidth issue. Higher compression will lead to  low quality data and will not be able to retrive the data properly."
    },
    {
      "question_id": "39",
      "model_score": 35.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nTrue \n          Because fd[1] and fd[0] are two ends of the pipe. Pipe is way for inter process communication. If writes on one end, we can read that through other end.\n"
    },
    {
      "question_id": "14",
      "model_score": 47.8,
      "human_score": 1.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "The kurtosis coefficient(k)of excess is 3.\nif k= 3 the distribution is Normally distributed.\n"
    },
    {
      "question_id": "87",
      "model_score": 34.5,
      "human_score": 0.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "principle mechanism of particulate removal is scrapping of top layer of the filter\n"
    },
    {
      "question_id": "14",
      "model_score": 48.3,
      "human_score": 0.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "Kurtosis is a measure of tailendness"
    },
    {
      "question_id": "64",
      "model_score": 51.4,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H=0, S is approx=0.8, I is approx=0.5"
    },
    {
      "question_id": "53",
      "model_score": 42.1,
      "human_score": 0.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "When the high resolution image of urban area is captured. The features required to classify the roads into different catagories includes the  radiometric resolution at various bands including microwave, optical, thermal etc"
    },
    {
      "question_id": "74",
      "model_score": 66.5,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "When the number of hidden layers are very large, 2 issues may arise, one can be that if the input training data size is very large, then it takes a huge amount of time to train the neural network. Another can be that it may lead to overfiting in case the training data size is small due to very fine tuning of the hyperparameters."
    },
    {
      "question_id": "16",
      "model_score": 64.8,
      "human_score": 1.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "The noise in time series may be defined as if the variales are independent and identically distributed with a mean zero. If varables have same varience o2 and each value has Zero co-relation with all other value."
    },
    {
      "question_id": "84",
      "model_score": 60.2,
      "human_score": 1.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "Difference in performance of perceptron classifier. and multi- layer perceptron when handling XOR- \nmultilayer perceptron will have better performance than the normal perceptron classifier"
    },
    {
      "question_id": "19",
      "model_score": 58.3,
      "human_score": 1.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "Decide action outputs the next state and next action which should be taken by takingvarious inputs from robot."
    },
    {
      "question_id": "63",
      "model_score": 13.8,
      "human_score": 0.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "we can use mask. Also, for green le"
    },
    {
      "question_id": "87",
      "model_score": 67.9,
      "human_score": 1.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "A layer of living microorganisms is formed on filter media , through which water is passed under gravity. This layer traps all impurities. "
    },
    {
      "question_id": "104",
      "model_score": 19.6,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. Interrupt timer: This is an important operation that is used so that a user cannot hog all of the CPU (especially in case of viruses). OS can take over whenever it wants. Thus naturally, a user cannot tamper with it (like how a citizen cannot change its government's rules).\n\n2. Locks: This is also an important function used in system calls especially only by the OS. If a user starts accessing the lock, then if by chance a user program crashes (eg div/zero) while it was locked, it will not allow other processes to do anything either. Hence only OS can use locks. And user only uses the system calls in an orderly manner."
    },
    {
      "question_id": "65",
      "model_score": 67.3,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The definition and declaration can be written in separate files. Thus, two different people can develop these independently.\n\n2. Can use forward declaration to solve the problem of cyclic usage in classes or functions.\n\n3. Provides an abstraction of the class. That is, one person can just provide his needs from the class (the declaration); while the other person can develop those (the definition) separately and independently. Thus person 1 just knows the functionality the class provides without going into the details of the implementation.\n\n4. Keeps the code concise, clean and organized. We can view all declarations of member functions of a class together at once and then check their definitions separately.\n\n"
    },
    {
      "question_id": "44",
      "model_score": 90.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse, OS can context switch upon another process's syscall or other interrupt to schedule another process.\n"
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "Constant Capital Structure"
    },
    {
      "question_id": "100",
      "model_score": 62.2,
      "human_score": 2.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "Low MRR, Harmful to operator (Hazardous), Expensive equipment"
    },
    {
      "question_id": "63",
      "model_score": 50.6,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "A narrow range of I centered around 0.33 as G is 1 in green region and others are approximately 0\nAlso, a broad range of values of H around 120 degrees"
    },
    {
      "question_id": "103",
      "model_score": 46.4,
      "human_score": 1.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "lower metal removal rate"
    },
    {
      "question_id": "49",
      "model_score": 81.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, when a process is initiated, it has got its own address space in the kernel memory."
    },
    {
      "question_id": "104",
      "model_score": 46.6,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) calling any system call from POSIX-API which engaged in privileged operations like forking a new process, allocating heap memory a. and trying to alter the variable which was known like changing 16 PTE, changing parent/child PTE.\n2) demanding a significantly large memory which size ~ould exceed the physical memory itself, for heap and is bound to result into a fault.\n3) trying to alter the kernel stack pointer of a different thread of the same process.\n4) int q = 0;\n*q = 2; \nwill try to map virtual address 0 to and metadata already sitting on that portion is home 0.5 will sent to the"
    },
    {
      "question_id": "7",
      "model_score": 66.3,
      "human_score": 2.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "periodically removing the top 1-2cm of the filter media including the biological mat \"Schmutzdecke\". Wh"
    },
    {
      "question_id": "63",
      "model_score": 73.4,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "\nTo get green leafs H can vary from 100 to 160 degree, S can vary from 0.1 to 1 and I can vary from 0.2 to 0.8 this will give green portion from different saturation and intensity."
    },
    {
      "question_id": "47",
      "model_score": 84.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue, this is possible but it will make child process orphan."
    },
    {
      "question_id": "43",
      "model_score": 29.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse. It may no continue it's own process since the possibility of termination of this own process or infinite loop in the own process."
    },
    {
      "question_id": "39",
      "model_score": 46.1,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFALSE, read on fd[1] and write on fd[0] is possible.\n"
    },
    {
      "question_id": "25",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Full form of ELISA is ____________________.",
      "instructor_answer": "Enzyme linked immunosorbent assay",
      "student_answer": "Enzyme linked immunosorbent Assay"
    },
    {
      "question_id": "63",
      "model_score": 67.2,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "To segment green leaves H should have narrow range around 120       I had range around 0.25 to 0.5(as stems have some bl"
    },
    {
      "question_id": "65",
      "model_score": 59.4,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Different derieved classes can have different funtional implementation.\n2) Cleaner code i.e, good maintenance of code."
    },
    {
      "question_id": "43",
      "model_score": 61.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False, the process might not be rescheduled immediately but not too far in the future too to prevent the data loss. It maintains a table for storing these interrupts and executes them one by one."
    },
    {
      "question_id": "65",
      "model_score": 71.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)It increases the readability of the program.We are able to define the function outside the class which enhances the code quality as one can first see what all functionality does class provide/ what is it's interface.\n2)It tells the compiler about the signature(arguments) of the function first. So it will show some error if we use the wrong signature while defining it which happens sometime due to programmers mistake."
    },
    {
      "question_id": "55",
      "model_score": 92.8,
      "human_score": 2.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "Cetyl alcohol, stearyl alcohol"
    },
    {
      "question_id": "65",
      "model_score": 73.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) It seperates the actual implementation of the class, making it understandable better like which member functions are present and a brief description about them. \n2) It makes "
    },
    {
      "question_id": "65",
      "model_score": 58.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Easy to understand program as all functionality is listed at one place (the declarations with comments).\n2. No fixed order of allowed function calls as all functions are declared above their definitions or in a separate header file. Which means, I can use a function f1() in the definition of another function f2() and define f1() below f2();"
    },
    {
      "question_id": "66",
      "model_score": 74.0,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "market based and quick and convinient"
    },
    {
      "question_id": "41",
      "model_score": 25.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTRUE\nthat process might be kept under waiting rather than getting scheduled so there's a possibility\n"
    },
    {
      "question_id": "106",
      "model_score": 79.0,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "When a child process is created in the fork() system call, fork() finds an unused PCB for allocating it to new child process and copies most of the things of parent's PCB to it, but not all the things are copied exactly the same. When setting up the trapframe of the child process, it sets the return address (stored at t7 -> eax) of the child process to forkret(). Therefore, when after setting the state of child to RUNNABLE, when child goes to user mode from kernel mode, then it needs to return to return address set at t7 -> eax = forkret() and return to fork() function, from where a it exists in user mode and then it is scheduled via sched()."
    },
    {
      "question_id": "45",
      "model_score": 35.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\n **False**, if user process know the PID of another target process, then it does have the capability to initiate a context switch and schedule the target process next on the CPU."
    },
    {
      "question_id": "63",
      "model_score": 34.9,
      "human_score": 0.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Leaves and stem are green in colour. Intensity = (r+g+b)/3. Since green we take intensity as (-"
    },
    {
      "question_id": "49",
      "model_score": 82.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "Each process has its own separate PCB, as any of them can independently go to sleep or be in any state which is stored in the process PCB."
    },
    {
      "question_id": "49",
      "model_score": 88.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. PCB also stores the context of a process when context is switched, since the two processes might have been in different parts of code, their context may differ and hence different PCB should be used."
    },
    {
      "question_id": "41",
      "model_score": 3.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "**True**"
    },
    {
      "question_id": "51",
      "model_score": 75.5,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "ionisation, Adsorbtion "
    },
    {
      "question_id": "72",
      "model_score": 46.1,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "The compression constant should not be too high as this will deteroit the quality of the image and high resolution classification can't be done and it should not be either too low as we have to tranmit this high quality data."
    },
    {
      "question_id": "60",
      "model_score": 78.8,
      "human_score": 2.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "windrow composting, aerated windrow composting and vessel composting."
    },
    {
      "question_id": "65",
      "model_score": 59.2,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)If we want to use a function say f in another function g and also g in f then it's advantageous to declare f before the definition of g and define f after the definition of g.\n2) Separating declaration and definition is helpful when different people contribute to the different functions' definition. In this way they can work on different machines and later just include the declarations in their file and the compiled definitions by different persons."
    },
    {
      "question_id": "40",
      "model_score": 26.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nFalse. dup2 can be used to switch the 2 file descriptor. Like this\ndup2 (fd[0], fd[1]);\ndup2 (fd[1], fd[0]);"
    },
    {
      "question_id": "15",
      "model_score": 26.5,
      "human_score": 1.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "It is a condition in which the relative humidity of the atmosphere is very low and the soil moisture has reached the permanent wilting point."
    },
    {
      "question_id": "48",
      "model_score": 66.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False, the os might run the parent process first than the child, in this case the exec calls run and next it goes into child. We can make this definitely happen by using a waitpid in child to start the parent first."
    },
    {
      "question_id": "80",
      "model_score": 37.9,
      "human_score": 1.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "Properties in different directions are different and normal strain do not depend on shear stress."
    },
    {
      "question_id": "31",
      "model_score": 67.8,
      "human_score": 1.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "When feature vector input to a single discriminant function it should produce an output =1 for the corresponding class to which feature vector belongs whereas output for others should be equal to zero. If this type of response is produced then sigle discriminant function con handle multiclass classification problem."
    },
    {
      "question_id": "65",
      "model_score": 54.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Easy to see the names of member function in the class at the same place i.e. improves readability of the code.\nInheritance of functions from parent class;"
    },
    {
      "question_id": "51",
      "model_score": 11.1,
      "human_score": 0.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "coagulation, flocculation"
    },
    {
      "question_id": "26",
      "model_score": 25.7,
      "human_score": 0.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "Broaching process is used to reduce the block thickness or width or length. The block is fixed in one place and the broaching process is carried out."
    },
    {
      "question_id": "43",
      "model_score": 72.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse. The process might another process might be running during interrupt handling. The first process will change its state to ready from blocked but not always running after without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking."
    },
    {
      "question_id": "79",
      "model_score": 69.7,
      "human_score": 2.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "equations in which we use the given experimental data to find free parameters"
    },
    {
      "question_id": "98",
      "model_score": 35.7,
      "human_score": 1.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "it has good adhesion,toughness, and resistance to chipping and performs "
    },
    {
      "question_id": "63",
      "model_score": 83.2,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "A small range around 120 degrees for H component to detect the green colour\nSaturation indicates the amount of greyness in the colour. This has high variance in the stem/leaf and hence we need a broad range centred around 0.5\nsimilarly the intensity also has a high variance. (The stem hence we need a broad range for I centred around 0.5"
    },
    {
      "question_id": "63",
      "model_score": 37.3,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H=120 degrees, S is approx=0.8, I is approx=0.2"
    },
    {
      "question_id": "59",
      "model_score": 34.0,
      "human_score": 1.0,
      "question": "The short-term atmospheric conditions of any place that may vary from time to time is ---------------------------------",
      "instructor_answer": "called temporal variations. example- Weather",
      "student_answer": "Spatial and temporal variations"
    },
    {
      "question_id": "5",
      "model_score": 93.3,
      "human_score": 2.0,
      "question": "A reactor which is used when intense agitation is required is _____________.",
      "instructor_answer": "Completely mixed flow reactor (CMFR)",
      "student_answer": "completely mixed flow reactor"
    },
    {
      "question_id": "62",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "To reduce spatial and temporal water availability problems ----------- and ----------- are constructed",
      "instructor_answer": "dams & reservoir/canals",
      "student_answer": "dams & reservoir/canals"
    },
    {
      "question_id": "64",
      "model_score": 53.1,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H(350-360,0-30)\nS(0.6-0.9)\nI(0.7-0 8)"
    },
    {
      "question_id": "65",
      "model_score": 61.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.by seperating, we can modify the definition  as required for different purpose .(for example : let there be an abstract class with a pure function, say f, then we can use different definitions of f in the different child classes) \n2.same framework can be used for various purposes.(for example: if we have a parent class with certain members , which are to used in different child classes with a slight modification or addition only then we can use same set of variables as declared in the parent class)"
    },
    {
      "question_id": "49",
      "model_score": 88.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE. Each process, even if all of them are instances of the same program, has a separate PCB, with no reference counters being used."
    },
    {
      "question_id": "67",
      "model_score": 99.6,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "Method of moments, method of maximum likelihood"
    },
    {
      "question_id": "70",
      "model_score": 69.8,
      "human_score": 2.0,
      "question": "What approach should be followed to find a reasonable probability distribution for a given time series?",
      "instructor_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanalysis the results\n",
      "student_answer": "1) Selection of a distribution\n2) Estimation of parameters\n3) Testing the goodness of fit of the observed data"
    },
    {
      "question_id": "51",
      "model_score": 53.4,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "presence of ionogenic species which makes the surface charged according to pH of the medium\n"
    },
    {
      "question_id": "81",
      "model_score": 75.2,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "low eigen values implies lower importance to those PCA features. High correlation will lead to a lot of very low eigen values."
    },
    {
      "question_id": "63",
      "model_score": 67.1,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "An appropriate range around 120       H needs to be selected such that all green areas (leaves and stem) are segmented clearly. The suitable range has to be found empirically. \nThis should work as all stems and leaves are green in color. Furthermore, intensity can't be used as it varies from dark to light for both green and red. Saturation should also not be used as both green and red will probably have high saturation as both color seems pure. So, a saturation threshold might not be helpful in this case. However, hue is different for leaves, stem than other parts of image as no other green is visible in image.\n\nHere it was assumed that stems are also green colored. If they are brown colored then an additional \"narrow\" threshold has to be applied to select brown color and then combine the resultant images from brown and green thresholding."
    },
    {
      "question_id": "31",
      "model_score": 49.1,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "Multiclass classification with a single discriminant function can be achieved it the output of the function the probability of assigning the input feature vector to various possible classes"
    },
    {
      "question_id": "36",
      "model_score": 59.8,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1. quality of water which is being supplied.\n2. population per unit area.\n3. relative position of water consumption area          and the water source.\n4. issue in pipe(could be breakage of pipe, choke up, etc.)."
    },
    {
      "question_id": "14",
      "model_score": 58.8,
      "human_score": 1.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "Kurtosis coefficient is defined based on  4th moment about its mean. If k = 3 then it's is Normal distribution."
    },
    {
      "question_id": "103",
      "model_score": 46.9,
      "human_score": 1.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "high initial or setup costs and requirement of"
    },
    {
      "question_id": "14",
      "model_score": 8.9,
      "human_score": 0.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "It is the third degree of moment"
    },
    {
      "question_id": "65",
      "model_score": 64.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)readability of code\n2) Separation of interface and implementation\n"
    },
    {
      "question_id": "64",
      "model_score": 63.6,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H: narrow range centered at 0/360degree , possibly (330,20) for red color\nS: range betweem 0.5 and 1\nI: broad range centered at 0.3, possibly (0.1, 0.6) to include shadow region"
    },
    {
      "question_id": "74",
      "model_score": 57.0,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "When number of hidden layer is very large the layer can increase the train time taken to train the network. this will make impossible to train the network adequately."
    },
    {
      "question_id": "67",
      "model_score": 98.4,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "Method of moments and Maximum Likelihood"
    },
    {
      "question_id": "40",
      "model_score": 92.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue. fd[0] is the read end & fd[1] is the write end, so the pipe is one-way only.\n"
    },
    {
      "question_id": "6",
      "model_score": 43.2,
      "human_score": 1.0,
      "question": "Chi-square goodness of fit test evaluates the error between (                                                                                   ) and (                                                                                   )                    (                                                                     )",
      "instructor_answer": "Observed and assumed/Estimated PDF",
      "student_answer": "assumed and estimated value of PDF"
    },
    {
      "question_id": "106",
      "model_score": 34.7,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " -> Specific test\n   For child to return to user mode from kernel \n   mode specific instructions are executed. As the \n   mode specific instructions"
    },
    {
      "question_id": "48",
      "model_score": 91.6,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False, Parent & child execute simultaneously & exec does nothing just change the instructions to be executed & reinitialize stack etc, so there is no issue of using exec. "
    },
    {
      "question_id": "75",
      "model_score": 27.2,
      "human_score": 1.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "The sum of muskigham parameter is 1\nprismatic storage is constant\nwedge storage is varriying"
    },
    {
      "question_id": "24",
      "model_score": 44.5,
      "human_score": 1.0,
      "question": "For cooling, the samples from oven or furnace are moved to desiccator primarily to                                                       ",
      "instructor_answer": "bring down the temperature without any type of condensation process or moisture addition from surrounding",
      "student_answer": "reduce the high temperature which then can be used to calculate the weight."
    },
    {
      "question_id": "40",
      "model_score": 92.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "**True**, pipe is a one way. It reads-only and write only."
    },
    {
      "question_id": "106",
      "model_score": 83.5,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " Although there was no trap for the newly forked child process, we had indeed set the return address indirectly during fork() by copying the context like EIP value from parent's trapframe to child's trapframe and made the child runnable (but return value is 0 for child)\nWhen the scheduler decides to schedule this child, we return from trap by restoring the user CPL context from the trap frame, & move to the instruction stored in EIP (which was essentially the instruction after fork() in the program)."
    },
    {
      "question_id": "41",
      "model_score": 30.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue. The process might be taking too much time and scheduler may assign another smaller process to run.\n"
    },
    {
      "question_id": "50",
      "model_score": 72.6,
      "human_score": 2.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "1) Reservoir routing is helpful in spillway design and next reservoir design.\n2) Channel routing for flood management and flood water guiding."
    },
    {
      "question_id": "104",
      "model_score": 41.6,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) user process may attempt to disable interrupts\naccess memory addresses that do not belong\nto the process address space. In such case,\nOS will give a SEGVFAULT.\n2) user process attempts to write to a readonly\nfile\n3) user process attempts to disable interrupts"
    },
    {
      "question_id": "39",
      "model_score": 88.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse, what pipe writes using fd[0] can be read using fd[1] is not true. That is, it cannot read on fd[0] & write on fd[0] as fd[0] is its reading end & fd[1] is its writing end.\n"
    },
    {
      "question_id": "65",
      "model_score": 56.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Easy to see the names of member function in the class at the same place i.e. improves readability of the code and increase the options of designing a program.\nInheritance of functions from parentclass t;"
    },
    {
      "question_id": "63",
      "model_score": 48.4,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "narrow range around 120       for H and narrow range around 0.3 for I"
    },
    {
      "question_id": "45",
      "model_score": 35.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue, It may or may not run next in the schedule. (Context switch\"may\" take place but the present and the next to run very next to the present one are not target)\n"
    },
    {
      "question_id": "39",
      "model_score": 69.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFALSE\nIn general/ by default, read on fd[0] and write on fd[1]\n"
    },
    {
      "question_id": "105",
      "model_score": 86.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False - the OS handles the page fault and returns to execute the same instruction that raised the page fault, as the error is now handled and can be executed smoothly again."
    },
    {
      "question_id": "64",
      "model_score": 75.1,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Rose petals are saturated red. H = narrow range around 0. S is closer towards 1."
    },
    {
      "question_id": "99",
      "model_score": 21.2,
      "human_score": 0.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "The PVD method uses complex machines which in turn needs skilled operators"
    },
    {
      "question_id": "64",
      "model_score": 52.4,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H ranging from either 0 to small value like 30 or from little less than 300 to 360"
    },
    {
      "question_id": "39",
      "model_score": 22.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nTrue, as in pipe system two process can run together\n"
    },
    {
      "question_id": "14",
      "model_score": 45.6,
      "human_score": 0.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "Excess kurtosis means the distribution big event outcome has fat tails on the bell shaped curve that is outcome has more outlier results.\ndif"
    },
    {
      "question_id": "65",
      "model_score": 56.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Makes the code more readable since, that means all definitions are clustered in a class.\n2) Improves compile time. The compiler needs the declaration beforehand to create the lookup table for an executable. Thus by declaring a function/variable before defining we may improve the compilation time of the program."
    },
    {
      "question_id": "8",
      "model_score": 58.9,
      "human_score": 0.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N4 and N5 likely not a leader"
    },
    {
      "question_id": "48",
      "model_score": 93.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFALSE, once forked, the two processes are independent (except for parent - child relation). So parent can call exec anytime."
    },
    {
      "question_id": "24",
      "model_score": 48.0,
      "human_score": 1.0,
      "question": "For cooling, the samples from oven or furnace are moved to desiccator primarily to                                                       ",
      "instructor_answer": "bring down the temperature without any type of condensation process or moisture addition from surrounding",
      "student_answer": "avoid contact with atmospheric moisture (especially for hygroscopic substances)"
    },
    {
      "question_id": "63",
      "model_score": 79.6,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "for green leaves and stem we have Hue having a narrow range around 120(105 to 135)\nfor saturation\nthis should be broad range around 0.8\n(0.6-1)\nfor intensity a broad range around 0.33 works as pure color have low intensity 1/3"
    },
    {
      "question_id": "35",
      "model_score": 74.4,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Flooding method, Furrow method, Sprinkler method"
    },
    {
      "question_id": "56",
      "model_score": 95.9,
      "human_score": 2.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbiasedness, consistent, efficient, sufficient"
    },
    {
      "question_id": "10",
      "model_score": 24.1,
      "human_score": 1.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "Priority inversion is the solution to a live lock kind of situation in which higher priority task is assigned some lower priority task's priority for some amount of time and after it they both are assigned their original priorities."
    },
    {
      "question_id": "41",
      "model_score": 60.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\n **TRUE**\n As after an interrupt may not reschedule the process. A case where the other process is running till its completion. In this case, this process will not be rescheduled and this will not allow multitasking.\n"
    },
    {
      "question_id": "46",
      "model_score": 23.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "False OS does not have any other means of interrupting a running process to schedule a READY process without the timer interrupt."
    },
    {
      "question_id": "38",
      "model_score": 76.1,
      "human_score": 2.0,
      "question": "Open dumping of waste is a major practice in India. Two major environmental problems associated with are                                                                                                                                                                  ",
      "instructor_answer": "1.Leachate generation and mismanagement\n2.Release of GHGs due to anaerobic reactions\n3.Odour\n4.Insects and rodents infestation leading to public health issues",
      "student_answer": "leachates hence causing ground water pollution, displeasing odour, growth of vectors and pathogens, soil pollution."
    },
    {
      "question_id": "52",
      "model_score": 86.7,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a change in length / original length or\n Change in area / original area "
    },
    {
      "question_id": "72",
      "model_score": 87.0,
      "human_score": 2.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "maximum image quality should he preserved. full use of channel capacity should be ensured. Date rate should not exceed maximum channel capacity."
    },
    {
      "question_id": "31",
      "model_score": 66.0,
      "human_score": 2.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "If a single discriminant funcction is being used for multiclass classification than we have 2 approaches. One vs all and one vs one."
    },
    {
      "question_id": "105",
      "model_score": 87.9,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, The OS handles the page fault via allocation and updates to address mapping in the page table, however, after the fault is handled, the CPU executes the same current instruction (which led to the fault) instead of the next instruction. In x86, this is done by the swicharm routine."
    },
    {
      "question_id": "92",
      "model_score": 91.0,
      "human_score": 2.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Harris Corner detection from the corner we can Improve segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication."
    },
    {
      "question_id": "43",
      "model_score": 89.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse. The scheduler may schedule another process and the handler may be completed after.\n"
    },
    {
      "question_id": "80",
      "model_score": 66.8,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "material properties are unique and independent in 3 Mutually perpendicular directions"
    },
    {
      "question_id": "104",
      "model_score": 51.9,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) Page faulting: Users will try to access memory out of its range. But OS will know it and stop it from doing so via trap handler. OS will check for correct memory usage by users.\n2) System call: A user process cannot execute system calls on its own. It has to be done in kernel mode.\n3) Changing registers and some other important disallowed changes. Only OS can change some register values like PDTR, etc."
    },
    {
      "question_id": "40",
      "model_score": 2.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTRUE"
    },
    {
      "question_id": "100",
      "model_score": 48.6,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "low MRR, abrassive partical getting embedded into workpiece"
    },
    {
      "question_id": "46",
      "model_score": 22.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nFalse\nOS might not get such opportunities if the process doesn't do anything"
    },
    {
      "question_id": "6",
      "model_score": 96.9,
      "human_score": 2.0,
      "question": "Chi-square goodness of fit test evaluates the error between (                                                                                   ) and (                                                                                   )                    (                                                                     )",
      "instructor_answer": "Observed and assumed/Estimated PDF",
      "student_answer": "observed and estimated PDF"
    },
    {
      "question_id": "44",
      "model_score": 28.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nNo, it can do preemptive scheduling without even without time interrupt."
    },
    {
      "question_id": "78",
      "model_score": 79.0,
      "human_score": 2.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "River Runoff Power plant, storage plant, cascaded plant and pumped up hydropower plants "
    },
    {
      "question_id": "81",
      "model_score": 79.1,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "The low eigenvalues tell that there is very little variance in the data and the data can be largely collinear."
    },
    {
      "question_id": "31",
      "model_score": 10.0,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "Response of the function would be obtaining inadequate classification of data and while coding it also does not give good input and output conditions."
    },
    {
      "question_id": "18",
      "model_score": 53.2,
      "human_score": 2.0,
      "question": "Define trap efficiency of a reservoir and write down the factors affecting the trap efficiency",
      "instructor_answer": "It is defined an the ratio of deposited sediment to the total sediment inflow for given period within the reservoir economic life time.Factors affecting the trap efficiency: Diameter of silt particles, size and weight and type of debrais. Wind flow direction. Shape of the dam.Topography of the dam structure. Material of the dam.",
      "student_answer": "Trap efficiency of a reservoir is a function of ratio of reservoir capacity and total in flows. Factors affecting: infow, slope of basin, no use of level of basin and dam characteristics."
    },
    {
      "question_id": "48",
      "model_score": 91.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFALSE: The `exec` system call is allowed in the parent process even before child process terminates. (Including even before child process starts its instructions independently of the child process.\nAlso `exec` doesn't replace the process, but loads the program in the same process."
    },
    {
      "question_id": "19",
      "model_score": 46.2,
      "human_score": 0.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "The bot reaches to DecideAction state after reaching to a node o"
    },
    {
      "question_id": "61",
      "model_score": 55.2,
      "human_score": 1.0,
      "question": "Three key principles of ISO series are                                             .,                                                                                                                              ...and                                                                                  .      ",
      "instructor_answer": "Consensus , Industrial wide applicability and Voluntary Nature",
      "student_answer": "\nindustry wide applicablity\nvolunteerism"
    },
    {
      "question_id": "64",
      "model_score": 83.4,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "First mark all pixels with red shades by checking R/G & R/B ratio or by a narrow range of hue around red, above a particular intensity and saturation threshold , do 80% of pixels should be red for petals."
    },
    {
      "question_id": "106",
      "model_score": 75.5,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "-> Since there was no child process before the fork call, the child process returns from the kernel via process allocation handler which allocates process and copies PCB of parent to that of child with necessary changes and creates a trap with instruction pointer pointing to same position of parent. Then scheduler is called which decides to schedule child process calls the trap handler of it."
    },
    {
      "question_id": "41",
      "model_score": 51.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTRUE. One example of this is the sched_yield() system call on linux systems, in which the scheduler may or may not schedule another process on the processor. Depending on the system call and other processes' memory usage, it may not share the CPU for multitasking.\n"
    },
    {
      "question_id": "70",
      "model_score": 56.9,
      "human_score": 2.0,
      "question": "What approach should be followed to find a reasonable probability distribution for a given time series?",
      "instructor_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanalysis the results\n",
      "student_answer": "First, we plot time series and histogram.\nAfter getting an idea about distribution using histogram, we can choose suitable PDF, based on variables like skewness (Pearson type-3 for skewed, log normal/ normal if histogram is similar to lognormal/normal)"
    },
    {
      "question_id": "22",
      "model_score": 28.3,
      "human_score": 0.0,
      "question": "During coagulation process alkalinity reduces due to the ___________________________",
      "instructor_answer": "As coagulation is done,the OH- tend to form more bonds with the molecules in the sample, and H+ concentration increases which lowers the pH level.",
      "student_answer": "decrease in H+ concentration."
    },
    {
      "question_id": "71",
      "model_score": 83.8,
      "human_score": 2.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "clay, organic & ordinary ocean salt"
    },
    {
      "question_id": "68",
      "model_score": 43.3,
      "human_score": 0.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "when we deal with artifical neural network we use >1 layer"
    },
    {
      "question_id": "29",
      "model_score": 97.3,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "intensity of rainfall and time"
    },
    {
      "question_id": "14",
      "model_score": 65.7,
      "human_score": 2.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "Excess kurtosis means the distribution big event outcome has fat tails on the bell shaped curve that is outcome has more outlier results.\ndifference between it's own kurtosis and kurtosis coefficient of normal distribution"
    },
    {
      "question_id": "65",
      "model_score": 60.1,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "We are able to create abstract classes without any definition of member function in class which is a great use of this.\n\nThe code appears neatly in a structured manner in which we get to know all the member  functions which are accessible to whom and what member  functions are actually present in that class.\nAnother use is that if we have a private variable v(say) and we have to implement a member function using same parameter then we can do by defining outside the class which don't give any confusion to code reader otherwise it becomes confusing if both are used at same place.\nAlso at the starting of a code we will have an base idea of the member functions but not their exact implementations so we can define the functions first."
    },
    {
      "question_id": "104",
      "model_score": 41.6,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) Disabling the timer interrupt / increasing the time interval. This will allow it to be executed for longer duration. There exists an x86 instruction to do so.\n2) Setting the IDTR register to handle interrupts its own way. It can try to set its own IDT."
    },
    {
      "question_id": "44",
      "model_score": 84.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFALSE.\nWe have other types of interrupts and methods like system calls for scheduling.\n"
    },
    {
      "question_id": "49",
      "model_score": 89.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE\n Every process needs to have its own PCB as every process needs to have different PID and sometimes these information Processes can have completely different variables"
    },
    {
      "question_id": "67",
      "model_score": 65.7,
      "human_score": 1.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "maximum likelihood estimation, moment distribution"
    },
    {
      "question_id": "68",
      "model_score": 52.0,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "circumstances are when classifying non-linear functions like XOR, multilayered perceptron neural network is desirable. MLP model can learn in real time(online learning)."
    },
    {
      "question_id": "53",
      "model_score": 53.1,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "As Road has smooth surface so data captured in high wavelength will be more useful as there will be more reflection from road surface. Texture of road will be smooth so compared to other area of urban image so  texture classification we can also generate."
    },
    {
      "question_id": "90",
      "model_score": 68.5,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "When data is not linearly separable and we only have a linear discriminator to separate the data, we transform the feature nonlineraly so to project the data in higher dimenional space in which they are separable."
    },
    {
      "question_id": "46",
      "model_score": 88.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTRUE. This can be done cooperatively - when a process does a system call - the OS can schedule some other process. However, there may be cases when a process is not preempted as the process can get stuck and fall in an infinite loop and fail.\n"
    },
    {
      "question_id": "65",
      "model_score": 63.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Separating class member function definitions from their declarations helps prevent class declaration from getting cluttered and makes it easier for the pro\n2. Only a brief look from the reader would be required to understand the upper level functioning of the class, that is, the functions available for their use and "
    },
    {
      "question_id": "76",
      "model_score": 72.4,
      "human_score": 1.0,
      "question": "What are the two important aspects of reservoir routing under a flood control criterion?",
      "instructor_answer": "peak discharge reduced and\n peak flow gets shifted",
      "student_answer": "lag of flood between two section and attenuation of its peak"
    },
    {
      "question_id": "56",
      "model_score": 87.9,
      "human_score": 2.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbiased consistency efficiency sufficiency"
    },
    {
      "question_id": "22",
      "model_score": 76.7,
      "human_score": 1.0,
      "question": "During coagulation process alkalinity reduces due to the ___________________________",
      "instructor_answer": "As coagulation is done,the OH- tend to form more bonds with the molecules in the sample, and H+ concentration increases which lowers the pH level.",
      "student_answer": "Decrease in concentration of hydroxide ions."
    },
    {
      "question_id": "31",
      "model_score": 9.3,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "one vs one will be used"
    },
    {
      "question_id": "65",
      "model_score": 28.9,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Let us suppose , I have declared class name ' Shape' , And in that I have declared Area() function, which calculates the area of given shape. \nBut as we know that Area depends on actually which type of shape it is!\nA rectangle, or a circle , or Rhombus...\nso ,\nthis is the advantage of separat"
    },
    {
      "question_id": "90",
      "model_score": 47.6,
      "human_score": 0.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "In some cases the data is such that n-1 dimensions hyperplanes are not sufficient to classify it."
    },
    {
      "question_id": "39",
      "model_score": 44.1,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nTrue. fd[0] is the \"read\" end & fd[1] is the \"write\" end, hence vice-versa is not true.\n"
    },
    {
      "question_id": "22",
      "model_score": 57.5,
      "human_score": 0.0,
      "question": "During coagulation process alkalinity reduces due to the ___________________________",
      "instructor_answer": "As coagulation is done,the OH- tend to form more bonds with the molecules in the sample, and H+ concentration increases which lowers the pH level.",
      "student_answer": "Alkalinity plays a key role in the coagulation to remove NOM, since it tends to keep coagulation pH higher and reduce removal. Hence alkalinity reduces during coagulation process."
    },
    {
      "question_id": "58",
      "model_score": 12.7,
      "human_score": 0.0,
      "question": "The philosophies to define environmental management are                                                                                                            ",
      "instructor_answer": "Conservationism, Preservationism, Deep Ecology, Social Ecology",
      "student_answer": "sustainability, safety and reduce-reuse-recycle"
    },
    {
      "question_id": "74",
      "model_score": 50.5,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "Th computational complixity of model should be increases and errors in backpropagation also increases."
    },
    {
      "question_id": "63",
      "model_score": 47.4,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "The leaves and stem are mostly green. Hence, a narrow range around 240 degrees for H. The brights and darks are not properly distributed and there's sudden changes in intensity. Hence, we can approximately use two thresholds narrowly centered around 0.2 and around 0.8 for each of I and S"
    },
    {
      "question_id": "105",
      "model_score": 74.6,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, the OS executes the same instruction again because when it was executed previously, it could not complete & some wire-trapped, so it's"
    },
    {
      "question_id": "105",
      "model_score": 71.9,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, Execute the same instruction after having a valid transformation home."
    },
    {
      "question_id": "51",
      "model_score": 44.4,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "Adsorption of ions & Vanderwaal's forces"
    },
    {
      "question_id": "21",
      "model_score": 58.4,
      "human_score": 1.0,
      "question": "Differentiate between true random number and pseudorandom number generators.",
      "instructor_answer": "TRNG uses unpredictable physical mean for computation of random\nnumber, results are truely random and unpredictable , some random numbers cannot be reproduced. PRNG uses mathematical algorithm which are computer based. Its logical which uses mathematical formulas to generate sequence of random number. Some random number can be produced.",
      "student_answer": "True random Numbers are generated in non deterministic approach. They are non predictable and repeatable. Whereas Pseudo random number are the number that appears random but one obtained in a deterministic irrepeatable and predictable manner."
    },
    {
      "question_id": "106",
      "model_score": 61.6,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "A2. Although there is no trap in child process, the context is still stored in kernel stack. So, it still knows where to continue in user mode. I think that child process uses context stored in kernel stack, and it will return from a trap when its parent calls wait(). On the other hand, if it becomes an orphan and ~~init~~ becomes its parent and calls kill(), it gets a time interrupt from CPU."
    },
    {
      "question_id": "28",
      "model_score": 21.0,
      "human_score": 0.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "reduce no of steps and writing algorithm"
    },
    {
      "question_id": "29",
      "model_score": 97.6,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "rainfall intensity , time "
    },
    {
      "question_id": "41",
      "model_score": 79.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "True Suppose that the process has been running for too long. In this case, a preemptive scheduler can switch to another process on handling the interrupt since it has been running for too long. In this case, without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking."
    },
    {
      "question_id": "44",
      "model_score": 61.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse. Even without the timer interrupt, the OS has opportunities to schedule READY processes if there are opportunities to switch processes."
    },
    {
      "question_id": "63",
      "model_score": 64.9,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "The stem and leaves are green, so we take a filter which filters out only those pixels whose hue is around 120 degrees, but the filter is skewed, since we want to eliminate all cyan components but retain yellow components as the bottom stem is yellowish. Hence, the filter will be towards the yellow side more than the blue side (i.e. not exactly symmetric about h=120 degrees). Since petals are of various intensities, we allow all to pass through. We can also add a saturation threshold. As the petals and stem contain green-yellow-white-dark colors we can take something like S <= 0.95"
    },
    {
      "question_id": "68",
      "model_score": 59.9,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "many commonly encountered problems cannot be dealt with single layer perceptron neural network so multilayer neural network is used . the multilayer neural network cannot be too small or too large problems may occur during training."
    },
    {
      "question_id": "26",
      "model_score": 30.3,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "mechaning for gear hole"
    },
    {
      "question_id": "40",
      "model_score": 40.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "True\nAs stated by the pipe manual page, `fd[0]` is the write-end of the pipe and `fd[1]` is the read-end of the pipe, and internally, the kernel will only transfer bytes in this direction.\n"
    },
    {
      "question_id": "86",
      "model_score": 49.6,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "homogeneous Co ordinantes add z element to the matrix & it make easier to project the point on plane"
    },
    {
      "question_id": "19",
      "model_score": 80.2,
      "human_score": 2.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "decideaction node was used to decide which direction the bot should turn etc, depending on the state of the boat,  orientation, and on which node of grid it is currently on. "
    },
    {
      "question_id": "82",
      "model_score": 31.2,
      "human_score": 0.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "A linear discriminant function that produces a value when a pixel feature Vector is input to       t. for class k, it can be written as gk (x). But in non linear discriminant function, We use a large number of pixels."
    },
    {
      "question_id": "41",
      "model_score": 41.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue, upon the action of interrupt signal, process goes to blocked state; a different process would start running immediately as such the 1st process will have to wait till completion of interrupt handling before it may/may not be scheduled for execution.\n"
    },
    {
      "question_id": "85",
      "model_score": 35.5,
      "human_score": 0.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "As assumed, the head losses may not be proportional to the creep length. Also the uplift pressure follows a sine curve and not linear"
    },
    {
      "question_id": "48",
      "model_score": 12.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFALSE"
    },
    {
      "question_id": "54",
      "model_score": 48.7,
      "human_score": 0.0,
      "question": "The appetitive      faculty corresonds to      ",
      "instructor_answer": "Plato's theory of the soul, the appetitive faculty is one of the 3 divisions of the soul. It is the part dealing with desires and passions",
      "student_answer": "Part of the body which have desires"
    },
    {
      "question_id": "73",
      "model_score": 77.3,
      "human_score": 2.0,
      "question": "What are the important details that have to be known prior for reservoir routing?",
      "instructor_answer": "storage volume vs elevation of reservoir\ninflow hydrograph \nwater surface elevation vs outflow\ninitial values of S,I and Q at t=0",
      "student_answer": "1- Storage volume vs elevation for reservoir. 2- Outflow discharge vs elevation. 3-Inflow hydrograph. 4- Initial values of inflow, outflow and storage."
    },
    {
      "question_id": "65",
      "model_score": 73.8,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.We can change the definition of our functions and their features without disturbing the abstraction of the class.\n2.Seperating the declaration from definition makes it easier for reader and writer of the codes because the reader can find the signatures of all functions at one place and all their implementations at one place.\n3.Also we can change the function from virtual to normal and also decide to whether implement them in the same class or leave the functions to be implemented in the subclasses."
    },
    {
      "question_id": "41",
      "model_score": 65.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue, After the process not called immediately after the interrupt then process may not be rescheduled immediately.\n"
    },
    {
      "question_id": "40",
      "model_score": 83.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue, The reason is similar to how we can only use the stdin (descriptor 0) to read and 1 to write, not vice versa.\n"
    },
    {
      "question_id": "106",
      "model_score": 77.8,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When fork() system is called it further calls allocproc() function which assigns pid to the process, allocates memory for kernelstack, context, set eip value as forkret().\nOn return from this function fork copies files from parent, trapframe, context to childs corresponding elements in process control block.\nSets eax value to 0 in child. Here child copies parent trapframe, using this child can return from trap.\nfork() sets the process to runnable and returns pid of child to process."
    },
    {
      "question_id": "64",
      "model_score": 47.9,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H : Around 45 degrees\nS : Around 1 with small deviations\nI : Can vary in [0.33,1] must have some red atleast"
    },
    {
      "question_id": "9",
      "model_score": 92.3,
      "human_score": 2.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "perpetual growth rate and discount rate"
    },
    {
      "question_id": "102",
      "model_score": 85.0,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "particle size, frequency, slurry concentration"
    },
    {
      "question_id": "79",
      "model_score": 63.1,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "equation who free parameters should be specified by experimental data, to obtain formulas based on the earlier reading "
    },
    {
      "question_id": "51",
      "model_score": 78.0,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1. Imperfect crystallization\n2. Adsorption of charged particles on surface"
    },
    {
      "question_id": "64",
      "model_score": 61.7,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "narrow range around H (0/ 360 degree). \nlooser/narrow range around S (centered around 1) and I (centered around 0.5 or above and extending to values close to 0), in the image"
    },
    {
      "question_id": "64",
      "model_score": 25.0,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To sample Red, we can take Hue (H) in a narrow range around 45       or 315      "
    },
    {
      "question_id": "80",
      "model_score": 48.7,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "Anisotropic material that have symmetry on 2 orthogonal planes"
    },
    {
      "question_id": "90",
      "model_score": 71.0,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "In classitication, if the original feature vectors are such that, they are not linearly separable, transforming them into non linear dimension space may help the dilferent class feature vecters to be linearly Separable."
    },
    {
      "question_id": "60",
      "model_score": 63.2,
      "human_score": 1.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "windrow,aerated windrow,"
    },
    {
      "question_id": "63",
      "model_score": 68.6,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "To segment green leaves and stem we apply a threshold of range of values around 120 degree which corresponds to green. the range we should use must be broader than applied in previous part as the shade of green is more darker. Similar to before no threshold on intensity and saturation."
    },
    {
      "question_id": "97",
      "model_score": 59.9,
      "human_score": 2.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "depth of cut, stiffness of machine, types of chip"
    },
    {
      "question_id": "49",
      "model_score": 62.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "Finally, each process will have separate PCB"
    },
    {
      "question_id": "63",
      "model_score": 68.9,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "To segment green leaves H should have narrow range around 120       I is rangese around 0.5 and S is ranges around 0.25 to .5."
    },
    {
      "question_id": "80",
      "model_score": 45.8,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "Material which has three mutually perpendicular planes of symmetry"
    },
    {
      "question_id": "40",
      "model_score": 82.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue. Because the 2 file descriptor [fd0] & [fd1] are connected & we can write only to [fd1] which is read vid [fd0].\n"
    },
    {
      "question_id": "35",
      "model_score": 87.8,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "sprinkler, drip, flooding, furrow"
    },
    {
      "question_id": "72",
      "model_score": 86.0,
      "human_score": 2.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "maximum image quality should he preserved after compressing the image, full channel capacity should be utilised to transmit images to base station. Date rate should never exceed maximum channel capacity."
    },
    {
      "question_id": "65",
      "model_score": 68.2,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.We can change the definition of our functions and their features without disturbing the abstraction of the class.\n2.Seperating the declaration from definition makes it easier for reader and writer of the codes because the reader can find the signatures of all fung"
    },
    {
      "question_id": "65",
      "model_score": 64.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) We can make the body of the class look cleaner with coordination like starting with all variable declaration followed by function declaration and then we can define them separately.\n2) If there is some mistake in the function definition Or you just want to ammend the function definition, it will be easier to ammend it, if the definition was written separately and ammending it won't affect the cleanliness of the code."
    },
    {
      "question_id": "29",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "rainfall intensity and time"
    },
    {
      "question_id": "104",
      "model_score": 73.4,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) Disabling of interrupts\n   Users may try disabling interrupts using \n   privileged instructions. But interrupts can \n   only be disabled at kernel privilege level. \n\n2) Update the CR3 registers\n   User may try updating the CR3 register \n   to change the page directory location to \n   something malicious. But CR3 register \n   can only be updated at kernel privilege level."
    },
    {
      "question_id": "47",
      "model_score": 17.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTRUE. A process executing on the CPU is interrupted due to an interrupt. This process may not be rescheduled immediately on completion of the interrupt handler."
    },
    {
      "question_id": "66",
      "model_score": 74.8,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "easily measurable and based on current market data"
    },
    {
      "question_id": "43",
      "model_score": 14.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "FALSE"
    },
    {
      "question_id": "102",
      "model_score": 52.1,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "abrasive particle density, frequency of oscillation and Hardness of the workpiece"
    },
    {
      "question_id": "26",
      "model_score": 14.7,
      "human_score": 0.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "efficient thickness reduction: surface cleaning"
    },
    {
      "question_id": "65",
      "model_score": 72.5,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Program looks structured and is comprehensive. Defining a member function at the place of its declaration gives an untidy look to the program. Also, it becomes easier for the reader to get a quick idea about the working of the class by just looking at the names of member functions once.\n\n2) Editing/adding/deleting a member function becomes simple. When the member functions are declared at the same place (without definition), the editing of a program becomes easy."
    },
    {
      "question_id": "43",
      "model_score": 14.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFALSE"
    },
    {
      "question_id": "100",
      "model_score": 49.1,
      "human_score": 2.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "low MRR, High setup cost"
    },
    {
      "question_id": "66",
      "model_score": 41.1,
      "human_score": 1.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "market based and relativity"
    },
    {
      "question_id": "63",
      "model_score": 44.7,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "narrow range around 120 degree for H, broad range of S "
    },
    {
      "question_id": "90",
      "model_score": 66.0,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "It helps in linearly separating the non-linear data."
    },
    {
      "question_id": "74",
      "model_score": 61.6,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "If there is a large number of hidden layers on a NN than the Network not only learns essential of the input output  relationship properly in such case the network fails to correctly classify the test supplies that the network did not see during the training phase. This is the case of generalization failure"
    },
    {
      "question_id": "41",
      "model_score": 63.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\n **True**, If a process executing on the CPU is interrupted due to an interrupt, then that process may **or may not** be resumed immediately on completion of interrupt handlers whether it will be blocked immediately on being resumed. "
    },
    {
      "question_id": "33",
      "model_score": 22.5,
      "human_score": 0.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "Evaporation, Transpiration"
    },
    {
      "question_id": "77",
      "model_score": 20.7,
      "human_score": 0.0,
      "question": "What are the two important scales in Hydrology? ---------------------",
      "instructor_answer": "Availability of driking water, time scale, length of the process, spatial scale.",
      "student_answer": "inflow due to precipitation, snowfall etc and outflow due to runoff, evaporation, transpiration etc"
    },
    {
      "question_id": "98",
      "model_score": 64.7,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "They increase the abrasive wear resistance and reduce friction"
    },
    {
      "question_id": "56",
      "model_score": 76.6,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "consistency, efficiency, sufficiency"
    },
    {
      "question_id": "65",
      "model_score": 54.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)Makes it easier for the user to get a list of all functions at one place,that helps.in builiding Application Programmin"
    },
    {
      "question_id": "44",
      "model_score": 11.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "**FALSE**"
    },
    {
      "question_id": "31",
      "model_score": 18.3,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "The function should output a probability distribution over all the classes, ie it should tell the probability of the input to belong to each class"
    },
    {
      "question_id": "49",
      "model_score": 19.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "File is multiple processes with different PID are created, each has unique entry in the PCB, because of has its own set of rules maintained with its own set of rules.\n Using one command that creates replaces process in some PID, PCB of new PID is not created, because entry will be replaced."
    },
    {
      "question_id": "65",
      "model_score": 72.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) It is easier to see what functions have been defined in the given class .\n2) The class definition become\nUnderstanding the code becomes simpler by just declaring the functions in classes and defining them later ."
    },
    {
      "question_id": "19",
      "model_score": 45.5,
      "human_score": 1.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "according to the sensor value it will decide the output action of the system."
    },
    {
      "question_id": "104",
      "model_score": 17.6,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " fork():\nfork is a system call used by user and forces system to return to OS and create a child process with new pid. It is privileged because we should not have power.\n\nfork():\nfork is a system call used by user to fork a child process. When called, user is stopped running by OS and OS handles this call and when finished, OS return boot to user.\n\nsleep():\nsleep is a system call called by user to sleep by OS stopping user from memory and forcing it to sleep.\n\nState:"
    },
    {
      "question_id": "102",
      "model_score": 67.0,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "amplitude of oscillation, frequency of oscillation, no of particles in slurry per unit volume"
    },
    {
      "question_id": "64",
      "model_score": 80.1,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "I range should be a broad range around 0.5, nearly full scale.\nSaturation should be a very narrow window near 1, the component of green would be minimal or 0 entirely.\nHue should be a narrow sector around 350 degrees i.e red but somewhat towards 300 degrees because of the color magenta.\nThis takes care of the red color of all intensities to be classified as petals."
    },
    {
      "question_id": "63",
      "model_score": 57.7,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "a narrow range around 120 for H"
    },
    {
      "question_id": "82",
      "model_score": 71.2,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "A non linear discriminant function classifier can be used to classify more complex and non-linear feature distributions.."
    },
    {
      "question_id": "81",
      "model_score": 84.5,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "Low eigen values conveys that variance along given eigen vector is not very large or the eigen vector does not capture a lot of information."
    },
    {
      "question_id": "47",
      "model_score": 32.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nFalse \n          It depends on the CPU scheduling. It may be the case that CPU schedules child process first, parent later."
    },
    {
      "question_id": "55",
      "model_score": 78.9,
      "human_score": 2.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "hexadecanol, octadecanol"
    },
    {
      "question_id": "65",
      "model_score": 39.3,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Easy to see the names of member function in the class at the same place.\n"
    },
    {
      "question_id": "89",
      "model_score": 79.5,
      "human_score": 1.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "Time area method is used to transform an effective storm hyetograph into a runoff hydrograph."
    },
    {
      "question_id": "51",
      "model_score": 89.3,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1. Adsorption of ions onto the surface of colloidal particles\n2. Crystal imperfections- When silicon atoms are replaced by atoms with lower valency,  negative charges are in excess"
    },
    {
      "question_id": "65",
      "model_score": 71.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1 ease of readability of class with many member functions\n\n2 standard practice makes code better understandable"
    },
    {
      "question_id": "42",
      "model_score": 55.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse. This might of switching process remains with the OS. If not, then if can't handle too many processes scheduled at the same time. CPU can't handle that."
    },
    {
      "question_id": "65",
      "model_score": 41.0,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Structured programming\n2) Shows the abstraction's interface explicitly"
    },
    {
      "question_id": "64",
      "model_score": 26.3,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "create a saturation mask, with saturation above a certain threshold (maybe 0.2, could be lower). "
    },
    {
      "question_id": "14",
      "model_score": 29.4,
      "human_score": 0.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "Kurtosis is defined as ratio of fourth central moment by the square of the second central moment."
    },
    {
      "question_id": "7",
      "model_score": 54.1,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "Removal of a layer of filter medium (2-3mm) and when filter bed depth reaches the minimum, then all the removed filter medium is cleaned and reinstalled in the filtration unit."
    },
    {
      "question_id": "49",
      "model_score": 85.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "No, different processes have different PCBs so\n can access it and here they may have rest all\n same but at least pid will be different so diff PCBs."
    },
    {
      "question_id": "99",
      "model_score": 13.2,
      "human_score": 0.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "abrasive resistance increased"
    },
    {
      "question_id": "40",
      "model_score": 89.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue fd[1] is the write end of the pipe and fd[0] is the read end\n"
    },
    {
      "question_id": "105",
      "model_score": 70.9,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False: First it completes the instruction due to which page fault and lazy allocation occurred."
    },
    {
      "question_id": "39",
      "model_score": 4.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nTrue"
    },
    {
      "question_id": "104",
      "model_score": 23.6,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " -> 1. The user process may try to loop indefinitely without making any syscalls or performing an I/O operation i.e. without the intention to take over the CPU. This is prevented by the OS with the help of hardware using timer interrupts.\n\n2. The OS also prevents the user from accessing restricted memory regions or making restricted system calls by introducing modes (user mode or kernel mode) where the user process is not privileged to run such instructions. The OS can be asked by the user process to execute such instructions in which case the integrity of the instruction"
    },
    {
      "question_id": "63",
      "model_score": 72.6,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "using the equation of hue and theta, we get that G is maximum around hue=120. So a narrow band around 120 hue should be used. Again all intensity and saturation should be accepted as the green part has high variation."
    },
    {
      "question_id": "105",
      "model_score": 78.4,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False\nIt executes the page-fault instruction (where the\nexception arrived). To get address/read the corresponding\naddress data\nEg now load (reader)\nload/next B1 -> Pn C.A ? A ? B\nIn C.A also cause exception\nbecause it may try to access next segment after loading"
    },
    {
      "question_id": "9",
      "model_score": 49.6,
      "human_score": 1.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "Assumptions such as growth rates, margins, WACC and Exit multiple"
    },
    {
      "question_id": "74",
      "model_score": 73.3,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "when numbers of hidden layer are very large it may encounters overfitting condition due to which a process of overtraining of network starts and badly effects the time complexity of the network."
    },
    {
      "question_id": "65",
      "model_score": 37.0,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1:Major advantage of separating declaration from definition is that it makes the"
    },
    {
      "question_id": "65",
      "model_score": 55.7,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) keeping all the declaration together helps the programmer keep track of all the member functions he ha"
    },
    {
      "question_id": "47",
      "model_score": 89.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTRUE, cause post fork both processes are independent to do whatever they like. So parent process can very well use exec call if it wishes so."
    },
    {
      "question_id": "55",
      "model_score": 98.9,
      "human_score": 2.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "hexadecanol (cetyl alcohol) and octadecanol (stearyl alcohol)"
    },
    {
      "question_id": "35",
      "model_score": 85.0,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "drip irrigation, sprinkler irrigation, surface irrigation, furrow irrigation"
    },
    {
      "question_id": "44",
      "model_score": 84.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse. Syscalls give the OS an opportunity to schedule other READY processes but a malicious process can take control of cpu in absence of timer interrupt. \n"
    },
    {
      "question_id": "105",
      "model_score": 7.3,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "Topic: Literally what happens (by defn. of lang.) allocation"
    },
    {
      "question_id": "47",
      "model_score": 63.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\n\nTrue, exec can be used in fork\na new child process is created\nparent and child has separate copy "
    },
    {
      "question_id": "104",
      "model_score": 45.6,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. A user process may attempt to drain indefinitely the CPU and starving other processes. This is skipped by LDT since own interrupts the user process will try to own a while(one) loop forever & whatever. \n\n\n2. A user process may try to change the IDTR register value so that it can manipulate what happens when an interrupt occurs. Thus causing malicious code in case a particular interrupt occurs. OS clops this by not allowing a user process to access such data."
    },
    {
      "question_id": "36",
      "model_score": 79.6,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1. geographical location \n2. climatic conditions \n3.size of the city\n4  extent of industrialization "
    },
    {
      "question_id": "81",
      "model_score": 69.4,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "eigen values which are low signify that there is no variance in the data along the eigen vector corresponding to them."
    },
    {
      "question_id": "47",
      "model_score": 33.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\n **False**, If parent process is not completed, then child process cannot execute."
    },
    {
      "question_id": "41",
      "model_score": 87.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue, OS may context switch and let another process run if interrupt is blocking (like I/O).\n"
    },
    {
      "question_id": "41",
      "model_score": 90.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue\n          If the interrupt caused the process to block then CPU might context switched out the process and scheduled another."
    },
    {
      "question_id": "28",
      "model_score": 63.5,
      "human_score": 1.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "Helps in eliminating lower dimensional features, as regular sets are closed under regularised Boolean set"
    },
    {
      "question_id": "73",
      "model_score": 60.7,
      "human_score": 1.0,
      "question": "What are the important details that have to be known prior for reservoir routing?",
      "instructor_answer": "storage volm vs elevation of reservoir\ninflow hydrograph \nwater surface elevation vs outflow\ninitial values of S,I and Q at t=0",
      "student_answer": "inflows, initial outflow, initial storage"
    },
    {
      "question_id": "33",
      "model_score": 30.9,
      "human_score": 0.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "free fall and leaves-stems-roots"
    },
    {
      "question_id": "65",
      "model_score": 41.1,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) It keeps the body of the"
    },
    {
      "question_id": "65",
      "model_score": 34.6,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) when we declare a function in a base class and there is a hierarchy inheritance with two derived class. we have flexibility to  write different defination in the derived classes with our f"
    },
    {
      "question_id": "105",
      "model_score": 31.3,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " TRUE\nIn lazy allocation policy a page is allocated on page fault."
    },
    {
      "question_id": "34",
      "model_score": 19.3,
      "human_score": 0.0,
      "question": "Key steps in anaerobic digestion process are                                                                                                                                                          .",
      "instructor_answer": "The four key stages of anaerobic digestion involve hydrolysis, acidogenesis, acetogenesis and methanogenesis.",
      "student_answer": "preparation of wastes by segregation and size reduction\naddition of moisture and nutrients\ncapture the gas amd purification"
    },
    {
      "question_id": "45",
      "model_score": 89.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\n **TRUE**\n A user process does not have the privilege to decide which process to schedule next and execute even if it knows the PID of the target process."
    },
    {
      "question_id": "44",
      "model_score": 55.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse - Without the timer interrupt, once the current process is finished, the OS has no opportunity to initiate a context switch and schedule the next process in the READY queue. It can happen only in the case of a READY process with the highest priority.\n"
    },
    {
      "question_id": "16",
      "model_score": 78.4,
      "human_score": 2.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "Noise in a time series data is the stochastic variation is there in a time series due to various external or  characteristics of the system. It may also be because in measured it can be eliminated by moving average.\n"
    },
    {
      "question_id": "4",
      "model_score": 32.8,
      "human_score": 0.0,
      "question": "A rating curve is only valid when?",
      "instructor_answer": "A rating curve is only valid when there is no over flow or flood in a region.",
      "student_answer": "Rating curve is valid for very less or no storage (upstream)"
    },
    {
      "question_id": "65",
      "model_score": 52.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Readability. That is, while reading the class member functions and variables, one can easily locate a member function that is being searched for. Further, one can get a rough overview of what the class is trying to accomplish without getting into the gritty details by just looking at the declaration of the member functions.\n2. Use of global variables. Although this need not apply to everyone, personally, if I would like to use a global variable and change its value when the function is called, I would like to first declare all the classes which I would be using in my program and then declare the global variables and finally, at the end, just before I write my main function, I would write the definition of the member function."
    },
    {
      "question_id": "43",
      "model_score": 35.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse\nNo O.S has the power to schedule any ready process, data loss prevented by context switching"
    },
    {
      "question_id": "39",
      "model_score": 45.7,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse, (Writes only on fd[0]) and reads only on fd[0]), it's a design feature.\n"
    },
    {
      "question_id": "65",
      "model_score": 68.5,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The code looks nicer, the definition of the class is short and readability increases.\n\n2. It is now possible to use another class or some function of another class inside this function even when the second class has to be defined afterwards."
    },
    {
      "question_id": "63",
      "model_score": 55.2,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "I range should be a broad range around 0.5,\nSaturation should be a very narrow window near 1\nHue should be a narrow sector around 0/360 degrees\nThis takes care of the green to yellowish - green color of all intensities to be classified as leaf and stem"
    },
    {
      "question_id": "63",
      "model_score": 64.5,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "create a saturation mask, with saturation above a certain threshold (maybe 0.2, could be lower). multiply with original image to get regions where the stemand leaves could be. now create a hue mask from this image, with a narrow band in H centred around 120 degrees (green) or the natural shade of green in leaves. multiply the mask with the original image to get the leaves and stems."
    },
    {
      "question_id": "90",
      "model_score": 41.4,
      "human_score": 0.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "The data set, cant be always classified using a simple linear discriminant function."
    },
    {
      "question_id": "47",
      "model_score": 28.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "True\nExec syscall will just run the program which is running the process will remain the same."
    },
    {
      "question_id": "43",
      "model_score": 14.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\n **TRUE**, if we may get corrupted data\n"
    },
    {
      "question_id": "106",
      "model_score": 72.9,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When the child is forked, the current execution context and stackframe contents are all copied to the new PCB with a few exceptions. Everything is copied except PID, PPID, and the eax is set to 0 (which is equal to -1 for the parent).\n\nSo when the scheduler decides to go into the child process, it performs a context switch by loading its LIFO-program counter of the newly forked child.\n\nBasically a new process is added to the ptable hence the scheduler and in READY state. Therefore the scheduler is invoked when yielded and it decides which process to run - also if it decides to run the child process it performs context switching from kernel (schedule) to child process by writing contents on its PCB."
    },
    {
      "question_id": "65",
      "model_score": 61.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. the body of class looks clear              and readable.\n\n2. as all definitions are at one place we can easily understand the member functions.\n\n3. if all definitions are inside the class body the class body appears to be extremely large and difficult to understand and follow up about what is going on inside the class as we might get confused while studying the program."
    },
    {
      "question_id": "43",
      "model_score": 7.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\n **FALSE**"
    },
    {
      "question_id": "85",
      "model_score": 32.8,
      "human_score": 0.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "in this, it is assumed that the head loss is proportional to the creep length"
    },
    {
      "question_id": "69",
      "model_score": 52.2,
      "human_score": 1.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "life of reservoir where the settlement of silt is under limit"
    },
    {
      "question_id": "81",
      "model_score": 78.1,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "very low eigen value of a component represents that the component is redundant and can be removed. It may also represent noise present in the redundant component."
    },
    {
      "question_id": "105",
      "model_score": 29.7,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True the process cannot continue if any fault arises.\nOS first resolves the fault and then jumps to the next EIP."
    },
    {
      "question_id": "102",
      "model_score": 78.1,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "size of abrasive, frequency of vibration tool, slurry concentration"
    },
    {
      "question_id": "84",
      "model_score": 45.8,
      "human_score": 1.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "The perceptron classifier unable to classify properly will multilayer Perceptron divided into 1 linear lines."
    },
    {
      "question_id": "82",
      "model_score": 77.4,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "it can be case that classes are not linear separable in the current feature space but become linear separable in some higher dimensions. Hence non linear discriminant help to classify the problem using standard classification techniques."
    },
    {
      "question_id": "50",
      "model_score": 20.6,
      "human_score": 0.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "1. In reservoir routine th"
    },
    {
      "question_id": "46",
      "model_score": 6.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\n **TRUE**"
    },
    {
      "question_id": "10",
      "model_score": 31.5,
      "human_score": 0.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "Task assigned with larger priority number gets priority first"
    },
    {
      "question_id": "81",
      "model_score": 62.9,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "In PCT, very low eigen values shows the less variance in its eigen vectors."
    },
    {
      "question_id": "41",
      "model_score": -0.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "None"
    },
    {
      "question_id": "43",
      "model_score": 89.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFALSE, the OS may choose to schedule another process, if it will save the CPU state without the timer interrupt."
    },
    {
      "question_id": "37",
      "model_score": 86.7,
      "human_score": 2.0,
      "question": "Negative electrode used in Nickel         MH Batteries are _____________.",
      "instructor_answer": "Hydrogen absorbing alloys (MH)",
      "student_answer": "Some hydrogen absorbing alloys"
    },
    {
      "question_id": "92",
      "model_score": 59.9,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Motion detection, Image registration, video tracking, object recognition & detection, image segmentation."
    },
    {
      "question_id": "28",
      "model_score": 8.1,
      "human_score": 0.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "Since we already have pre-built models l"
    },
    {
      "question_id": "65",
      "model_score": 61.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Helps in dividing big files into parts.\n2) Cleaner code i.e, good maintenance of code."
    },
    {
      "question_id": "42",
      "model_score": 85.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "False, the process cannot initiate a context switch, os prevents it to schedule the process. The scheduling will be in the hands of the os."
    },
    {
      "question_id": "98",
      "model_score": 29.3,
      "human_score": 1.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "Helps in increasing the rate of production and improves quality of product surface"
    },
    {
      "question_id": "10",
      "model_score": 51.4,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "the priorities of two tasks are interchanged in order for the less priority task to be scheduled before the high priority task currently running."
    },
    {
      "question_id": "30",
      "model_score": 22.0,
      "human_score": 0.0,
      "question": "If there is one explanatory variable, regression analysis is termed as (                                                               )       else it is termed as (                                                                             )",
      "instructor_answer": "Univariate and Multivariate",
      "student_answer": "single regression, multiple regression"
    },
    {
      "question_id": "16",
      "model_score": 43.2,
      "human_score": 2.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "Time series plot is the greaph between Rainfall and Time. When Rainfall happens it Falls with some intensity may be as constant then the graph is looks like Linearly increasing lihe graph but there may be some time span when either the depth of rainfall suddenly lowers down and then after sudde comparitive to previous Rainfall intensity heavy Rainfall occurs. So the gap between the line does not becomes linear it creates some fluctuations, these fluctuations is called as noise."
    },
    {
      "question_id": "40",
      "model_score": 18.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue, something is written on the top of the stack, there is nothing to read. \n"
    },
    {
      "question_id": "36",
      "model_score": 65.7,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1. population of area\n2. industrialization requirements\n3. quality of water\n4. availability of water(24/7 or only a few hours everyday)\n5. water required for cleaning and maintenance purposes of "
    },
    {
      "question_id": "102",
      "model_score": 83.6,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Strength of workpiece"
    },
    {
      "question_id": "100",
      "model_score": 53.1,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "MRR is low and it is not suitable for soft and ductile materials"
    },
    {
      "question_id": "30",
      "model_score": 97.0,
      "human_score": 2.0,
      "question": "If there is one explanatory variable, regression analysis is termed as (                                                               )       else it is termed as (                                                                             )",
      "instructor_answer": "Univariate and Multivariate",
      "student_answer": "univariate,multivariable"
    },
    {
      "question_id": "105",
      "model_score": 78.9,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " FALSE\nAn exception after exception handling is completed the CPU attempts to run the faulting instruction again."
    },
    {
      "question_id": "104",
      "model_score": 49.6,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Assuming the user is aware of the general setup of the virtual addressing -> i.e. knows where the OS code etc is placed, it can easily attempt to access OS codes and destructure matrices, by playing to access addresses about KERN_BASE, x86_64.\n\neg swap page\nDisable Interrupts (say using INT 0 interrupt)"
    },
    {
      "question_id": "53",
      "model_score": 80.8,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Features auch as color, edges texture and width of the roads may be useful if the roads are put in different categories"
    },
    {
      "question_id": "65",
      "model_score": 70.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "A neater, more compact code inside the class {} block which is easier to read and to gain information about the existing members/member functions.\nAll function definitions listed later have their separate blocks which also start with the class marker(in the syntax--\nfn_return_type  class_name ::  fn_name(parameters) )\nwhich will make redefining, locating and debugging easier and if there are any virtual / pure virtual functions they might not be noticeable when declarations are not separated and will cause problems for the user of abstraction.\nPublic, private, protected keywords have concise lists of member functions/variables ans so available implementation of the class/abstraction is easily understandable when code is read."
    },
    {
      "question_id": "100",
      "model_score": 49.8,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "low MRR and Workpeice gets embedded by abrasive particles"
    },
    {
      "question_id": "92",
      "model_score": 66.6,
      "human_score": 2.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "classification can be benefited from interest points like corners. corners can be used as for image segmentation analysis also."
    },
    {
      "question_id": "51",
      "model_score": 65.0,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1)cations and anions get adsorbed on the surface of the colloidal particles and give them a charge\n2)Hydroxl ions and carbonate ions get adsorbed on the surface of colloidal particles giving them a charge at certain ph\n3)The silicon atoms inside the particles get replaced by atoms of lower or higher covalency, giving them a charge"
    },
    {
      "question_id": "40",
      "model_score": 94.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "True.  system pipe system call is designed such way that it writes using fd[1] and reads using fd[0]."
    },
    {
      "question_id": "65",
      "model_score": 72.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. If they are together ie , a function is fully defined in its class then ,the class becomes bulky with code. The program does not look good. Hard to read the full program.\n\n2. Seperating them ,ie defining the function outside the class, makes it easy to modify the code for that function. It stands seperate, hence can be managed seperately."
    },
    {
      "question_id": "33",
      "model_score": 84.3,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "Through-fall and Stem flow"
    },
    {
      "question_id": "9",
      "model_score": 67.9,
      "human_score": 2.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "WACC, Exit multiple & perperuity growth rate "
    },
    {
      "question_id": "64",
      "model_score": 73.9,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petals we take product of saturation of saturation mask and hue having hue value 0       or 360       saturation or nearby 0      "
    },
    {
      "question_id": "48",
      "model_score": 88.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse: After forking, parent & child are 2 different processes. No one's stopping the other from executing other programs."
    },
    {
      "question_id": "65",
      "model_score": 31.5,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The definition and declaration can be written in separate files. Thus, two different "
    },
    {
      "question_id": "40",
      "model_score": 94.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTRUE - The pipe system call establishes a unidirectional data channel between two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.\n"
    },
    {
      "question_id": "19",
      "model_score": 46.1,
      "human_score": 0.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "to decide which direction t"
    },
    {
      "question_id": "47",
      "model_score": 40.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue. Exec will override the current process with new program. Child is orphaned."
    },
    {
      "question_id": "44",
      "model_score": 88.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "False. The OS can still share the CPU and schedule ready processes on other system calls and interrupts. It's just that we need a mechanism to be sure that no process keeps on executing indefinitely."
    },
    {
      "question_id": "35",
      "model_score": 62.8,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Furrow\nSprinkler\nDrip\n"
    },
    {
      "question_id": "52",
      "model_score": 93.8,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a change in dimensions divided by original dimensions"
    },
    {
      "question_id": "63",
      "model_score": 80.9,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H: around 120 degrees\nS: around (0.5,1] (Leaves are shadowed, so we need to segment lower saturation regions as well)\nI: for the given H and S an average intenristy range of [0.5,1]should be just fine"
    },
    {
      "question_id": "79",
      "model_score": 23.2,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "Standards calculation methods that have been derived theoretically"
    },
    {
      "question_id": "40",
      "model_score": 36.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "False. We can use either for read. If [fd0] is write then [fd1] is read, no problem in this."
    },
    {
      "question_id": "47",
      "model_score": 31.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "TRUE"
    },
    {
      "question_id": "84",
      "model_score": 91.6,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "The XOR funchion is not linearly separable. A perceptron classifier being linear in the feature space is not able to correctly classify the XOR function. On the other hand a MLP with more than 1 layer is able to learn non - linear decision boundaries as well and is able to correctly classify the XOR function."
    },
    {
      "question_id": "31",
      "model_score": 16.9,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "So it is simple multiplication and addition in the beggining to get the net value of the output and then this is paased through the activation function. If we want to handle multiclass response we can connect bias to the input ."
    },
    {
      "question_id": "49",
      "model_score": 35.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False.\n Process of same program were in diff PCBs.\n Because PCB stores not only TCBs but also parent-PCB\n (which may differ for different process)\n But if they are inhated from main process, they store the 8086."
    },
    {
      "question_id": "42",
      "model_score": 73.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "**FALSE**, User process does not has the privilege to initiate a context switch even if it has the PID of another process. Only OS or the privileged kernel mode can do it."
    },
    {
      "question_id": "12",
      "model_score": 51.5,
      "human_score": 1.0,
      "question": "Define design flood.",
      "instructor_answer": "It is the flood adopted for the design of the structures",
      "student_answer": "it is hypothetical peak discharge used for the structures models"
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, the physical page which we are allocating could be corrupted, hence could be a risk if such a thing was done."
    },
    {
      "question_id": "98",
      "model_score": 38.7,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "it has thermal stability"
    },
    {
      "question_id": "106",
      "model_score": 77.7,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " The return froth in the child is exactly identical to that of the parent. As the trapfine of the parent is copied (except eax), @eax is 0 and @ebp and the return address of the child process is set to trapret, it is as though the child called fork() too. Child is set to RUNNABLE.\n\nWhen the child process is eventually scheduled and switched to, the child process returns to user space via the @troph handler. As thtf is the same, @eip points to the instruction after fork() and @eax = 0 means that fork returns 0."
    },
    {
      "question_id": "69",
      "model_score": 63.5,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "The period till which the water inside the reservoir can be stored for different used"
    },
    {
      "question_id": "49",
      "model_score": 21.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "Edge:\n A separate copy is isolated from all other powers, or they will have distinct PCBS and stacks (Kennett & W.A). This is so that there is no name confusion and the programs output is system wide."
    },
    {
      "question_id": "44",
      "model_score": 73.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\n **False**, it is voluntarily blocked (I/O)."
    },
    {
      "question_id": "65",
      "model_score": 66.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. It makes code easy to read what are the functions defined and can read the its defination seperately."
    },
    {
      "question_id": "86",
      "model_score": 49.2,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "to standardized the matrix"
    },
    {
      "question_id": "47",
      "model_score": 21.1,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "True, child becomes orphan."
    },
    {
      "question_id": "52",
      "model_score": 97.5,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a change in length over original length"
    },
    {
      "question_id": "64",
      "model_score": 21.4,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "broad range of H around 0 degrees"
    },
    {
      "question_id": "100",
      "model_score": 38.4,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "low MRR, agressive partical getting imbeddte."
    },
    {
      "question_id": "104",
      "model_score": 27.7,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " -> accessing arbitrary memory locations (non stack)\nnull pointer dereference\n-> If the memory address is invalid, the page fault generated\nwill be caught"
    },
    {
      "question_id": "53",
      "model_score": 69.6,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "As we have to categorise or classify roads from all the other objects in the image like buidings, lake or green parks we will look at specific features that dfferentlare road from other objects. These features may include colour of the object as roads are black: and are there some buildings around as we know that we have roads around the buildings. Thickness and length of the object as on a image of city roads will look like straight lines."
    },
    {
      "question_id": "53",
      "model_score": 27.5,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Spatial features and boundaries of the urban area."
    },
    {
      "question_id": "64",
      "model_score": 56.8,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "narrow range around 0 degree for H and narrow range around 0 for S and very broad range for I"
    },
    {
      "question_id": "65",
      "model_score": 52.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Class declarations appear compact(as the member functions have only been declared and not defined). This makes it possible for the programmer to see what all features"
    },
    {
      "question_id": "36",
      "model_score": 50.5,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "distribution climate topography of the place availability of water bodies"
    },
    {
      "question_id": "78",
      "model_score": 37.1,
      "human_score": 1.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "micro plant\ncascade plant\npeak load plant"
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "Constant capital Structure"
    },
    {
      "question_id": "72",
      "model_score": 13.5,
      "human_score": 0.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "loss of information"
    },
    {
      "question_id": "31",
      "model_score": 60.7,
      "human_score": 2.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "one vs one give the probability of belonging to any one of two class. One vs all gives the probablity of whether the pixel belongs to this class or not. If we want to use single discriminant function than it should return a n-length vector containing probability of belonging to ith class."
    },
    {
      "question_id": "63",
      "model_score": 69.5,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "a narrow range around 120 degrees for H with no thresholding of saturation S as stems lie under the shadow hence having low saturation whereas sunlit leaves have high saturation."
    },
    {
      "question_id": "104",
      "model_score": 25.8,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " d) Switching context, while context switching os stores switches to the kernel mode and saves the context and the pointer is now shifted to another process in the kernel mode itself saving the allocating the context of previous process to this and then it is (moved / switched) to user mode. But when the user process attempt to perform this by saving context and then changing pointer to another it will be prevented by OS via limited-directed execution step.\ne) Alloc proc, when the user process tries to allocate a new proc, OS prevents this and makes this happen in kernel mode only."
    },
    {
      "question_id": "32",
      "model_score": 92.6,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "when the longitudinal slope of the canal is less than the actual slope of the ground"
    },
    {
      "question_id": "40",
      "model_score": 34.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "False, by default, fd[0] is the read end and fd[1] is the write end, but one can use dup2() to copy fd[0] into fd[1] and fd[0] to fd[0]."
    },
    {
      "question_id": "47",
      "model_score": 63.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue, if suppose we have used wait() , then it is possible that parent process uses exec() before the child process terminates."
    },
    {
      "question_id": "32",
      "model_score": 79.7,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "When natural slop is steeper than longitudinal slope provided in channel"
    },
    {
      "question_id": "47",
      "model_score": 75.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "**TRUE**, as operation of both processes is independent."
    },
    {
      "question_id": "31",
      "model_score": 43.8,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "Ideally the function should output the predicted class directly if we have to handle multiple classes with one function .We cannot output class specific values as many classes are there and no way of giving pressure to one or the other ."
    },
    {
      "question_id": "43",
      "model_score": 56.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "A: False, the process would be swapped out and pushed back into the queue for optimization."
    },
    {
      "question_id": "69",
      "model_score": 73.8,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "the reservoir can continue to serve some of the purpose to a limited extend even after expiryof its economic life, singly or in conjunction with additional facilities created for the purpose."
    },
    {
      "question_id": "74",
      "model_score": 55.5,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "Network will generalize poorly, and also takes long to train."
    },
    {
      "question_id": "41",
      "model_score": 77.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\n **True**. In every interrupt there the OS can call the scheduler and schedule it (schedule + exit sys call) or it can reschedule the current process on switch. Ex: If any sys call is in sched_lock kernel mode) Based on the scheduling parameters (such as round robin or sched_yield) it can reschedule without the CPU for multitasking."
    },
    {
      "question_id": "63",
      "model_score": 22.8,
      "human_score": 0.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Consider H in narrow range if"
    },
    {
      "question_id": "98",
      "model_score": 45.7,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "increasing tool life  and improving surface finishing"
    },
    {
      "question_id": "10",
      "model_score": 26.6,
      "human_score": 0.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "When a task is running for a long time, it's priority is reduced. \ninversely proportional to time, or some other parameter."
    },
    {
      "question_id": "106",
      "model_score": 62.5,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When fork() syscall is made, it returns the pid value to the parent, f the child have the return value 0, making it a separate process from the parent, as in parent, the fork() return the pid whereas in child, it returns 0. \nWhen fork() syscall is made, there is no trap in the child process, as it is made using the default trap handler. Now, syscall is trap handler. When return from trap occur, and as child is identical to the parent, the return is specified as the new process in the PCB list, and the return specified as the parent itself ( i.e. o return in case child). When fork() is called in child (as parent is identical to child, child will also fork and get o return value. It return from trap using the same parent return from trap but as if it is a new process."
    },
    {
      "question_id": "82",
      "model_score": 58.6,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "A non-linear discriminant function is able to provide non- linear activations at the end. A linear discriminant can work only on linearly separable dataset."
    },
    {
      "question_id": "106",
      "model_score": 68.0,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " Almost everything from the parent process \nkernel stack is copied to the child process \nkernel stack, including the trap frame.\nSo, this makes it feel like it had a trap frame \ninterrupt as well.\n\nBut, the return value of the fork() in the \ntrapframe of both processes (F = eax) is changed\nand also the child processes to the fork()\nfunction in the system kernel space before\nreturning to the user space where further\nprocessing happens."
    },
    {
      "question_id": "18",
      "model_score": 75.2,
      "human_score": 2.0,
      "question": "Define trap efficiency of a reservoir and write down the factors affecting the trap efficiency",
      "instructor_answer": "It is defined an the ratio of deposited sediment to the total sediment inflow for given period within the reservoir economic life time.Factors affecting the trap efficiency: Diameter of silt particles, size and weight and type of debrais. Wind flow direction. Shape of the dam.Topography of the dam structure. Material of the dam.",
      "student_answer": "Trap efficiency of a reservoir is the ratio of total sediments retained by the reservoir to the total sediments entering into reservoir (in flow sediments). Trap efficiency of a reservoir is a function of ratio of reservoir capacity and total in flows. The reservoir capacity is inversely related to the amount of sediments deposited. As the time passes rate of silting or rate of deposition of sediments reduces bet amount of sediments deposition will be increased which in turn reduces the capacity of a reservoir. Other factors are size of reservoir and steam and velocity of flow of stream."
    },
    {
      "question_id": "65",
      "model_score": 73.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) The program becomes easy to understand as all the declarations will be available in one place.\n2) The body of the class is short as all the defination will be outside the class and the program can be more readable."
    },
    {
      "question_id": "78",
      "model_score": 7.2,
      "human_score": 0.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "overflow and non-overflow"
    },
    {
      "question_id": "49",
      "model_score": 88.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Different occurrences of a program use separate PCBs, since the processes can differ in their executions, for eg., their ppid's, OFILE tables might not be the same."
    },
    {
      "question_id": "44",
      "model_score": 78.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse, as it is mentioned in co-operative scheduling, we can use yield syscall."
    },
    {
      "question_id": "64",
      "model_score": 61.8,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H varies from 0 deg to 15 deg (mean values is 0 deg for red). Saturation varies from 0.4 to 0.6. Saturation of pure colour is 1 and 0 for gray scale. As rose is mixture of red and white, its saturation will lie midway. Intensity varies from 0.333 to 0.5 as intensity of red colour alone is (1/3). Further green and blue pixels will provide some additional intensity."
    },
    {
      "question_id": "28",
      "model_score": 51.1,
      "human_score": 1.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "regular set operations are closed under reg. boolean set operations and help in simplifying the representation to meaningful solids in CSG modeling."
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "Constant capital structure"
    },
    {
      "question_id": "33",
      "model_score": 19.6,
      "human_score": 0.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "infiltration and surface runoff"
    },
    {
      "question_id": "105",
      "model_score": 1.9,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " Text:\nTo Do"
    },
    {
      "question_id": "65",
      "model_score": 69.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) keeping all the declaration together helps the programmer keep track of all the member functions he has introduced and what is left to be done. it also helps some other person trying to understand the code that what are the all properties/ functions of the object. \n2) it it easier to make changes to code later on as it does not change anything in the main part where declarations are made. reduce the chance for typos. \n3) the member functions may use other functions declared. by first declaring all the function we can avoid the error: function was not declared in the scope etc. \n"
    },
    {
      "question_id": "39",
      "model_score": 92.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse, read end -> fd[0] cannot interchange write end -> fd[1]\n"
    },
    {
      "question_id": "8",
      "model_score": 93.1,
      "human_score": 2.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1 was not likely a leader in any of the term as he has logs missing in every term so far. N2 , N3 , N4 have every log of term3, term 2 and term 1 respectively"
    },
    {
      "question_id": "64",
      "model_score": 76.0,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petals: \nHue: wide range around 0 degrees. for rose petals red colour is the dominant one along with some dark shadows.\nSaturation: in the wide range from low to quite high. Lower because of the shadows, and high because of red colour. As red colour is a pure colour the saturation for red will be high.\nIntensity: Towards low side (0-0.45). Again low because of dark pixels and around .3-.4 because of red pixels, that is it will have mostly red values and other values to zeros that just means that intensity will be low.\n\nIf we were to ignore the dark shadows, we can put a narrow range in all the three values (H: around 0, S: around 1 and I around .33)"
    },
    {
      "question_id": "10",
      "model_score": 69.7,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "Low priority task gets scheduled before a higher priority task"
    },
    {
      "question_id": "28",
      "model_score": 53.4,
      "human_score": 1.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "it will be more sense ful to use intersection and union operation with regularisation because it will handle less dimensional object, like if we are oper"
    },
    {
      "question_id": "86",
      "model_score": 78.7,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "it is easier to perform operations such as reflection, rotation, translation and scaling because you can write them in a compact matrix form which can be easily multiplied with the vectors. rotation and translation can be captured in the same matrix "
    },
    {
      "question_id": "40",
      "model_score": 30.9,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nAns) True, because fd[0] was created a step before fd[1] and will be filled before, so fd[1] can read fd[0], but not vice-versa.\n"
    },
    {
      "question_id": "78",
      "model_score": 97.0,
      "human_score": 2.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "Storage plant\nCascade plant\nPumped storage plant and run-of-river plant"
    },
    {
      "question_id": "45",
      "model_score": 70.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTRUE. It can only be done by OS. \n"
    },
    {
      "question_id": "65",
      "model_score": 75.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) It improves the readability of the code.\n2) The creator of the code can hide the implementation from the user by this technique. He can write the declarations in a header file and the implementations in a .cpp file. Then compile the .cpp file to create an object module (.o file). Then, the user can use all of the functionality using object module and header file without getting into the intricacies of the code."
    },
    {
      "question_id": "64",
      "model_score": 29.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360 for H"
    },
    {
      "question_id": "64",
      "model_score": 78.1,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A broader range around 0/360 degrees in H such that all red color is covered. This range has to be found empirically. This is done as rose petals are red in color and red color can be easily segmented in hue space.\n\nIn addition to this, a high saturation threshold near 1 might have to be applied if the above alone doesn't work. "
    },
    {
      "question_id": "69",
      "model_score": 77.8,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "it is the life of reservoir in which it serves the purpose of the reservoir and the capacity of the reservoir has not reduced(by silting) much."
    },
    {
      "question_id": "47",
      "model_score": 90.4,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "TRUE. Using a blocker like wait(), the parent process can terminate after exec."
    },
    {
      "question_id": "104",
      "model_score": 57.2,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " * Change data and memory of another process - This is prevented by the OS by providing a mapping from dummy virtual addresses to independent physical addresses (keeping memory of different processes separated).\n* Updating the IDTR - Interrupt Descriptor Table Register - This is a kernel mode operation not allowed to be performed in user mode\n* Updating the PIT - Programmable Interval Timer Register - This is also a dedicated kernel mode operation only.\n* Disabling Interrupts - The OS alone can do this and no user process is allowed to\n* Performing I/O operations - This is also a kernel mode operation and only the OS, not user, can perform I/O"
    },
    {
      "question_id": "49",
      "model_score": 35.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, if the execution is due to fork syscall, then the processes may share PCB but they are just executed simultaneously, they have their own PCR's."
    },
    {
      "question_id": "33",
      "model_score": 85.7,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "through fall, stem flow"
    },
    {
      "question_id": "48",
      "model_score": 68.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. we can use exec system call. As pid for parent remains same, child is still a 'child' of old process executing process (i.e. parent )"
    },
    {
      "question_id": "40",
      "model_score": 85.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "A: True, pipe can be used to send data in only one direction. fd[0] has similar functionality of STDIN & fd[1] acts like STDOUT."
    },
    {
      "question_id": "48",
      "model_score": 59.8,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "FALSE. exec syscall is basically what it does is switch the current context to the provided command in args, and after completion, it just terminates without returning from main. This doesn't affect child process because, once we forked, there are two parallel processes running on its own."
    },
    {
      "question_id": "46",
      "model_score": 61.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTRUE, any interrupt to OS, so OS can schedule other process. But this increases the overhead on the processor. For example, the proc might be stuck in a loop forever."
    },
    {
      "question_id": "65",
      "model_score": 76.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) It seperates the actual implementation of the class, making it understandable better like which member functions are present along with a brief description about them. \n2) It makes it easier for an outsider to read and make changes in the code or add some new member functions if required. "
    },
    {
      "question_id": "84",
      "model_score": 34.6,
      "human_score": 0.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "Since XOR in linearly separable data both MLP and perceptron will be able to correctly classify the boundary with 100% accuracy.  So there won't be any difference in performance. the only difference will be computational time between them."
    },
    {
      "question_id": "98",
      "model_score": 48.5,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "thermal stability, low coefficient of friction"
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True It update TLB cache.\nFirst searches for mapping\nIf not found -> updates\nvra walkpgtbl. but not allocate.\nAns. False. It has to search vra walkpgtbl."
    },
    {
      "question_id": "63",
      "model_score": 66.5,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "create a saturation mask, with saturation above a certain threshold for S to eliminate grayish colors (maybe 0.2, could be lower). multiply with original image to get regions where the stem and leaves could be. now create a hue mask from this image, with a narrow band in H centered around 120 degrees (green) or the natural shade of green in leaves. multiply the mask with the original image to get the leaves and stems."
    },
    {
      "question_id": "49",
      "model_score": 86.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, when same program is instantiated more than once, it creates multiple processes and each process will be having its own PCB even though from same program, because the changes in one process shouldn't affect the original program or other process of same program."
    },
    {
      "question_id": "63",
      "model_score": 40.7,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Bandpass filter with range [120      ,240      ] for H, I around 0.3-0.5, S almost equal to 1."
    },
    {
      "question_id": "89",
      "model_score": 47.1,
      "human_score": 0.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "Time Area Methods are mainly used"
    },
    {
      "question_id": "106",
      "model_score": 68.1,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " The trap/interrupt handler is not something specific to a process, but a property of the OS. So a child process also has the same trap/interrupt handlers as the parent process.\nIt returns from kernel mode to the user mode, and returns using the same return path as the parent called.\nBut if we're talking about how one child process returns from kernel mode (when invoked by a fork()), then it is a bit tricky, since the child process was just created and it doesn't make a system call on any other trap, so it's return path will also change."
    },
    {
      "question_id": "94",
      "model_score": 88.7,
      "human_score": 2.0,
      "question": "Why for an asymmetric variable, median is the best measure of central tendency?",
      "instructor_answer": "because around median 50 percent of the distribution is on the left and 50 percent is on the right , so in case of asymmetrial distribution where it is skewed, median will be the best measure of central tendency as mean in case of assymetrical distribution is not accurate measure of central tendency",
      "student_answer": "Since mean would be biased towards the direction of the skew/asymmetry, we use median as central tendency since median is relatively unaffected by asymmetry of distribution since its the point where the PDF is divided into two regions of equal weight. Also, for a given sample, median is much less sensitive to outliers as compared to the mean and can be a better estimator especially in the asymmetric case. "
    },
    {
      "question_id": "65",
      "model_score": 67.8,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Interface can be observed in one go\n2. Internal working can be easily modified without changing class definition everywhere."
    },
    {
      "question_id": "80",
      "model_score": 35.4,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "properties symmetric about 2 orthogonal planes"
    },
    {
      "question_id": "7",
      "model_score": 34.1,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "Riping off the topmost finest layer with biological outgrowth\nAnd puting a n"
    },
    {
      "question_id": "100",
      "model_score": 41.0,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "1. Depending Mixing ratio the MRR could increase and then decrease\n2. Not very specific in the shaping process"
    },
    {
      "question_id": "56",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "Unbiased, Consistency, Efficiency and Sufficiency "
    },
    {
      "question_id": "52",
      "model_score": 37.4,
      "human_score": 0.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a measure of force applied per unit area"
    },
    {
      "question_id": "80",
      "model_score": 54.1,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "material properties differ in 3 orthogonal direction"
    },
    {
      "question_id": "49",
      "model_score": 61.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": " False: A process in an independent entity, and must have adjacent PCB. So even when a single executable is used to instantiate multiple processes (using fork()), each process must have their own PCB."
    },
    {
      "question_id": "64",
      "model_score": 47.7,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Consider H in narrow range around 0. For example 0 to 5 degree and 355 to 360 degree."
    },
    {
      "question_id": "85",
      "model_score": 91.5,
      "human_score": 2.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "It makes no distinction between horizontal and vertical creep"
    },
    {
      "question_id": "65",
      "model_score": 57.9,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Seperating Definition from declaration can be used in cases like virtual functions where a function is declared in parent class and it is defined in subclasses as we have done in the labs\n\n2)Seperating Definition from declaration\nalso makes the readability and indentation of code easy\n\n3) It also helps us to find out which class the function belongs to"
    },
    {
      "question_id": "27",
      "model_score": 41.7,
      "human_score": 2.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "1.cutting objects  2.surgery"
    },
    {
      "question_id": "45",
      "model_score": 33.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "False, If we know PID of target process we can schedule the process next on CPU using commands or through bash script."
    },
    {
      "question_id": "27",
      "model_score": 89.8,
      "human_score": 2.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "Two uses of laser are \n1) Eye Surgery (LASIK)\n2) Laser Cutting Technology"
    },
    {
      "question_id": "20",
      "model_score": 81.1,
      "human_score": 0.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "A stream with limited base flow is known as intermittent stream whereas a stream which has no base flows is called as ephemeral stream."
    },
    {
      "question_id": "73",
      "model_score": 59.6,
      "human_score": 2.0,
      "question": "What are the important details that have to be known prior for reservoir routing?",
      "instructor_answer": "storage volm vs elevation of reservoir\ninflow hydrograph \nwater surface elevation vs outflow\ninitial values of S,I and Q at t=0",
      "student_answer": "elevation(stage), storage \noutflow(discharge)\ntype of reservou\nelevation vs discharge curve is drawn\nelevation vs (2S/         t+Q) \n"
    },
    {
      "question_id": "86",
      "model_score": 37.5,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "by using homogeneous co-ordinate we can easily convert it to matrix form to calculate easily."
    },
    {
      "question_id": "63",
      "model_score": 99.5,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, the saturation is low as the green color is not very pure."
    },
    {
      "question_id": "75",
      "model_score": 36.9,
      "human_score": 0.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "uses the hydrogical spatially lumped from continuing equation \nused for channel routing\n"
    },
    {
      "question_id": "62",
      "model_score": 59.0,
      "human_score": 2.0,
      "question": "To reduce spatial and temporal water availability problems ----------- and ----------- are constructed",
      "instructor_answer": "dams & reservoir/canals",
      "student_answer": "Dams and weirs or dams and barrages"
    },
    {
      "question_id": "64",
      "model_score": 61.1,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "In HSI model, intensity of red is low so it is between 0 and 1 but somewhat closer to 0 as compared to 1. Also here in the lower part of rose petals some black portion is present which also has low intensity. \nSaturation is the purity of colour and as by looking at this image, it looks like it has high saturation because this red colour does not contain gray component, hence it looks pure.\nHue is 0 degree for pure red colour, here hue must be close to 0 degree. "
    },
    {
      "question_id": "9",
      "model_score": 96.4,
      "human_score": 2.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "WACC (Discount Rate), \nPerpetual Growth Rate(g)"
    },
    {
      "question_id": "47",
      "model_score": 42.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "False. The exec call can be used in child."
    },
    {
      "question_id": "99",
      "model_score": 43.5,
      "human_score": 2.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "Higher cost, low output"
    },
    {
      "question_id": "56",
      "model_score": 98.5,
      "human_score": 2.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "Unbiasedness, consistency, efficiency, sufficiency"
    },
    {
      "question_id": "66",
      "model_score": 71.9,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "Based on market and quick & convenient"
    },
    {
      "question_id": "105",
      "model_score": 72.1,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, on lazy allocation, the OS does everything as stated above but executes the current instruction only, otherwise we loose functionality of program in the process"
    },
    {
      "question_id": "49",
      "model_score": 90.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Although the processes may be instantiated from one program, every different process is bound to have its own PCB."
    },
    {
      "question_id": "36",
      "model_score": 28.5,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1. increase in population due to birth rate increase \n2. decrease in population due to deaths\n3. increase in population due to migration \n4. decrease in population due to migration "
    },
    {
      "question_id": "45",
      "model_score": 55.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue, in case of exec the executed process id changed into the target process, but os sched does not initiate the process."
    },
    {
      "question_id": "93",
      "model_score": 17.0,
      "human_score": 0.0,
      "question": "Which statistical parameter influences the PMP estimation at large ------",
      "instructor_answer": "Maximum average annual precipitation and standard deviation of it",
      "student_answer": "variance,mean pressure,K"
    },
    {
      "question_id": "106",
      "model_score": 50.0,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " Inside the parent process, the child process's heap or return path consists of\n\nwithin the parent process as code while calling fork(). Or heap frame of the child process is modified.\n\nthe parent's memory space is copied onto the child, so it will also get the same heap frame, which is later modified within fork()."
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True, above described mechanism defines the lazy allocation policy. However, the code to handle the page fault should be present inside the trap function of the OS.\nFalse, the OS handles the page fault given the implementation of this handling; however, it executes some instruction allows and not in the next boundary."
    },
    {
      "question_id": "44",
      "model_score": 76.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFALSE. It is possible to do so when all the processes volunteering to give up CPU for non-preemption are using the sched_yield system call. But leaving in non-robust might not allow other processes to run.\n"
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "constant capital structure"
    },
    {
      "question_id": "97",
      "model_score": 96.4,
      "human_score": 2.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "depth of cut, hardness of workpiece"
    },
    {
      "question_id": "14",
      "model_score": 98.0,
      "human_score": 2.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "difference between its kurtosis coefficient and kurtosis coefficient of the normal distribution"
    },
    {
      "question_id": "64",
      "model_score": 11.5,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A narrow range of I centre"
    },
    {
      "question_id": "69",
      "model_score": 85.3,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "Usable life of reservoir is time period in that dam is fulfilling atleast one requirement."
    },
    {
      "question_id": "47",
      "model_score": 40.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "TRUE, in this case the child may be assigned a new parent process and exec call in parent process may not be executed since the child was not in user mode it doesn't have privileges to perform context switching."
    },
    {
      "question_id": "39",
      "model_score": 26.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "**True**, as file descriptors can always be duped."
    },
    {
      "question_id": "49",
      "model_score": 85.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "                         False, It allocates new PCB to new process as it could be executed with different parent process & have different instruction is running at same time."
    },
    {
      "question_id": "19",
      "model_score": 74.1,
      "human_score": 1.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "This state was used when the bot reaches any node. The bot use the path planning algo here to decide in which direction it has to go next. If there is no blockade then it follows the path, otherwise, it decide the next possible direction to go. "
    },
    {
      "question_id": "87",
      "model_score": 61.7,
      "human_score": 0.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "formation of microorganism colonies in the filter which feed on other pathogenic microorganisms"
    },
    {
      "question_id": "40",
      "model_score": 37.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue, writes using fd[0] can be read using fd[1] but not vice-versa. "
    },
    {
      "question_id": "64",
      "model_score": 53.5,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "In HSI model, intensity of red is low so it is between 0 and 1 but somewhat closer to 0 as compared to 1. Al\nSaturation is the purity of colour and as by looking at this image, it looks like it has high saturation because this red colour does not contain gray component, hence it looks pure.\nHue is 0 degree for pure red colour. "
    },
    {
      "question_id": "79",
      "model_score": 17.4,
      "human_score": 0.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "it is based on dalton type equation\nE=Kf(u) (ew-ea) "
    },
    {
      "question_id": "46",
      "model_score": 35.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTRUE\nIn this case OS simply has to wait till a process has finished in order to schedule another process. \n"
    },
    {
      "question_id": "63",
      "model_score": 34.3,
      "human_score": 0.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "The stem and leaves are green, so we take a filter which filters out only those v"
    },
    {
      "question_id": "40",
      "model_score": 89.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTRUE \nWhen pipe() is called, it creates two file descriptors fd[0] and fd[1]. fd[0] is used to read from and fd[1] is used to write to the pipe.\n"
    },
    {
      "question_id": "63",
      "model_score": 76.8,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "For green leaves hue in narrow range around 120 degrees and intensity in broad range centere"
    },
    {
      "question_id": "105",
      "model_score": 77.2,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, It goes back to instruction which gave pagefault and starts executing from that instruction as the instruction is not executed due to OS lazy policy."
    },
    {
      "question_id": "46",
      "model_score": 50.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTRUE, how the processes should be cooperatively, orcpu can also schedule other process during a blocking syscall/interrupt."
    },
    {
      "question_id": "65",
      "model_score": 63.1,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "* Definition of the function can be varied according to the user's need.If it is defined in the first place itself, user might face some difficulties.\n* Code looks elegant and it will be easy to debug,read, change etc."
    },
    {
      "question_id": "72",
      "model_score": 8.9,
      "human_score": 0.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "For different land classes ( eg: vegetation , urban, ocean, soil ) different quantization tables needs to be installed in the sensor."
    },
    {
      "question_id": "56",
      "model_score": 96.5,
      "human_score": 2.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbiased, consistency, sufficiency, efficiency"
    },
    {
      "question_id": "45",
      "model_score": 38.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "True. 'Scheduling is basically a privileged level (OS privilege) & hence user process can initiate a context switch & schedule the target process...otherwise there may be cases of bigger programs, cache problems, etc.'"
    },
    {
      "question_id": "66",
      "model_score": 39.6,
      "human_score": 1.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "based on actual market transaction and account for competitor peers"
    },
    {
      "question_id": "78",
      "model_score": 85.0,
      "human_score": 2.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "Runoff-river river plant\nStorage plant\nCascade plant\nPumped storage plant"
    },
    {
      "question_id": "63",
      "model_score": 60.6,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Green colour has high intensity but this is not fully green at all parts. It is shadowed at some parts so some dark portion is present which lowers its intensity to some extent.\nHue for gr"
    },
    {
      "question_id": "46",
      "model_score": 72.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nKinda True, the OS regains control on other interrupts (hardware and SW) and it may schedule then. But this is not guaranteed to happen.\n"
    },
    {
      "question_id": "65",
      "model_score": 65.7,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)It increases the readability of the program.We are able to define the function outside the class which enhances the code quality as one can first see what all functionality does class provide/ what is it's interface.\n2)It tells the compiler about the signature(arguments) of the function first. So it will show some error if we use the wrong signature while defining it which happens sometimes due to programmer's mistake.\n3) virtual declaration and not defining the function allows us to make abstract class which comes in handy while doing dynamic binding."
    },
    {
      "question_id": "64",
      "model_score": 82.4,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H : a narrow band around 0 degrees. 0 degree corresponds to Red Hue and since there is no other Red body in the picture, hue should be a narrow band around 0 degrees. \n\nS : Since the red is not pure due to shadow, the saturation needs to be a wide band like 0.3 to 1, i.e. a wide band centred at a little above 0.5 so that the petals remain close to red saturation. \n\nI : Due to shadow of rose petals, the red is darker in some patterns, also in some portions, it is bright. So intensity has to be a wide band centred at 0.5, like 0.15 to 0.85\n\n"
    },
    {
      "question_id": "87",
      "model_score": 59.4,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "formation of biological layer called Schumtzdecke takes place in SSF"
    },
    {
      "question_id": "44",
      "model_score": 16.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse.\n"
    },
    {
      "question_id": "10",
      "model_score": 25.5,
      "human_score": 1.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "Priority inversion is the solution to a live lock kind situation in which higher priority task is assigned some lower priority task's priority for some amount of time and after it they both are assigned their original priorities."
    },
    {
      "question_id": "74",
      "model_score": 63.0,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "Issues that arise are:  Training becomes slow. If training data is small, then the model doesn't generalize well. Also overfitting occurs,"
    },
    {
      "question_id": "87",
      "model_score": 93.9,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "bio filtration ie allowing the microorganisms to form and a thin layer on the sand (schmutzdecke) and allowing to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter"
    },
    {
      "question_id": "97",
      "model_score": 23.4,
      "human_score": 1.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "Workpiece Surface Inclusions/Deformities, Stiffness of the Machine "
    },
    {
      "question_id": "44",
      "model_score": 33.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "True. Reason: Without timer interrupt, OS has no way to know when to switch processes. Hence, it can't schedule READY processes and share CPU for multitasking."
    },
    {
      "question_id": "7",
      "model_score": 37.2,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "Removing top few centimeters of sand filter"
    },
    {
      "question_id": "1",
      "model_score": 22.0,
      "human_score": 0.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "company will be operating for long term and sustainable growth rate"
    },
    {
      "question_id": "43",
      "model_score": 35.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse. If there is an infinite loop then other normal process will never get a chance to run. So normally OS reschedules it immediately.\n"
    },
    {
      "question_id": "64",
      "model_score": 77.7,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue a narrow range around 0 eg)-15 to 15\nFor I a Broad range around 0.35( As pure color has intensity near to 0.33).\nFor saturation, the rose petals are natural images with high content of red so it should be a broad range around 0.8\ni.e. 0.7-1.0"
    },
    {
      "question_id": "75",
      "model_score": 26.4,
      "human_score": 1.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "The sum of muskigham parameter is 1\nprismatic storage is constant\nwedge storage is varriying\nS=f(Q)\nQ=f(h)"
    },
    {
      "question_id": "62",
      "model_score": 56.3,
      "human_score": 1.0,
      "question": "To reduce spatial and temporal water availability problems ----------- and ----------- are constructed",
      "instructor_answer": "dams & reservoir/canals",
      "student_answer": "large, medium and small reservoirs"
    },
    {
      "question_id": "47",
      "model_score": 88.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "TRUE. Exec system call can be used in the parent process before the child terminates because now child and parent are 2 different processes. It doesn't effect."
    },
    {
      "question_id": "28",
      "model_score": 51.9,
      "human_score": 1.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "Helps in eliminating lower dimensional features, as regular sets are closed under regularised Boolean set operations"
    },
    {
      "question_id": "30",
      "model_score": 98.9,
      "human_score": 2.0,
      "question": "If there is one explanatory variable, regression analysis is termed as (                                                               )       else it is termed as (                                                                             )",
      "instructor_answer": "Univariate and Multivariate",
      "student_answer": "Univariate, Multivariate "
    },
    {
      "question_id": "41",
      "model_score": 50.1,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\n **True**, it depends on the process' priority order."
    },
    {
      "question_id": "61",
      "model_score": 69.5,
      "human_score": 2.0,
      "question": "Three key principles of ISO series are                                             .,                                                                                                                              ...and                                                                                  .      ",
      "instructor_answer": "Consensus , Industrial wide applicability and Voluntary Nature",
      "student_answer": "a) Consensus\nb)Industrial norms and standards that is applicable worldwide\nc) Voluntary sector"
    },
    {
      "question_id": "62",
      "model_score": 66.9,
      "human_score": 2.0,
      "question": "To reduce spatial and temporal water availability problems ----------- and ----------- are constructed",
      "instructor_answer": "dams & reservoir/canals",
      "student_answer": "dams and drainage systems"
    },
    {
      "question_id": "32",
      "model_score": 88.7,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "it is provided when the natural slope of the country is steeper than the longitudinal slope provided in the irrigational channel."
    },
    {
      "question_id": "81",
      "model_score": 64.6,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "The variance of the projected data along that component is low. Thus this projection holds minimal value as data points do not deviate much along the axis."
    },
    {
      "question_id": "99",
      "model_score": 18.3,
      "human_score": 0.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "PVD operates relatively slow"
    },
    {
      "question_id": "58",
      "model_score": 63.5,
      "human_score": 2.0,
      "question": "The philosophies to define environmental management are                                                                                                            ",
      "instructor_answer": "Conservationism, Preservationism, Deep Ecology, Social Ecology",
      "student_answer": "Conservatism, Preservatism, Deep Ecology, Social Ecology"
    },
    {
      "question_id": "106",
      "model_score": 61.2,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " Return path -> go to kernel\nkernal stack pointer points to first stack of child process\nkernal instruction pointer points to first instruction of fork() of child process\n-> value of eax register of child process = 0\n->gpr moves from kernel mode to user mode.\n\nDuring fork(), the trap frame"
    },
    {
      "question_id": "97",
      "model_score": 57.3,
      "human_score": 1.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "Depth of cut, overhang, rotational frequency (omega)"
    },
    {
      "question_id": "41",
      "model_score": 2.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "TRUE"
    },
    {
      "question_id": "65",
      "model_score": 66.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)It increases the readability of the program.We are able to define the function outside the class which enhances the code quality as one can first see what all member functions exist inside the class.\n2)It tells the compiler about the signature(arguments) of the function first. So it will show some error if we use the wrong signature while defin"
    },
    {
      "question_id": "31",
      "model_score": 54.5,
      "human_score": 1.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "We can only use single discriminnant function for 2-class classification: g(x) >0 for class 1 and  g(x) <0  for class 2."
    },
    {
      "question_id": "9",
      "model_score": 94.8,
      "human_score": 2.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "WACC and Perpetual Growth Rate"
    },
    {
      "question_id": "41",
      "model_score": 82.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue. Scheduler will choose the immediate next process based on its scheduling policy, so may be different.\n"
    },
    {
      "question_id": "65",
      "model_score": 58.2,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Suppose we have a code of a 500 lines then without knowing exactly how many functions were there in this class, we would fell difficult to read it . \n2) Interface provides us an idea about membered functions and arguments they take in and also how many membered functions are there for a particular class.\n3) So, we can jump to implementation part to study a particular membered function.\n So, It is better to have interface and implementation parts\nIt alsoale"
    },
    {
      "question_id": "79",
      "model_score": 43.1,
      "human_score": 0.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "Equations whose basis is stochastic or probabilistic."
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "Constant capital structure"
    },
    {
      "question_id": "100",
      "model_score": 48.7,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "MRR is low, abrasive particle may stay inside the worlpiece"
    },
    {
      "question_id": "32",
      "model_score": 86.5,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "They are provided when natural slope of the country is steeper than the longitudinal slope that is provided in the irrigation channel"
    },
    {
      "question_id": "31",
      "model_score": 34.8,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "The discriminant function should output one-hot encoded values for the multiclass classification"
    },
    {
      "question_id": "64",
      "model_score": 29.8,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H : Around 45 degrees\nS : Around 1 with small deviations\nI: Can vary in [0.5,1]"
    },
    {
      "question_id": "64",
      "model_score": 67.6,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue Angle for red is zero degrees. Hence, a narrow range of 0/360 degrees for H. For S, we need somewhat high value of saturation, since among R,G,B we have less color content of G and  B, whereas more color content of R. And lower narrow range of I around 0.3-0.4."
    },
    {
      "question_id": "72",
      "model_score": 41.9,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "The problem is that space aircrafts take a very high resolution image but we to compress the image and then send it to the earth due to downlink bandwidth limitation."
    },
    {
      "question_id": "7",
      "model_score": 64.5,
      "human_score": 2.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "It is done when a maximum head loss is reached. The top few centimeters (1-2) of the schmutzdecke (filter layer) is scrapped off. This has to be done quickly to prevent interference with the biological layer. To be done once a month at most."
    },
    {
      "question_id": "25",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Full form of ELISA is ____________________.",
      "instructor_answer": "Enzyme linked immunosorbent assay",
      "student_answer": "Enzyme linked immunosorbent assay"
    },
    {
      "question_id": "44",
      "model_score": 28.9,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse, the timer interrupt also serves as a mechanism by which OS keeps track of its time. So if it is not there, OS does not know about time & can't do multitasking.\n"
    },
    {
      "question_id": "66",
      "model_score": 45.0,
      "human_score": 1.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "quick and convenient, and relativity"
    },
    {
      "question_id": "85",
      "model_score": 85.3,
      "human_score": 2.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "no distinction between horizontal and vertical creep"
    },
    {
      "question_id": "97",
      "model_score": 20.9,
      "human_score": 0.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "Amplitude and tool shape"
    },
    {
      "question_id": "46",
      "model_score": 64.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "**True**, if the processes are initiate signals or initiate interrupts, the OS can take over and perform scheduling."
    },
    {
      "question_id": "64",
      "model_score": 81.8,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0 degrees for H\nmost of the rose petals are red in colour so in HSI space, they will be around 0 degrees for H"
    },
    {
      "question_id": "76",
      "model_score": 8.1,
      "human_score": 0.0,
      "question": "What are the two important aspects of reservoir routing under a flood control criterion?",
      "instructor_answer": "peak discharge reduced and\n peak flow gets shifted",
      "student_answer": "1.In Reservoir routing the storage is a function of outflow discharge not Inflow.\nie S= f(I). \n\n2. For linear Reservoir , Q= K*S ,( here X=0)"
    },
    {
      "question_id": "72",
      "model_score": 30.7,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "The quantization step in image compression Produces the biggest compression , but it is also lossy in nature.  it is very important to find a quantization table that achieves decent compression without affecting the quality."
    },
    {
      "question_id": "44",
      "model_score": 89.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "False, during system calls, the OS can still schedule READY processes."
    },
    {
      "question_id": "46",
      "model_score": 86.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "True, there are other interrupts (like external I/O) that OS can use for rescheduling."
    },
    {
      "question_id": "7",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed."
    },
    {
      "question_id": "37",
      "model_score": 93.3,
      "human_score": 2.0,
      "question": "Negative electrode used in Nickel         MH Batteries are _____________.",
      "instructor_answer": "Hydrogen absorbing alloys (MH)",
      "student_answer": "hydrogen-absorbing alloy , metal hydride,"
    },
    {
      "question_id": "84",
      "model_score": 81.8,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "It single layer perceptron classifier will not he able to classify the XOR problem as it requires two linear classification function. A multilayer perceptron classifier will be able classify it appropriately as it can learn more about the data using an apparently non-linear classifier."
    },
    {
      "question_id": "51",
      "model_score": 76.5,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "imperfection in crystal structure, adsorption of ions onto particle surface"
    },
    {
      "question_id": "78",
      "model_score": 92.6,
      "human_score": 1.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "runoff river, storage, cascade, pumped storage plant"
    },
    {
      "question_id": "42",
      "model_score": 11.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFALSE"
    },
    {
      "question_id": "43",
      "model_score": 31.9,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse. Some interrupts may lead to process termination as well.\n"
    },
    {
      "question_id": "85",
      "model_score": 35.8,
      "human_score": 1.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "losses of head does not take place in the same proportion as the creep length, also the uplift pressure is not linear."
    },
    {
      "question_id": "7",
      "model_score": 63.8,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "1.scraping of surface layer \n2.washing surface sand "
    },
    {
      "question_id": "79",
      "model_score": 58.4,
      "human_score": 0.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "Meyer's formula and Rohwer's formula. It is a formula derived from experiment. Equations available to estimate evaporation of water body using meterological data."
    },
    {
      "question_id": "64",
      "model_score": 77.0,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H : a narrow band around 0 degrees. 0 degree corresponds to Red Hue and since there is no other Red body in the picture, hue should be a narrow band around 0 degrees. \n\nS : Since the red is not pure due to shadow, the saturation needs to be a wide band like 0.5 to 1, i.e. a broad range centred at 0.75 so that the petals remain close to red saturation. \n\nI : Due to shadow of rose petals, the red is darker in some patterns, also in some portions, it is bright. So intensity has to be a wide band centred at 0.5.\n\n"
    },
    {
      "question_id": "53",
      "model_score": 61.4,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "If the roads are to be put in different categories, we may use different texture features such as edge/gradient image, contrast and co-occurance matrix."
    },
    {
      "question_id": "40",
      "model_score": 43.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTRUE. A pipe works only in \"one way\". It has a read end (fd[0]) and a write end (fd[1]). Writes using fd[0] can be read using fd[0] (read end of pipe).\n"
    },
    {
      "question_id": "53",
      "model_score": 52.7,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "As the image resolution is high so alll the available features may be good visible. All the builings should be taken into consideration. If the building are there than there should be roads nearby. Hence roads are categorized they may chances shadow of buildings and roads can merge so by seeing high resolution image we can classify the the road from each other."
    },
    {
      "question_id": "104",
      "model_score": 18.5,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " (a) Opening a file whose permissions require kernel mode of operation to open.\n(b) Trying to modify memory which is read only (PGFAULT)              Exception raised."
    },
    {
      "question_id": "41",
      "model_score": 82.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "TRUE. OS can schedule some other process upon returning from handler."
    },
    {
      "question_id": "97",
      "model_score": 14.6,
      "human_score": 0.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "the rate of impact, frequency, "
    },
    {
      "question_id": "48",
      "model_score": 14.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False."
    },
    {
      "question_id": "106",
      "model_score": 74.6,
      "human_score": 2.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " The child process points to the next instruction in the process which has to be run i.e. after fork() is called. Thus, whenever the child is scheduled, it will start its execution from that particular instruction. If it just needs a return value to emulate as if it actually entered from the trap handle of the child then we can easily determine to give the next function everything from the cpu.\n\nThe cpu doesn't care about it actually switching or not. It just cares about what value is there in the eip and as it should have the return value, which we have entailed as above. Thus, whenever the child process is scheduled, it will just return the user mode from any other signals to handle (live from an interrupt) , it will just restore everything the input function onwards as if it had actually returned from the function. The child never exits from trap. It just emulates as it did and keeps on executing the next instruction as if everything was done perfectly."
    },
    {
      "question_id": "44",
      "model_score": 16.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse"
    },
    {
      "question_id": "49",
      "model_score": 18.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "Phase Five\n A binary program can instantiate & execute more than 1\n process simultaneously. Eg: A fork - And the resulting\n multiple processes are different & have diff PCS."
    },
    {
      "question_id": "32",
      "model_score": 89.3,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "When the natural slope is higher than the longitudinal slope in the canal irrigation"
    },
    {
      "question_id": "43",
      "model_score": 75.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse: IN interrupt handlers process may switch to another process without loss of any data as it's stored in PCB and kernel stack.\n"
    },
    {
      "question_id": "88",
      "model_score": 53.9,
      "human_score": 0.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "Its main function is to act as a buffer , to collect fluctuatini"
    },
    {
      "question_id": "65",
      "model_score": 69.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Makes the program easier to understand\n2. Makes the code more organized and cleaner"
    },
    {
      "question_id": "81",
      "model_score": 22.9,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "Dimensions can be reduced"
    },
    {
      "question_id": "65",
      "model_score": 44.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. functions can be defined later like we do for virtual functions in abstract classes. \n2. we can be override functions. "
    },
    {
      "question_id": "65",
      "model_score": 55.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) we can avoid problems with the one defination rule when our class/function are included in more than one place.\n\n2) by doing this way we separate interface and implementation.\n"
    },
    {
      "question_id": "64",
      "model_score": 62.0,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360 degrees for H to preserve the colour red"
    },
    {
      "question_id": "10",
      "model_score": 57.4,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "Low priority task gets scheduled first before a higher priority task"
    },
    {
      "question_id": "106",
      "model_score": 82.8,
      "human_score": 2.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "During fork the trapframe of parent process is copied into the child process except the return value in eax which is set to 0. Next the context of child is set of forkret. Hence when child is first executed it enters into kernel space as if it was executing forkret. When forkret returns the trapframe copied from parent is used from where it uses eip register which is the instruction pointer of parent copied. Hence child jumps into the user process with exact same state as that of parent except the return value which is 0."
    },
    {
      "question_id": "67",
      "model_score": 97.0,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "method of moments ; maximum likelihood"
    },
    {
      "question_id": "1",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "company's capital structure remains same over the projection period"
    },
    {
      "question_id": "49",
      "model_score": 87.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Each process has its own PCB, with different pid's."
    },
    {
      "question_id": "64",
      "model_score": 75.6,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360 degrees for H. Because petals are red in colour with a small mixture of other colours but the hue remains around 0 degree. Intensity can vary a lot depending on illumination and angle. Also as we can see in image, saturation for few petals is very low and for few it's very high. So we can't threshold using S or I. "
    },
    {
      "question_id": "47",
      "model_score": 85.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "True. Because once a child process is created it has its own resources like memory, stack etc & nothing happens to it even if parent process is changed or terminated."
    },
    {
      "question_id": "48",
      "model_score": 12.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "FALSE"
    },
    {
      "question_id": "48",
      "model_score": 7.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nTRUE"
    },
    {
      "question_id": "65",
      "model_score": 56.3,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.All member variables and functions of class can be viewed together which makes a mole neat looking and easy to understand class definition.\n2.Debugging member functions becomes easy"
    },
    {
      "question_id": "47",
      "model_score": 80.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "TRUE It can be used because after the fork the child can run irrespective without parent"
    },
    {
      "question_id": "65",
      "model_score": 81.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.better readability of the code\n2.one may want to implement the function differently in different"
    },
    {
      "question_id": "42",
      "model_score": 11.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFALSE"
    },
    {
      "question_id": "32",
      "model_score": 81.4,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "whenever available natural ground slope is steeper than designed bed slope of channel"
    },
    {
      "question_id": "73",
      "model_score": 79.2,
      "human_score": 2.0,
      "question": "What are the important details that have to be known prior for reservoir routing?",
      "instructor_answer": "storage volm vs elevation of reservoir\ninflow hydrograph \nwater surface elevation vs outflow\ninitial values of S,I and Q at t=0",
      "student_answer": "storage vs elevation of reservoir\ngauge vs elevation\ngauge vs outflow discharge\ninflow hydrograph\ninitial inflow, outflow, storage at time t=0"
    },
    {
      "question_id": "79",
      "model_score": 70.5,
      "human_score": 2.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "it is a mathematical equation whose free parameters are set according to the experimental data to obtain the formulas for predicting other related data about particular state."
    },
    {
      "question_id": "66",
      "model_score": 60.9,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "based on actual market transaction and ease of use"
    },
    {
      "question_id": "10",
      "model_score": 71.3,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "Task with a lower priority gets scheduled when a task with a higher priority is in ready state."
    },
    {
      "question_id": "65",
      "model_score": 62.4,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "To avoid problems when our class/function /whatever are included in more than one place. 2 to have a separate interface and implementation. Compilation speed. Avoiding code duplication"
    },
    {
      "question_id": "69",
      "model_score": 77.7,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "some limited purposes can be served by a reservoir even after expiry of its economic life. this indicates it's usable life."
    },
    {
      "question_id": "51",
      "model_score": 24.3,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "Adsorption of charge in"
    },
    {
      "question_id": "31",
      "model_score": 64.9,
      "human_score": 1.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "As a single discriminantt function commit classify a multiclass so there can be possibility that it may able to classify a single class from other It May be able to divide multiclasses into two groups depend on input."
    },
    {
      "question_id": "84",
      "model_score": 79.7,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "XOR Problem usually cannot be handled using only single perceptron classifier due to increased complexity in XOR as compared to OR, AND etc.  But can be handled / solved using multilayer perceptron classifier, hence the performance is better using mutilayer perceptron classifier"
    },
    {
      "question_id": "40",
      "model_score": 16.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nNo, because even in the two process there is security provided you cannot access it."
    },
    {
      "question_id": "104",
      "model_score": 76.8,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Disable Interrupts - It is a commonly executed instruction in kernel mode however if a user process tries to do this, it has to be restricted otherwise it may occupy the CPU indefinitely.\nAccess address above KERNBASE in VA space: Making changes in this VA space may change data required for kernel."
    },
    {
      "question_id": "18",
      "model_score": 75.7,
      "human_score": 2.0,
      "question": "Define trap efficiency of a reservoir and write down the factors affecting the trap efficiency",
      "instructor_answer": "It is defined an the ratio of deposited sediment to the total sediment inflow for given period within the reservoir economic life time.Factors affecting the trap efficiency: Diameter of silt particles, size and weight and type of debrais. Wind flow direction. Shape of the dam.Topography of the dam structure. Material of the dam.",
      "student_answer": "Trap efficiency of a reservoir is a function of ratio of reservoir capacity and total in flows. As the time passes rate of silting or rate of deposition of sediments reduces bet amount of sediments deposition will be increased which in turn reduces the capacity of a reservoir. Reservoir trap efficieny, is definied as the ratio of deposited and sediment to total sediment inflow for a given period within the reservoir. Factors affecting the trap efficiency are hydrocholic characteristics of reservoir and sediment characteristics a inflowing sediment. the hydraullic characteristics are Ratio of storage capacity to inflow rate, Reservoir shape, type of outlets and reservoir operations."
    },
    {
      "question_id": "104",
      "model_score": 27.1,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": "(i) Accessing a physical memory directly by the user is not allowed and is a privileged operation. If the user lets a variable pointer 'a'"
    },
    {
      "question_id": "63",
      "model_score": 75.7,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "a narrow range around 120(green hue) in hue, a wide range 0.5-1 in saturation and wide range centered at 0.3(to include darker pixels go for low intensity) in intensity"
    },
    {
      "question_id": "65",
      "model_score": 69.2,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) keeping all the declaration together helps the programmer keep track of all the member functions he has introduced and what is left to be done. it also helps some other person trying to understand the code that what are the all properties/ functions of the object. \n2) it it easier to make changes to code later on as it does not change anything in the main part where declarations are made. reduce the chance for typos. \n3) the member functions may use other functions that are declared. by first declaring all the function we can avoid the error: function was not declared in the scope etc. \n"
    },
    {
      "question_id": "49",
      "model_score": 26.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "Each path will have different RB Heats.\n For example - test.exe work.\n Runnable binary program can be executed in more than one process\n simultaneously by egroup calls in diff processes, ~ all PCB blocks."
    },
    {
      "question_id": "68",
      "model_score": 67.4,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "a multilayer perceptron neural network with multiple  hidden layers is desirable when the no. of features in a training set is large or when the classifier is not able to classify a new data set distinctly or it is classifying it incorrectly. or when training set can't be classified using linear perceptron."
    },
    {
      "question_id": "47",
      "model_score": 90.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue, parent process can use exec system call at any point of its execution and not just before the child process terminates."
    },
    {
      "question_id": "104",
      "model_score": 30.7,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) read/write from files. Without the OS, processes can read/write to files, which might be restricted.\n2) pagetable access restricted parts of memory (what as direct execution, no paging)\n3) change Accessing\n4) Changing kernel data like top table, bios ...\n5) changing kernel memory\n6) Invalid memory access: OS would have data fall handling, but in limited execution, process can access invalid mem.\n7) Access kernel memory. Cpu page (fault handling)"
    },
    {
      "question_id": "52",
      "model_score": 82.5,
      "human_score": 1.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a change in unit divided by the original unit"
    },
    {
      "question_id": "86",
      "model_score": 51.2,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "this allows the matrix to be xomputed efficiently"
    },
    {
      "question_id": "61",
      "model_score": 61.0,
      "human_score": 1.0,
      "question": "Three key principles of ISO series are                                             .,                                                                                                                              ...and                                                                                  .      ",
      "instructor_answer": "Consensus , Industrial wide applicability and Voluntary Nature",
      "student_answer": "1. Consideration of all parties 2. Self-motivating, not enforced 3- Applicable for all industries"
    },
    {
      "question_id": "15",
      "model_score": 57.5,
      "human_score": 1.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "meteorological drought is the predicted water crises condition by IMD It is predicted on the basis of various factors and rainfall pattern in the particular area"
    },
    {
      "question_id": "106",
      "model_score": 86.2,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " -> For returning from trap, for a child process which was created by fork? we create a syscall _forkret_. This syscall helps child to return and is made runnable process.\n-> When a parent forks, we see an interrupt and this passes to the trap handler.\n-> Trap handler identifies it as a syscall and hence go for executing a fork. syscall in kernel mode.\n-> In kernel mode, a new process is allocated and copy the contents of the parent process. Trap frame is also copied from parent to child process.\n-> Now, when sched is called, and if the child process is scheduled, we return from a syscall called _forkret_ and using the trapframe copied from above, child process can start executing from where parent has called fork.\n-> _forkret_ is kind of an implicit syscall used by kernel to make the child process return to user mode."
    },
    {
      "question_id": "79",
      "model_score": 77.8,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "these equations which are formed by empirical (experimental) data"
    },
    {
      "question_id": "41",
      "model_score": 89.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue.\nDuring the interrupt handling, schedulers or may not be re-scheduled immediately on completion of interrupt handling. Sometimes, it may not be re-scheduled immediately on completion of interrupt handler."
    },
    {
      "question_id": "63",
      "model_score": 17.9,
      "human_score": 0.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "To sample green leaves and"
    },
    {
      "question_id": "53",
      "model_score": 54.5,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "To put roads in a separate class, we can use features like intensities in different bands like Red, Green, Blue, NIR etc. AlSO we can use directional features of using neighbourhood to track the direction in which roads are present."
    },
    {
      "question_id": "27",
      "model_score": 45.7,
      "human_score": 1.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "1. In laser eye surgery\n2. In research work "
    },
    {
      "question_id": "78",
      "model_score": 94.2,
      "human_score": 2.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "Run-of-river plant, storage plant, cascade plant, pumped storage plant"
    },
    {
      "question_id": "40",
      "model_score": 2.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTRUE"
    },
    {
      "question_id": "79",
      "model_score": 8.7,
      "human_score": 0.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "water balance and micrometeorological measurements for areas Ca"
    },
    {
      "question_id": "77",
      "model_score": 35.6,
      "human_score": 1.0,
      "question": "What are the two important scales in Hydrology? ---------------------",
      "instructor_answer": "Availability of driking water, time scale, length of the process, spatial scale.",
      "student_answer": "spatial scale, temporal scale"
    },
    {
      "question_id": "106",
      "model_score": 77.0,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "During fork we also copy trapframe containing saved registers, next instruction pointer etc. So, when child process run after fork, it returns using return address in the trapframe and it's register & starts executing instruction at eip."
    },
    {
      "question_id": "47",
      "model_score": 35.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "TRUE - The child is similar to the process exiting before the child process. The child just turns orphaned until its assigned to another parent."
    },
    {
      "question_id": "42",
      "model_score": 73.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFALSE \nOnly the kernel has the ability to do context switching.\n"
    },
    {
      "question_id": "48",
      "model_score": 87.4,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFALSE: It can, the process since exec does not end the process and start a new one, it varies it is the same process which continues."
    },
    {
      "question_id": "105",
      "model_score": 35.6,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True. The page fault must be addressed before executing the next instruction."
    },
    {
      "question_id": "48",
      "model_score": 88.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse: After fork call has been made, the 2 processes function independently. Hence, an exec system call can be used to run a completely new process. But the pid of parent doesn't change."
    },
    {
      "question_id": "51",
      "model_score": 89.3,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1. Adsorption of ions onto the surface of colloidal particles\n2. Crystal imperfections- When silicon atoms are replaced by atoms with lower valency,  negative charges are in excess "
    },
    {
      "question_id": "28",
      "model_score": 38.9,
      "human_score": 1.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "it helps in eliminating the lower dimensional features (eg. isolated vertices)"
    },
    {
      "question_id": "40",
      "model_score": 87.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue: Pipe creates a unidirectional flow between the 2 file descriptors.\n"
    },
    {
      "question_id": "45",
      "model_score": 32.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\n **False**, a process can send a signal SIG_CONT to the target process indicating the OS to schedule the target process."
    },
    {
      "question_id": "106",
      "model_score": 48.4,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "At last of fork(), the child process was made to ready state, so when a timer interrupt comes calls yield the child process is scheduled and returns to the user mode."
    },
    {
      "question_id": "48",
      "model_score": 91.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "FALSE There is nothing preventing the parent process from calling exec before the child terminates. The parent process will simply be replaced by the new process supplied with exec."
    },
    {
      "question_id": "63",
      "model_score": 77.9,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Green colour has high intensity but this is not fully green at all parts. It is shadowed at some parts so some dark portion is present which lowers its intensity to some extent.\nHue for green is near to 120 degree, so in this case it will be close to 120 degree. \nSaturation is low because of presence of shadowed grayish region. \n"
    },
    {
      "question_id": "65",
      "model_score": 66.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "it gives a better idea what exactly the functions do and it is easier to know what all functions are there if the declaration is seperated from definition"
    },
    {
      "question_id": "104",
      "model_score": 47.2,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " i) Initiating an I/O request - A user process can request for an I/O device, but an actual procedure is allowed after the process enters kernel mode and gets privileged access.\n\nii) System Call - Via system call, a user process can perform privileged actions like getting information of no. of active processes in OS, memory information, etc., for ready"
    },
    {
      "question_id": "69",
      "model_score": 28.3,
      "human_score": 0.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "240 year( life of reservoir assumed 100 year)"
    },
    {
      "question_id": "49",
      "model_score": 56.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False: Each process is prog\n Each instance of the program is treated with as different process.\n We assign different pid and there is no reference count."
    },
    {
      "question_id": "104",
      "model_score": 60.8,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " User process executes an instruction to change the value of the privilege level register. This is prevented via LDE setup.\n\nUser trying to change the value of the timer register. This will lead to user process running full time on the CPU. This is prevented by LDE.\n\nUser trying to change the pgd register (CR3) to access memory of kernel / other pages. This is also prevented by LDE."
    },
    {
      "question_id": "44",
      "model_score": 59.8,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\n **False**, Without timer interrupt, OS has opportunity to schedule READY processes and share the CPU for multitasking. It can use context switch to information of process for multitasking. "
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "Constant Capital Structure"
    },
    {
      "question_id": "65",
      "model_score": 37.7,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1:Major advantage of separating declaration from definition is that it makes the block of the class smaller, because writing the description of the member functions make the class bigger.\n2:"
    },
    {
      "question_id": "68",
      "model_score": 68.6,
      "human_score": 1.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "multilayer perception with multiple hidden layers is sometimes needed for learning complex data and better generalisation (smaller layer will lead to overfitting)"
    },
    {
      "question_id": "40",
      "model_score": 83.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue. One file descriptor is for reading & other for writing. That's how this protocol defined.\n"
    },
    {
      "question_id": "105",
      "model_score": 14.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False -> True\nFalse -> It raises an error"
    },
    {
      "question_id": "103",
      "model_score": 79.6,
      "human_score": 2.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "It is inefficient as it has a low metal removal rate and is very expensive"
    },
    {
      "question_id": "47",
      "model_score": 90.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue.\nThe parent and the child can run independent processes after fork(). The exec can be called on parent and if it ends before the child, the child stays an orphan process."
    },
    {
      "question_id": "14",
      "model_score": 54.8,
      "human_score": 0.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "Kurtosis coefficient is related to 4th moment about mean"
    },
    {
      "question_id": "41",
      "model_score": 65.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "True. If any other process starts running while interrupt is being handled it have to wait."
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. It executes the current instruction with the updated page table."
    },
    {
      "question_id": "34",
      "model_score": 57.9,
      "human_score": 1.0,
      "question": "Key steps in anaerobic digestion process are                                                                                                                                                          .",
      "instructor_answer": "The four key stages of anaerobic digestion involve hydrolysis, acidogenesis, acetogenesis and methanogenesis.",
      "student_answer": "hydrolysis\nfermentation/acidogenesis\nmethanogenisis\n"
    },
    {
      "question_id": "36",
      "model_score": 51.3,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "Rainfall\nTempature\nEvaporarion Rates\npopulation growth"
    },
    {
      "question_id": "53",
      "model_score": 33.1,
      "human_score": 0.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "From a high resolution image of an Urban area, IF roards are to be put in different categories. Every building will have a road. Contextual based on pixel classification near building will be used,"
    },
    {
      "question_id": "44",
      "model_score": 33.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "True. OS knows about running and how much processes has ran and if terminated it cleans up PCB memory and assigns new process to CPU."
    },
    {
      "question_id": "83",
      "model_score": 99.9,
      "human_score": 2.0,
      "question": "What is the difference between basin order and channel order?",
      "instructor_answer": "Basin order is highest order of any stream in that basin whereas Channel order is order of stream\nwhich denotes that what order of streams has joined the channel.",
      "student_answer": "Basin order is highest order of any stream in that basin whereas Channel order is order of stream\nwhich denotes that what order of streams has joined the channel."
    },
    {
      "question_id": "40",
      "model_score": 80.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue. fd[0] is only created with read permission and fd[1] is only created with write permission so vice versa not possible.\n"
    },
    {
      "question_id": "39",
      "model_score": 3.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nTrue. Obviously."
    },
    {
      "question_id": "96",
      "model_score": 85.9,
      "human_score": 2.0,
      "question": "Why to test the level of significance in hydrological time series analysis and modeling? Which test will you use to test the level of significance?",
      "instructor_answer": "The test of level of significance is used to test how well our prediced model fits observed data (goodness of Fit test).It is important because it gives the prorbability of rejecting the null hypothesis using a statistical test. The chi-square (X2) test is used to test the level of significance.",
      "student_answer": "The teat of level of significance is used to test hows well our prediced model fits observed data (goodness of Fit test). For example 5% level of significance we mean to say that we are 95% confident that our predicted values will be within the allowable range. The chi-square (X2) test is used to test the level of significance."
    },
    {
      "question_id": "65",
      "model_score": 73.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) It keeps the body of the class less cluttered and neat\n2) By separating declarations and definitions, when a user of the abstraction looks at the body, he gets an idea of all the member functions(and their arguments) without worrying about the implementation part(how the function works is not his concern, he only uses the function)\n3)One more advantage is that, since all the member functions are declared , we can call one member function inside another member function(since both of them are already declared)"
    },
    {
      "question_id": "86",
      "model_score": 75.2,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "Using homogenous coordinates helps in simplification of calculations when there is a chain of transformations (translations, rotations, scalings etc.). Each of these transformations can be represented as a matrix T, and the resultant transformation will be the product of these individual transformation matrices."
    },
    {
      "question_id": "38",
      "model_score": 58.3,
      "human_score": 1.0,
      "question": "Open dumping of waste is a major practice in India. Two major environmental problems associated with are                                                                                                                                                                  ",
      "instructor_answer": "1.Leachate generation and mismanagement\n2.Release of GHGs due to anaerobic reactions\n3.Odour\n4.Insects and rodents infestation leading to public health issues",
      "student_answer": "1. Odour problems\n2. Air pollution problem"
    },
    {
      "question_id": "65",
      "model_score": 68.8,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)the module (be it function or member function)can be overridden depending upon situation in classes or inherited subclasses\n\n2)the module can be modified depending upon user and his requirement by defining namespace for his work \n\n3)makes program more readable and abstract , shows the interface in much more enhanced way , irrespective of the cumbersome and hard enforced nature of its implementations\n"
    },
    {
      "question_id": "103",
      "model_score": 57.2,
      "human_score": 2.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "expensive, high skill labour requirement, uses very high power as high power consumption "
    },
    {
      "question_id": "1",
      "model_score": 77.4,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "Debt to equity remain constant"
    },
    {
      "question_id": "14",
      "model_score": 53.3,
      "human_score": 0.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "Kurtosis is a measure of tail endness of pdf and it discribes the shape of pdf"
    },
    {
      "question_id": "31",
      "model_score": 21.5,
      "human_score": 1.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "Response of the Function Should be a Vector OF Number of elements equal to number of classes and ith element OF vector representing Probability OF that Pixel being ith class"
    },
    {
      "question_id": "27",
      "model_score": 51.1,
      "human_score": 1.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "To study properties of light and in medical purposes"
    },
    {
      "question_id": "65",
      "model_score": 47.4,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)declaring function first unables us to use the function elesewhere without thinking about its defination.\n2) an defination for the function can be provided according to where it is used.\n3) this als"
    },
    {
      "question_id": "105",
      "model_score": 18.8,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True Rather than allocates some fixed number of pages at the beginning the OS does them in a lazy way."
    },
    {
      "question_id": "6",
      "model_score": 20.0,
      "human_score": 1.0,
      "question": "Chi-square goodness of fit test evaluates the error between (                                                                                   ) and (                                                                                   )                    (                                                                     )",
      "instructor_answer": "Observed and assumed/Estimated PDF",
      "student_answer": "expected value , actual value"
    },
    {
      "question_id": "67",
      "model_score": 54.0,
      "human_score": 1.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "point blank , method of likelihood"
    },
    {
      "question_id": "52",
      "model_score": 99.8,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a ratio of change in the length and the original length."
    },
    {
      "question_id": "10",
      "model_score": 65.4,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "it is a concept in which a high priority process is preempted by low priority process"
    },
    {
      "question_id": "49",
      "model_score": 41.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False.\n An executable can instantiate only one process via a thread at a time."
    },
    {
      "question_id": "73",
      "model_score": 68.7,
      "human_score": 1.0,
      "question": "What are the important details that have to be known prior for reservoir routing?",
      "instructor_answer": "storage volm vs elevation of reservoir\ninflow hydrograph \nwater surface elevation vs outflow\ninitial values of S,I and Q at t=0",
      "student_answer": "Reservoir Routing - we find (2          S/         T + Q) Vs Elevation profile and then use Q Vs Elevation profile to find S and Q for given conditions. Thus we need Elevation Vs Q beforehand and need storage characteristics as well to find Q for next step/condition."
    },
    {
      "question_id": "39",
      "model_score": 88.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFALSE\nWrite can only be done using fd[1] (cannot write on fd[0])\nRead can only be done using fd[0] (cannot read on fd[1])"
    },
    {
      "question_id": "16",
      "model_score": 56.2,
      "human_score": 1.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "The presentation of data that show the signal observed by noise, the purpose of many time series models is to decompose the time series to understand the underlying trend. A time series is while noise if the variable are independent and identically distributed with a mean of zero."
    },
    {
      "question_id": "104",
      "model_score": 63.7,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. Execute instruction to update.\nThe os can update the lcr3 register through a privilege instruction on context switch. The user processes are not allowed to execute this instruction since this may allow them to access data outside their allocated space breaching isolation.\n2. Execute instruction to change privilege level.\nThe os can change privilege levels to ensure constraints on allowed actions. The user processes are not allowed to execute /prevented by CPU by raising an exception when they try in orders to prevent them from taking highest privilege and doing malicious activities.\n3. Execute instruction to setup IDTR.\nThe os can setup IDTR to allow hardware to jump to handler on exception. The user processes are prevented otherwise."
    },
    {
      "question_id": "105",
      "model_score": 5.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " 1. a: 4\n   b: 5\n   c: 6\n   d: 7"
    },
    {
      "question_id": "41",
      "model_score": 90.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "True. 'After the interrupt, the CPU goes into kernel state (in OS), Now after interrupt is handled, scheduler comes into play & decides(based on policies) which process to run next.'"
    },
    {
      "question_id": "36",
      "model_score": 78.4,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "Geographic location, climate conditions, extent of industrilisation , cost of water. "
    },
    {
      "question_id": "64",
      "model_score": 77.6,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Red colour information is mostly contained in hue and saturation denotes purity of red colour while intensity denotes the average grayness (or brightness) of pixel. Therefore as hue of red is about 0/360. H must be in a narrow range around 0/360 (say       10), S can more broad in range and centered about a higher value, say S can be centered around 0.65 and in range       0.35. I has average grayness information and as some part of petals are bright red while some more dark/gray red, range of I must be broad an it can be centered about 0.5 with range of       0.45."
    },
    {
      "question_id": "65",
      "model_score": 31.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. It makes the appearance of the class good\n b"
    },
    {
      "question_id": "86",
      "model_score": 61.6,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "It enables faster transformation for any \"n\" number of points simultaneously. It also helps to define tranl"
    },
    {
      "question_id": "32",
      "model_score": 86.2,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "slope of canal is less than slope of ground"
    },
    {
      "question_id": "85",
      "model_score": 27.8,
      "human_score": 0.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "the major drawback of Bligh         s creep theory is that it doesn         t consider the presence of anomalies in the ground which affect the creep \n"
    },
    {
      "question_id": "84",
      "model_score": 59.1,
      "human_score": 1.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "perceptron Classifier is not give proper output to XoR gate, while multilayer perceptron gives proper values."
    },
    {
      "question_id": "104",
      "model_score": 23.3,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " -> 1. Running forever on CPU.\n2. Read/write data from inappropriate location.\n\nIn first action as uses timer interrupt & gives CPU to other process.\nIn second action, OS either allocates this memory or kills the process by taking over the control of CPU."
    },
    {
      "question_id": "90",
      "model_score": 61.9,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "It can be case that classes are not linear seperable in the current feature space, but becomes linear separable in some higher dimension"
    },
    {
      "question_id": "79",
      "model_score": 33.0,
      "human_score": 2.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "The fundamental equations that are formulated theoretically without any mathematical proof"
    },
    {
      "question_id": "65",
      "model_score": 70.9,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Allows us to keep our code less cluttered. We want to have the class as a template, so that it gives us an idea about the components of the object. If all the functions are defined in the class body itself then the class block will have a lot of code and this would defeat the purpose of having class as a template.\n\n2) Makes the program understandable. Imagine you see the class block for class Shape. First you see declarations of functions in the class body, such as moveTo or resize. This would automatically give you a rough idea of what operations can be done on the object. Then after this if you want, you can look at the inner workings of these functions in the function definition outside the class body. This would make the program more organised and easy to read. "
    },
    {
      "question_id": "64",
      "model_score": 67.2,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Red color has hue around 0 degrees.  So a narrow range of H values around 0. Each rose has a wide range of red color. So saturation S can take broad range of values (anywhere from 0.5 to 1). Intensities also can take broad ranges since some parts are very dark and some are very bright. So intensity I can take broad ranges centred around 0?5. This works because there are no other objects which are red in color and this is handled well by Hue."
    },
    {
      "question_id": "105",
      "model_score": 36.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "-> False, as OS is using a lazy allocation policy, on a page fault, OS does not handles the page fault and directly executes the next instruction ( the one after the faulting instruction)."
    },
    {
      "question_id": "35",
      "model_score": 65.9,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "drip irrigation,manual irrigation,surface irrigation"
    },
    {
      "question_id": "81",
      "model_score": 72.3,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "lower eigen values in principal component transform suggest that this component has very littlle value. We can ignore the component. In other terms we can say the components with very low eigen values is very much correlated with other components."
    },
    {
      "question_id": "106",
      "model_score": 83.2,
      "human_score": 2.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When fork() creates the child process, it is almost identical to the parent process, but there are few changes. The pid of the child process, for instance, is different (from the parent) and this is because fork() explicitly populates the childs Pcb with a different process identifier. The context is also copied from the parent to the child. In the parent, the context has a return address pointer to trapret (in the kernel code). In the child however, for k c changes the return address pointer in the childs context to foribret instead (forpat is also in the kernel code). Upon returning to foribret (which is flagged just before trapint in kernel.a), the return values of the registers are loaded to 0 and then execution flows to trapret. \nThus, even though there was no trap in child process, as the parent's context is copied, the return address pointer from the child's context sends it to foribret which then reaches trapret which returns from trap."
    },
    {
      "question_id": "48",
      "model_score": 88.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nF. **False**. Once forked, the parent and child are two separate processes and exec system call can be used in either of them, none has to wait for the other."
    },
    {
      "question_id": "35",
      "model_score": 85.9,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Sprinkler irrigation method \nDrip irrigation method\nConventional drip irrigation method\nFlooding irrigation method\nFurrow irrigation method"
    },
    {
      "question_id": "40",
      "model_score": 2.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "TRUE"
    },
    {
      "question_id": "65",
      "model_score": 38.1,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) When we need variables other than just those in the class for definition of the function. \n2)In inheritance we can declare the class while implementation can be done from the sub-class. "
    },
    {
      "question_id": "66",
      "model_score": 49.0,
      "human_score": 1.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "actual market based data and relativity"
    },
    {
      "question_id": "88",
      "model_score": 68.9,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "stabilizes the fluctuations in supply of wastewater to WTP and brings uniformity in the sludge quantity of each batch"
    },
    {
      "question_id": "90",
      "model_score": 64.4,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "From classification point of View may be a linear discriminant function Can classify image after non linear transforming the feature Vectors , which may not be done before transformation. Because, the non liniarity may be captured in transformation"
    },
    {
      "question_id": "65",
      "model_score": 45.1,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Structured programming and possibility of declaring multiple times.\n2) Seperation of the abstraction's interface and implementation explicitly"
    },
    {
      "question_id": "40",
      "model_score": 84.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTRUE, a pipe call creates a unidirectional queue."
    },
    {
      "question_id": "88",
      "model_score": 36.9,
      "human_score": 0.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "The role of equalization tank is the sedimentation of suspended solids in waste water."
    },
    {
      "question_id": "7",
      "model_score": 34.7,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "Riping off the topmost finest layer with biological outgrowth(the finest layer) \n"
    },
    {
      "question_id": "23",
      "model_score": 97.6,
      "human_score": 2.0,
      "question": "Following forces are considered in Navier Stokes equation:",
      "instructor_answer": "pressure, gravitational force, viscous force",
      "student_answer": "gravity force , pressure force , viscous force"
    },
    {
      "question_id": "65",
      "model_score": 67.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The abstraction becomes more clearer. At a single glance at the class declaration, one can get an idea of the different functions and the arguments taken by the functions.\n\n2. In case we are working with two classes where both classes need access to each other's member functions, this technique is helpful.\n\nOnly declaring the class A and it's functions before class B and then defining the member functions of class A after class B's declaration is a good technique.\nThis allows functions of both classes to function properly and access/call each other's functions."
    },
    {
      "question_id": "41",
      "model_score": 65.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTRUE. During an interrupt, CPU runs in kernel mode. On completion of the interrupt handlers, OS does some scheduling to decide which process should run next.\n"
    },
    {
      "question_id": "47",
      "model_score": 78.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue, once fork() happens parent & child process both has a copy of parent memory. Thus, whenever fork() is called parent's memory is copied but it doesn't affect child because it is already copied."
    },
    {
      "question_id": "49",
      "model_score": 72.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Each instance of an executable will create a new process with separate PCB, memory (unless they are programmed to share memory). They run as separate unrelated processes. This is because 2 instances of same executable don't necessarily have to produce the same output/result but combining both processes into one, merging their PCBs, cannot assure that both instances will be identical which is always memory."
    },
    {
      "question_id": "41",
      "model_score": 86.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "True, for a pre-emptive process scheduler. (Interrupt could be on execution time reached burst limit)"
    },
    {
      "question_id": "31",
      "model_score": 47.9,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "For using single discriminant it should be such that if we input a feature vector. This should valid for all classes."
    },
    {
      "question_id": "106",
      "model_score": 64.3,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " * When fork is called, the registers of the parent process P, are copied onto C.\n* C's eip is set to the next instruction that is to be executed and is put in the correct register \n* So now when context form when eip is finally switched to C, it starts execution form where it was pointed. And hence behaves like its just a continuation.\n* fork() function handles this in Xv6."
    },
    {
      "question_id": "47",
      "model_score": 38.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\n\nTrue, the exec system call can be used in which case a new process is created on the parent process stack and parent process continues to execute. In case child process terminates before exec, new process, the child process is assigned a new parent process."
    },
    {
      "question_id": "39",
      "model_score": 91.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\n **False**, after creating a pipe, **write** can only be used on **fd[1]** and **read** can only be used on **fd[0]**. \n"
    },
    {
      "question_id": "51",
      "model_score": 53.2,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1) adsorption of ions\n2"
    },
    {
      "question_id": "80",
      "model_score": 51.3,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "properties are symmetric about two orthogonal planes and normal stress strain coupling is removed."
    },
    {
      "question_id": "65",
      "model_score": 71.1,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)Whole interface is presented in a better and easy to understand manner by separating declaration and definition.\n\n2)We can restrict someone form viewing implementation by putting declaration and definition in different modules. "
    },
    {
      "question_id": "69",
      "model_score": 50.2,
      "human_score": 0.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "The life when the dead storage becomes equal to reservoir capacity of whole active storage gets silted up"
    },
    {
      "question_id": "45",
      "model_score": 69.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue. The above cannot be done in user mode.\n"
    },
    {
      "question_id": "72",
      "model_score": 83.0,
      "human_score": 2.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "The critical issues are: maximum image quality should he preserved after compressing the image, full channel capacity should be utilised to transmit images to the base station. Date rate should not exceed maximum channel capacity."
    },
    {
      "question_id": "82",
      "model_score": 73.6,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "if the seperating hyperplane is non linear between two classes in the feature space then linear discriminant function classifier not able to classify correctly to training / test data and is classify there will be error due to  linear separating hyperplane. and using nonlinear discriminant function classifier these error Can be removed"
    },
    {
      "question_id": "81",
      "model_score": 62.5,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "It conveys that there is a lot of correlation of that feature with other features. Not much information is obtained from that particular feature so this feature could be removed."
    },
    {
      "question_id": "39",
      "model_score": 19.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "True\nPipe creates 2 file descriptors and used for inter-process communication.\n"
    },
    {
      "question_id": "51",
      "model_score": 17.1,
      "human_score": 0.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "ions in water,van der waal forces"
    },
    {
      "question_id": "63",
      "model_score": 76.4,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Narrow range of Hue around 120, large intensity variation so take entire range. Colour is also not very saturated so take broad range around 0.5 or take entire range of saturation."
    },
    {
      "question_id": "32",
      "model_score": 17.9,
      "human_score": 0.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "water percolation is excess and less water available"
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "constant capital structure"
    },
    {
      "question_id": "106",
      "model_score": 58.1,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "In the fork() itself, the return register for the child process is loaded with the value 0. All the data in PCB, registers are copied from the parent to the child process. When the child calls the sched(); If may involve running parent or child. If child starts running then it returns 0 (since 0 was loaded in its return register)."
    },
    {
      "question_id": "54",
      "model_score": 71.5,
      "human_score": 1.0,
      "question": "The appetitive      faculty corresonds to      ",
      "instructor_answer": "Plato's theory of the soul, the appetitive faculty is one of the 3 divisions of the soul. It is the part dealing with desires and passions",
      "student_answer": "The appetitive faculty corresponds to desire i.e. pleasure of wealth and desire of food etc."
    },
    {
      "question_id": "92",
      "model_score": 62.0,
      "human_score": 0.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Analysis of shape or any other applications where we need to object in image with some given templates.  corners can play large part like identifying if image has sqaure or circles etc."
    },
    {
      "question_id": "63",
      "model_score": 58.1,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "narrow around 120 degrees for H since green is 120, around 0.3-0.7 for I, S narrow range around 1 like 0.7-1"
    },
    {
      "question_id": "61",
      "model_score": 43.0,
      "human_score": 1.0,
      "question": "Three key principles of ISO series are                                             .,                                                                                                                              ...and                                                                                  .      ",
      "instructor_answer": "Consensus , Industrial wide applicability and Voluntary Nature",
      "student_answer": "Environmental compliance and standards; industry wide applicability; and labelling and standardization"
    },
    {
      "question_id": "82",
      "model_score": 76.4,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Non- linear discriminant function can classify non -linearly separable classes whereas linear discriminant function can not classify non-linearly separable classes."
    },
    {
      "question_id": "87",
      "model_score": 55.0,
      "human_score": 1.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "Removal through formation of Smuchzdike."
    },
    {
      "question_id": "35",
      "model_score": 62.8,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "1 flooding method (basin method )\n2 furrow method"
    },
    {
      "question_id": "53",
      "model_score": 37.0,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "spatial location at pixels in image, Edge magnitudes, Texture and Colour (RGB values)"
    },
    {
      "question_id": "105",
      "model_score": 84.7,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, the OS has to execute the some instruction as that instruction is not executed because of the page fault."
    },
    {
      "question_id": "24",
      "model_score": 45.0,
      "human_score": 1.0,
      "question": "For cooling, the samples from oven or furnace are moved to desiccator primarily to                                                       ",
      "instructor_answer": "bring down the temperature without any type of condensation process or moisture addition from surrounding",
      "student_answer": "reduce the higtemperature and"
    },
    {
      "question_id": "42",
      "model_score": 50.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFALSE - Initiating context switches & scheduling processes on the CPU is a kernel mode, since they can't be done in user mode. This statement is false because a user process is always in user mode and does not have the capability to initiate a context switch or schedule the target process on the CPU.\n"
    },
    {
      "question_id": "51",
      "model_score": 79.3,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "Imperfections in the structures of crystals, adsorption of ions on the surface of the particle"
    },
    {
      "question_id": "65",
      "model_score": 59.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Some      advantages of separating declaration from definition are:\n1) If declarations have been written together in the program, then when a user sees the code file, he'll have an easy time figuring out what all methods are available in the program\n\n2) Suppose I have two methods f() and g() wherein f wants to use g and g  wants to use f. then we have to declare them both together first and then we can use, otherwise we cannot. \ne.g. \nint f(int p){\nif(p>0){ /* do something without g*/}\nelse{ return g(p); }\n}\nint g(int p){\nif(p>0){return f(p);}\nelse{}\n}"
    },
    {
      "question_id": "49",
      "model_score": 29.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "Falsehood: An executable program just a pile of code which can be instantiated more than one time. And all the processes of same program uses some PCB with reference counts to distinguish."
    },
    {
      "question_id": "49",
      "model_score": 84.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE. For example, when the fork system call is called to execute multiple processes simultaneously, each of the processes have a different PCB, with different PIDs."
    },
    {
      "question_id": "68",
      "model_score": 46.7,
      "human_score": 1.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "when we have large number of feature in input data or when the input/input node in neural network is large then we have to use multiple hidden layers"
    },
    {
      "question_id": "84",
      "model_score": 60.5,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "Multilayer gives the ability to classify non-linear separable data. Multilayer perceptron can separate/discriminate while single perceptron classifier can't."
    },
    {
      "question_id": "39",
      "model_score": 15.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFALSE"
    },
    {
      "question_id": "78",
      "model_score": 96.8,
      "human_score": 2.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "Storage plant\nCascade plant\nPumped storage plant\nRun of river plant "
    },
    {
      "question_id": "46",
      "model_score": 83.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "False\nA process may run indefinitely without issuing system calls. In such a scenario OS never regains control and thus cannot schedule other processes.\n"
    },
    {
      "question_id": "76",
      "model_score": 1.6,
      "human_score": 0.0,
      "question": "What are the two important aspects of reservoir routing under a flood control criterion?",
      "instructor_answer": "peak discharge reduced and\n peak flow gets shifted",
      "student_answer": "S=f(Q) and Q=f(h)"
    },
    {
      "question_id": "44",
      "model_score": 80.1,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "False, can do when syscall are called."
    },
    {
      "question_id": "36",
      "model_score": 61.9,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "geographical area, water supply pressure, cost of the water, population of the area"
    },
    {
      "question_id": "16",
      "model_score": 56.5,
      "human_score": 1.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "Noise in the time series data can be systematic or random error.They appear in the data because of measurement /observational/ computation error as well as due to assumption. Noise in the data is sometimes referred as Bias."
    },
    {
      "question_id": "65",
      "model_score": 53.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Separating declaration and definition can make the code look neat and understandable."
    },
    {
      "question_id": "8",
      "model_score": 48.3,
      "human_score": 1.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1 because it have not received any term completely"
    },
    {
      "question_id": "56",
      "model_score": 76.6,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "consistency, efficiency, sufficiency"
    },
    {
      "question_id": "26",
      "model_score": 26.3,
      "human_score": 1.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "cutting  of the hard metals."
    },
    {
      "question_id": "45",
      "model_score": 34.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "FALSE. User can initiate a context switch and schedule the target process knowing its PID."
    },
    {
      "question_id": "65",
      "model_score": 62.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) this division helped us in a way that whenever we want to use a function multiple times in a program, we don't need to define it every time, just declaration would work.\nmeans we can use the function at a later stage just by declaring.\n\n2) second advantage is that it provides us the chance to define functions at a later time also, like if we want our class to be compact (for some reason) then it's possible to just declare the function without definition and definition it out of class . sometimes we don't want to define in class cz we want"
    },
    {
      "question_id": "92",
      "model_score": 55.3,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Since corner points are invariant to image rotation and translation. These are typically used in image matching. The stereo vision present in self driving cars typically incorporates its localization ."
    },
    {
      "question_id": "42",
      "model_score": 77.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse. The context switch can only be performed by OS. Though the process can initiate block or go in blocked state after which OS can context switch it to another process not necessarily target process."
    },
    {
      "question_id": "27",
      "model_score": 63.6,
      "human_score": 1.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "lasers are used for lasik for medicinal purposes.They are also used in presenting presentations"
    },
    {
      "question_id": "51",
      "model_score": 83.7,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1) Imperfection in Crystal Structure. 2) Adsorption of ions on particle surfaces"
    },
    {
      "question_id": "24",
      "model_score": 43.7,
      "human_score": 1.0,
      "question": "For cooling, the samples from oven or furnace are moved to desiccator primarily to                                                       ",
      "instructor_answer": "bring down the temperature without any type of condensation process or moisture addition from surrounding",
      "student_answer": "to prevent   sample  to get moisture"
    },
    {
      "question_id": "6",
      "model_score": 96.6,
      "human_score": 2.0,
      "question": "Chi-square goodness of fit test evaluates the error between (                                                                                   ) and (                                                                                   )                    (                                                                     )",
      "instructor_answer": "Observed and assumed/Estimated PDF",
      "student_answer": "observed and assumed pdf"
    },
    {
      "question_id": "86",
      "model_score": 72.8,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "Those allow us to use matrix algebra to perform multiple transformations and make"
    },
    {
      "question_id": "19",
      "model_score": 47.5,
      "human_score": 1.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "It decides what action has to be performed"
    },
    {
      "question_id": "65",
      "model_score": 75.2,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Readability: Makes the code easier to read to the user, as he can now look at them as separate modules and the way they interact, without worrying about their implementation\n\n2)Ease in creating Object Interactions: In languages such as C++, declaring before definition enables us to use any member function/variable inside any of the functions' definition without worrying about which function is defined first, as all of them have been declared and the compiler knows about them beforehand."
    },
    {
      "question_id": "99",
      "model_score": 38.8,
      "human_score": 1.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "PVD method requires high capital and is difficult to coa"
    },
    {
      "question_id": "78",
      "model_score": 92.5,
      "human_score": 2.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "Storage Plant, Cascade Plant, Pumped Storage plant, Run of River plant"
    },
    {
      "question_id": "45",
      "model_score": 28.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nFalse, As the user process has the target PID of target process then it can initiate the context switch as PID is key for it\n"
    },
    {
      "question_id": "37",
      "model_score": 90.4,
      "human_score": 2.0,
      "question": "Negative electrode used in Nickel         MH Batteries are _____________.",
      "instructor_answer": "Hydrogen absorbing alloys (MH)",
      "student_answer": "Hydrogen absorbing alloy"
    },
    {
      "question_id": "35",
      "model_score": 84.0,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "basin method,furrow method, sprinkler method,drip irrigation."
    },
    {
      "question_id": "48",
      "model_score": 79.6,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse\nThe parent may work independently of the child."
    },
    {
      "question_id": "74",
      "model_score": 80.2,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "The problems that can wire when hidden layers are large are as following:  Due to a large number of layers, the function learnt by the network is prone to overfitting and thus a robust model might not be learnt . The large number of layers can also result in gradient decay during back-propagation resulting in very slow or minimal learning and weight updation (slower training)"
    },
    {
      "question_id": "19",
      "model_score": 76.2,
      "human_score": 2.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "DecideAction tells whether the bot will rotate left, right, 180 degree or move forward."
    },
    {
      "question_id": "63",
      "model_score": 29.6,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "a broad range of I centered around 0.5."
    },
    {
      "question_id": "88",
      "model_score": 61.6,
      "human_score": 2.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "1. Neutralizes pH of the medium\n2. Regulates fluctuating flow\n3. Helps in periodic removal of slug build-up"
    },
    {
      "question_id": "104",
      "model_score": 51.6,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. There are some kernel addresses in user stack of process, when user process tries to modify that data, OS prevents via LDE, they can read but can't modify\n2. User process can try to access page which doesn't belong to this process but OS prevents\n-> It may be another process or pages through a random VA but its entry doesn't exist and get page fault"
    },
    {
      "question_id": "64",
      "model_score": 53.2,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "three components:\n1. Red roses\n2. blue sky\n3. green leaves and stems\n\n1. To segment red roses we can see it is almost pure colour so we can set hue around to 0 degrees with some upper and lower threshold, then for saturation as it is known it is a pure colour saturation will also be high so we can again put narrow range for saturation for intensity as for red only one of the three colours is present in abundance so the intensity will be low ( not minimum but low) so we will put a range around 0.3 as it is only one colour out of three primary colours.\n\n2. To segment blue sky we can set hue to a range around 240 degrees with a little wide range because of the white cloud, saturation will also be quite high but the range will not be very narrow, as there is also cloud ( white) present to saturation can be low also, then for the intensity it will again be low as blue will have only one intensity majorly and a quite broad range because of white cloud.\n\n3. then green stems and leaves are secondary colour with a little of black or darkness present, so hue should be around 120 degrees, saturation high for green colour"
    },
    {
      "question_id": "78",
      "model_score": 80.8,
      "human_score": 2.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "Runoff river plant, Storage plant, Cascade plant, pumped storage plant."
    },
    {
      "question_id": "65",
      "model_score": 74.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) If the declaration are seperated, the reader will know all the variables used in program at once without getting involved in cumbersome task of reading their definition.\n\n2) The definition can be read seperately for each function whichever function is required by the reader/user. This make code more systematic a"
    },
    {
      "question_id": "81",
      "model_score": 71.5,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "Very low eigen values with principal component transform applied to high dimensional data means that we are trying to reduce dimensionality without reducing important dimension, because very low eigenvalues means less important dimension."
    },
    {
      "question_id": "10",
      "model_score": 34.5,
      "human_score": 1.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "Inverts the priority of tasks"
    },
    {
      "question_id": "45",
      "model_score": 85.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue.\nContext Switching , scheduling can be done only in the kernel mode. User process can't have access on these as it runs in user mode. Therefore it can't have capability to initiate a context switch & schedule the target process."
    },
    {
      "question_id": "43",
      "model_score": 79.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "FALSE, when interrupted, the OS might initiate context switching to switch the process to other ready process. The data loss however does not occur doe because, the state is stored well in PCB of that process."
    },
    {
      "question_id": "82",
      "model_score": 74.1,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "A non-linear discriminant helps separate non linear data while a linear discriminant can only separate linear data."
    },
    {
      "question_id": "86",
      "model_score": 14.4,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "To match the order of matrix operations"
    },
    {
      "question_id": "41",
      "model_score": 88.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue. With context switching, the OS would be in OS mode after interrupt CPU would be in OS mode. The scheduling process decides which interrupted process to be scheduled next. It might not be the previous process."
    },
    {
      "question_id": "74",
      "model_score": 72.0,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "When the number of hidden layer are large it may result in overfitting. This occurs because the neural network to formed has so much info capacity that the limited amount of info contained in training is not enough to train all the neurons in the hidden layer."
    },
    {
      "question_id": "105",
      "model_score": 79.2,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, it starts execution from that faulting instruction."
    },
    {
      "question_id": "41",
      "model_score": 3.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\n**True**"
    },
    {
      "question_id": "89",
      "model_score": 22.8,
      "human_score": 1.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "we can derive unit hydrograph"
    },
    {
      "question_id": "65",
      "model_score": 47.7,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Class declarations(without definition) act as a compact representation of what all variables and member functions it contains. This gives the user/programmer a compact idea of the class.\n2. In large programs,"
    },
    {
      "question_id": "87",
      "model_score": 65.7,
      "human_score": 1.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "The breakdown of biological pathogens with the help of the biological mat on top of the filter over a long time."
    },
    {
      "question_id": "49",
      "model_score": 22.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "Each different PCB entries are used form for the same binary"
    },
    {
      "question_id": "7",
      "model_score": 59.8,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "scraping of surface layer of sand and washing removed sand"
    },
    {
      "question_id": "1",
      "model_score": 90.5,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "Capital structure remains same"
    },
    {
      "question_id": "106",
      "model_score": 65.5,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "when we call fork a child process is created with same memory image as parent process. ofter this child process is created. It is put into ready state and will be immediately scheduled. The only change between the parent and child processes at this stage is that the value of the register in the stack in which the return value of the fork system call is stored. the value in parent process will be the pid of child process created while in the child process created at will be zero. and as the child has register zero which is returned it can continue from next instruction"
    },
    {
      "question_id": "74",
      "model_score": 78.7,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "When the number of hidden layer increases, the overfitting problem arises. Also the computation time increases. While its difficult to find global minimize and also the forward propagation as well as back propagation process is lengthy. "
    },
    {
      "question_id": "48",
      "model_score": 66.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse, we can use it but the child becomes an orphan as the data is duplicated, then we can use exec in parent process."
    },
    {
      "question_id": "86",
      "model_score": 78.7,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "It enables faster transformation for any \"n\" number of points simultaneously. It also helps to define translation as a matrix product operation."
    },
    {
      "question_id": "92",
      "model_score": 43.2,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "matching the images can be done (if they are of same scale) & the object detection can be performed."
    },
    {
      "question_id": "64",
      "model_score": 82.5,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A broader range around 0/360 degrees in H such that all red color is covered. This range has to be found empirically. This is done as rose petals are red in color and red color can be easily segmented in hue space.\n\nIn addition to this, a high saturation threshold near 1 might have to be applied if the above alone doesn't work. The reason is that the hue in darker regions of stem might also come with red which can be removed with saturation as red is pure "
    },
    {
      "question_id": "20",
      "model_score": 86.0,
      "human_score": 2.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "Intermittent streams that hold water during a considorable i.e. wet portion (rainy portion)\nof the year. They ceases to flow occasionally or seasonally as bad seepage and evapotranspiration exceed the available water supply. Flow occurs when water table is seasonally high whereas Ephemeral streams has flowing water only during, and for a short duration of time after precipitation events in a year. Stream bed located as base water table. Runoff from rainfall is primary source of water."
    },
    {
      "question_id": "40",
      "model_score": -3.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "None"
    },
    {
      "question_id": "71",
      "model_score": 56.4,
      "human_score": 2.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "Organic and Oceanic Salts; also Silver Nitrate for cloud seeding"
    },
    {
      "question_id": "89",
      "model_score": 83.9,
      "human_score": 2.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "Time Area Method is used in rainfall-runoff modelling for a catchment. It is significant in the larger catchments where other lumped models perform poorly."
    },
    {
      "question_id": "21",
      "model_score": 82.5,
      "human_score": 2.0,
      "question": "Differentiate between true random number and pseudorandom number generators.",
      "instructor_answer": "TRNG uses unpredictable physical mean for computation of random\nnumber, results are truely random and unpredictable , some random numbers cannot be reproduced. PRNG uses mathematical algorithm which are computer based. Its logical which uses mathematical formulas to generate sequence of random number. Some random number can be produced.",
      "student_answer": "Difference between the true random number and pseudo random number generator is that (TRNG) uses an unpredictable physical means to generate numbers (like atmospheric noise) and (PRNGT) use mathematical Algorithm (completely computer generated). Pseudo random numbers are sets of algorithm."
    },
    {
      "question_id": "49",
      "model_score": 89.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "-> False.\n In that case each of the processes will have to maintain their own PCB so as to retain exclusivity in case of context switches. Each process need to have its different PCB to facilitate saving its register values in case of switches."
    },
    {
      "question_id": "48",
      "model_score": 66.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse, the exec call can be used anywhere whether it's a parent (on a child) doesn't matter if the child process terminated (or) not terminated."
    },
    {
      "question_id": "106",
      "model_score": 70.4,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "* When copying data from parent to child user stack is also copied which has return address to \"fork()\" line. When child is created in it's return from trap path. ie is kernel stack random return address 6000000 with return value o register -o is given. After returning from trap it will change its privilege level from kernel to user mode. by switching all it's registers from kernel stack to user and here the return value (0) already there in register is given as output."
    },
    {
      "question_id": "73",
      "model_score": 55.9,
      "human_score": 1.0,
      "question": "What are the important details that have to be known prior for reservoir routing?",
      "instructor_answer": "storage volm vs elevation of reservoir\ninflow hydrograph \nwater surface elevation vs outflow\ninitial values of S,I and Q at t=0",
      "student_answer": "initial and final inflows, initial outflow, initial storage"
    },
    {
      "question_id": "74",
      "model_score": 65.7,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "overfitting may arise when number of hidden layers are very large which means there can be too much of oscilation or new Sample may not be classified Correctly. Computational cost will be very high if number of hidden layer are high."
    },
    {
      "question_id": "74",
      "model_score": 83.6,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "When number of hidden layer is large in case of simple problem which does not require more number if layers to solve it results in overfitting. The training accuracy may increase but the test accuracy is low. It fails to generalise the classification ."
    },
    {
      "question_id": "14",
      "model_score": 98.2,
      "human_score": 2.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "difference between the kurtosis coefficient of a distribution to the kurtosis coefficient of normal distribution"
    },
    {
      "question_id": "60",
      "model_score": 95.3,
      "human_score": 2.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "Windrow, static aerated and in vessel composting"
    },
    {
      "question_id": "95",
      "model_score": 74.2,
      "human_score": 2.0,
      "question": "Why the steeper main streams results in the Hydrographs with smaller time base?",
      "instructor_answer": "Steeper basin streams allows the run off  to leave the basin quickly because of high slope.Time base means the amount of time for run off to leave the catchment after the storm. So, if there is steeper slope,  excess run off will get out  quickly. Hence time base reduces.",
      "student_answer": "Due to steep slope, flows takes less time to gauge Station earlier as compared to flatter main stream. Hence the flood confluce to outlet earlier and hence the time to peak also get reduced."
    },
    {
      "question_id": "65",
      "model_score": 46.3,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.Declaration is like an interface or outer_functionality to the user"
    },
    {
      "question_id": "5",
      "model_score": 49.8,
      "human_score": 0.0,
      "question": "A reactor which is used when intense agitation is required is _____________.",
      "instructor_answer": "Completely mixed flow reactor (CMFR)",
      "student_answer": "CSTR (Just like CMFR without flow)"
    },
    {
      "question_id": "46",
      "model_score": 6.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTRUE"
    },
    {
      "question_id": "103",
      "model_score": 59.4,
      "human_score": 2.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "High cost, energy inefficiency, low MRR"
    },
    {
      "question_id": "104",
      "model_score": 50.7,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 2) If the user wantedly tried to access the virtual space address of the kernel space( i.e. kernel space). For example kernel space is from va o to 2^63B. If the user tried to initialize a pointer to one of these va's. Then the accessing the kernel is privileged action and should be in the case user attempts to perform.\n\n2) If the user tries to access space which is not yet mapped to any physical address, the user is not supposed to access the data which is not yet"
    },
    {
      "question_id": "50",
      "model_score": 21.1,
      "human_score": 1.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "linear reservoir is a function of outflow only.. the"
    },
    {
      "question_id": "32",
      "model_score": 27.1,
      "human_score": 0.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "when depth of water needed is less. for eg, irrigation and navigation purposes"
    },
    {
      "question_id": "78",
      "model_score": 74.6,
      "human_score": 1.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "River runoff plant, Cascading plant, storage plant, Pumping water plant"
    },
    {
      "question_id": "74",
      "model_score": 52.8,
      "human_score": 0.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "Error Backproparation arises when number of hidden layers is very large it means during training, error propogated back."
    },
    {
      "question_id": "97",
      "model_score": 96.4,
      "human_score": 2.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "Depth of cut, Hardness of workpiece"
    },
    {
      "question_id": "46",
      "model_score": 60.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue: If the processes invoke an interrupt atleast once, then OS can schedule other processes.\n"
    },
    {
      "question_id": "79",
      "model_score": 12.0,
      "human_score": 0.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "Meyer's formula and Rohwer's formula"
    },
    {
      "question_id": "25",
      "model_score": 86.9,
      "human_score": 2.0,
      "question": "Full form of ELISA is ____________________.",
      "instructor_answer": "Enzyme linked immunosorbent assay",
      "student_answer": "enzyme linked immunoassay"
    },
    {
      "question_id": "65",
      "model_score": 75.6,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. By giving declaration at one place we can easily get the brief idea on functions, total number of functions used, type of functions used at one place in the program without alot scrolling. \n2.Makes easy to modify the code in future.\n3. Helps to keep track of code easily. \n"
    },
    {
      "question_id": "92",
      "model_score": 44.5,
      "human_score": 0.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Applications that works on spatial image processing benefits from corner. eg Quickbird."
    },
    {
      "question_id": "36",
      "model_score": 76.3,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "the four facrtors are\n1) Location\n2)climate\n3) poplulation\n4) level of industrialization"
    },
    {
      "question_id": "64",
      "model_score": 39.8,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "narrow range of H around 0 degree, and broad range of I around 0.5"
    },
    {
      "question_id": "49",
      "model_score": 38.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True.\n Processes of same program can use the same PCB."
    },
    {
      "question_id": "104",
      "model_score": 51.8,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Consider the syscall fork();\nIf a user process somehow figures out the memory location of the page table, it may try to fork a new process manually instead of using the syscall. Such privileged access can be hazardous for other programs, since one program can potentially hog the table, or modify the PCBs of other processes."
    },
    {
      "question_id": "63",
      "model_score": 67.3,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "narrow range for Hue channel around 120deg ,115 to 125 for picking green parts of the channel and for picking darker or black parts of image take narrow channel in Intensity(I) channel around 0 ,0 to 0.1"
    },
    {
      "question_id": "39",
      "model_score": 93.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "**FALSE**, only read on [fd0] and write on [fd1] is permitted."
    },
    {
      "question_id": "63",
      "model_score": 53.6,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "we can use mask. Also, for green leaves and stem segmentation broad range of H around 90-210 degrees and range of S in between 0 to 0.8 with I mostly less than 0.5"
    },
    {
      "question_id": "39",
      "model_score": 38.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "Ans: TRUE -> we are used Cread on fd[0]]and write on fd[1]."
    },
    {
      "question_id": "65",
      "model_score": 52.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Some      advantages of separating declaration from definition are:\n1) If all definitions have been written together in the class, then when a user sees the code file, he'll have an easy time figuring out what all things a"
    },
    {
      "question_id": "49",
      "model_score": 83.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. All instances are independent and have different stacks, pids, etc so PCBs cannot be same"
    },
    {
      "question_id": "22",
      "model_score": 60.2,
      "human_score": 2.0,
      "question": "During coagulation process alkalinity reduces due to the ___________________________",
      "instructor_answer": "As coagulation is done,the OH- tend to form more bonds with the molecules in the sample, and H+ concentration increases which lowers the pH level.",
      "student_answer": "precipitation of the Fe(OH)3 as the large particles with deposition on the other particles due to good heterogeneous nucleation thus the solution concentration of the OH- reduces thus reducing the alkalinity"
    },
    {
      "question_id": "104",
      "model_score": 22.8,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": "The user process may attempt to read memory that doesn't belong to it, by trying to call read to a given physical memory address. But the OS reserves page table navigation and virtual memory mapping for either the hardware or the kernel, not for the user, else they could modify other processes' data or run the user process might attempt to overwrite other programs by accessing locations way outside its own address space, like by trying to jump to EIP + 400000. The OS and hardware keep track of bounds using base-bounds registers and prevent spurious attempts to jump like this."
    },
    {
      "question_id": "68",
      "model_score": 53.8,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "multilayer perception neural network is desirable when classification cannot be done by linear boundary or single layer perception doesn't perform well"
    },
    {
      "question_id": "87",
      "model_score": 73.2,
      "human_score": 1.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "It is a Mat like of Biological organisms and aids in filtration process.Here,The top layer of sand becomes Biologically  active due to the establishment of the microbial community. "
    },
    {
      "question_id": "46",
      "model_score": 75.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "True\nThis would be a cooperative approach to multitasking. However, as the processes may yield control to the OS (or kernel) involuntarily when a syscall/interrupt occurs."
    },
    {
      "question_id": "81",
      "model_score": 57.5,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "low eigen value implies low variance."
    },
    {
      "question_id": "82",
      "model_score": 79.7,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "The advantages of non linear discrimanant over linear is that some functions are not linearly separable (Eg. XOR function) . These can't be graphically seperated by a straight line. This type of issues can be resolved by a non linear discriminant function classifier like quadratic function."
    },
    {
      "question_id": "47",
      "model_score": 80.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nYes, it can be used, anywhere. If we write in parent it will execute, although it might not run code below that."
    },
    {
      "question_id": "84",
      "model_score": 44.4,
      "human_score": 0.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "Multilayer perceptron classifier can solve hidden layers."
    },
    {
      "question_id": "47",
      "model_score": 92.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTRUE. The exec() call can run in parent process before child process terminates shifting the child process to another parent."
    },
    {
      "question_id": "43",
      "model_score": 14.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFALSE"
    },
    {
      "question_id": "15",
      "model_score": 54.6,
      "human_score": 1.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "happens when dry weather pattern demonstrates over a region"
    },
    {
      "question_id": "53",
      "model_score": 67.8,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Since we want roads to be put in the different categories, we do not want features like edges to be our priority. Hence features such as building geography, buildings near the roads, length of the roads, width etc can be used as a feature."
    },
    {
      "question_id": "18",
      "model_score": 70.0,
      "human_score": 1.0,
      "question": "Define trap efficiency of a reservoir and write down the factors affecting the trap efficiency",
      "instructor_answer": "It is defined an the ratio of deposited sediment to the total sediment inflow for given period within the reservoir economic life time.Factors affecting the trap efficiency: Diameter of silt particles, size and weight and type of debrais. Wind flow direction. Shape of the dam.Topography of the dam structure. Material of the dam.",
      "student_answer": "It is the ratio of total sediment deposited a given period to the Total sediment inflow in that period."
    },
    {
      "question_id": "47",
      "model_score": 88.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue, Since after forking, both parent & child are like copies of each other (but with different pid), the exec call can be used in parent or may not, on termination of child. The child will execute on its own, even though parent might be executing some other program"
    },
    {
      "question_id": "65",
      "model_score": 66.8,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The program will be organised, and is easy to read, understand and find errors.\n2. It is the best example of an abstraction, where we know all the member functions as an overview, and helps us understand "
    },
    {
      "question_id": "64",
      "model_score": 38.6,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petalof green in colour we can find a"
    },
    {
      "question_id": "64",
      "model_score": 15.8,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H - upper end around 160-180, S -1 and I centred around 0.5"
    },
    {
      "question_id": "104",
      "model_score": 47.5,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) If the user process attempts to change the current privilege level (which is a register on the CPU), as prevents the user process from doing that, because changing the privilege level requires privileged instructions (which can't be run by the user process)\n2) If the user process tries to read the disk directly, it would generate an exception and as prevents the user process by doing that. (Kernelbase privilege instructions to perform the read must be used)"
    },
    {
      "question_id": "48",
      "model_score": 62.7,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. Parent can execute till child terminates, it reaps the child."
    },
    {
      "question_id": "35",
      "model_score": 78.7,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "furrow,sprinkler irrigation, drip irrigation"
    },
    {
      "question_id": "46",
      "model_score": 13.6,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue, timer interrupt is imp for process stuck in infinite loops\n"
    },
    {
      "question_id": "104",
      "model_score": 2.2,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Assistant\nThere is no text in the image."
    },
    {
      "question_id": "63",
      "model_score": 36.7,
      "human_score": 0.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Leaves and stem are green in colour."
    },
    {
      "question_id": "105",
      "model_score": 34.4,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True. If OS is using a lazy allocation it handles page fault and then executes next instruction."
    },
    {
      "question_id": "95",
      "model_score": 69.7,
      "human_score": 2.0,
      "question": "Why the steeper main streams results in the Hydrographs with smaller time base?",
      "instructor_answer": "Steeper basin streams allows the run off  to leave the basin quickly because of high slope.Time base means the amount of time for run off to leave the catchment after the storm. So, if there is steeper slope,  excess run off will get out  quickly. Hence time base reduces.",
      "student_answer": "the time less for steeper main streams beacause, the draining process become quick in steeper basin. The water reaches the channel quicker."
    },
    {
      "question_id": "35",
      "model_score": 92.7,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Flooding, furrow, sprinkler, drip methods"
    },
    {
      "question_id": "98",
      "model_score": 81.5,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\n"
    },
    {
      "question_id": "46",
      "model_score": 6.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTRUE"
    },
    {
      "question_id": "45",
      "model_score": 95.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue. Scheduler is a function of the OS and only OS decides which process to schedule next based on some predetermined policy. The user process has no say/control over scheduling processes."
    },
    {
      "question_id": "65",
      "model_score": 78.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)Code becomes more systematic, easier to read and interpret.\n2)The definitions give the information about functions used/available at one place rather than searching through the program for it.\n"
    },
    {
      "question_id": "45",
      "model_score": 65.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "True\nThe task can be done and should be done only in the kernel privileged mode.\n"
    },
    {
      "question_id": "106",
      "model_score": 82.3,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " It does this by setting up the trapframe and context on kstack of child process. As if the child process had an interrupt, was setup its trapframe and context switch out while in the forkset function.\nThe trapframe is copied as it is , with eax change from parent to child along with the trapset return address after the trapframe.\nIt is followed by return address to forkset function and then by the context registers pushed.\n\nWhen the child process is now scheduled the path is:\n1. Restore context\n2. Return to forkset\n3. Return to trapset\n4. Pop trapframe\n5. Call iret Inside trapset function\n6. Go to user mode"
    },
    {
      "question_id": "63",
      "model_score": 61.4,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "I range should be a broad range around 0.4, more towards the darker range the green is duller than at I nearly equal to 1.\nSaturation should again be a very narrow window near 1 as the component of red is very low.\nHue should be a moderate sector (30-40 degrees) around 140 degrees, the color is towards green and between yellow and green is 120 degrees and yellow is 180 degrees.\nThis takes care of the green to yellowish - green color of all intensities to be classified as leaf and stem."
    },
    {
      "question_id": "46",
      "model_score": 84.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTRUE. It will get those opportunities when the running process gets any interrupts (hardware or software)"
    },
    {
      "question_id": "68",
      "model_score": 73.3,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "for data having more number of features with good corelation between the features, multiple hidden layers is desirable. it means we are fitting  a complex mathematical function to obtain good understanding of weights to be assigned to features so that there will be an improved accuracy of classifying the test data."
    },
    {
      "question_id": "75",
      "model_score": 31.4,
      "human_score": 2.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "key assumption is assumption of linear transformation that is taking the value of m=1"
    },
    {
      "question_id": "39",
      "model_score": 12.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "**False**"
    },
    {
      "question_id": "88",
      "model_score": 19.7,
      "human_score": 0.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "It is used for sedimentation"
    },
    {
      "question_id": "45",
      "model_score": 83.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTRUE. Only the OS can perform scheduling and context switches. It does so using various policies.\n"
    },
    {
      "question_id": "49",
      "model_score": 77.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False Each process has its own process control block"
    },
    {
      "question_id": "45",
      "model_score": 35.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue, may be after PID() call  may result in blocking of user process I calls for another target process to complete. So now a scheduler (OS designed) may initiate a context switch and it depends on our scheduler. So it may/may not.\n"
    },
    {
      "question_id": "39",
      "model_score": 46.9,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse, as vice-versa is wrong. It is a 1 way pipe\n"
    },
    {
      "question_id": "64",
      "model_score": 60.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Suggestion: a broader range around 0/360 degrees in H such that all red color is covered. This range has to be found empirically"
    },
    {
      "question_id": "80",
      "model_score": 80.1,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "in an orthotropic material, the material properties are different along three mutually orthogonal axes"
    },
    {
      "question_id": "82",
      "model_score": 61.6,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Non linear discriment function classifier can be used to make the non linearly seperable data into linearly separable."
    },
    {
      "question_id": "68",
      "model_score": 15.4,
      "human_score": 0.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "the idea is to express the derivation of error with respective to the unknown hidden weights in terms of computable partial denotion"
    },
    {
      "question_id": "65",
      "model_score": 52.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. By separating declaration from definition, we can reduce our confusion and we can easily understand the code written.\n2.We can easily identify which are member functions of class."
    },
    {
      "question_id": "84",
      "model_score": 76.6,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "Multilayer perceptron classifier gives better accuracy as compared to perceptron classifier in case of XOR problem. The data in XOR problem cannot be linearly classified. So multilayer perceptron gives better result."
    },
    {
      "question_id": "67",
      "model_score": 99.6,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "Method of moments, method of maximum likelihood"
    },
    {
      "question_id": "105",
      "model_score": 27.2,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True. First the unmapped page is correctly mapped to virtual page. by update VA to PA mappings."
    },
    {
      "question_id": "64",
      "model_score": 83.8,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "The rose petals are red (shades of red) in colour. Red colour has zero hue,maximum saturation i.e. one and low intensity( about one-third). So to segment the rose petals, a hue H can be taken in range of 0       to 30       , saturation S is in range of 0.5 to 1 , intensity I is in range of 1/3( pure red)  to 0.5 (light shades of red)."
    },
    {
      "question_id": "65",
      "model_score": 75.4,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. It is easier to analyse various member functions of a class as they just have their declaration in the class body and thus enhance the readability of the code.\n2. It is easier to debug the code since the implementation of each function is present seperately. Moreover declaration also helps in the implementation of a class/function before their definition."
    },
    {
      "question_id": "106",
      "model_score": 52.4,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "."
    },
    {
      "question_id": "48",
      "model_score": 12.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "FALSE"
    },
    {
      "question_id": "81",
      "model_score": 77.6,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "very low eigen values means high correlation in that axis of the transformation which means that the eigen vector will lose the most information among all the other eigen vectors."
    },
    {
      "question_id": "87",
      "model_score": 55.0,
      "human_score": 1.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "Removal through formation of Smuchzdike.\n"
    },
    {
      "question_id": "46",
      "model_score": 31.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue, without the times interrupt, the user process could monopolize CPU and run forever without giving back control to OS. "
    },
    {
      "question_id": "46",
      "model_score": 86.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "TRUE, even without timer interrupt, the OS might get called when there are system calls in the ongoing process (voluntary interrupt)."
    },
    {
      "question_id": "65",
      "model_score": 70.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) this division helped us in a way that whenever we want to use a function multiple times in a program, we don't need to define it every time, just declaration would work.\nmeans we can use the function at a later stage just by declaring.\n\n2) second advantage is that it provides us the chance to define functions at a later time also, like if we want our class to be compact (for some reason) then it's possible to just declare the function without definition and definition it out of class ."
    },
    {
      "question_id": "83",
      "model_score": 72.1,
      "human_score": 1.0,
      "question": "What is the difference between basin order and channel order?",
      "instructor_answer": "Basin order is highest order of any stream in that basin whereas Channel order is order of stream\nwhich denotes that what order of streams has joined the channel.",
      "student_answer": "Basin order is for basin watershed whereas Channel order is no of channel of given order in drainage\nbasin."
    },
    {
      "question_id": "105",
      "model_score": 36.4,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True. This is true because of the instruction following the fault instruction requires the physical address of the above VA, it should be given. So the OS handles the page fault via allocation and update to the virtual to physical address mapping."
    },
    {
      "question_id": "84",
      "model_score": 67.4,
      "human_score": 1.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "Min 1 hidden layer is sufficient for XOR operation but if we increase hidden layer for multilayer perceptron the model complexity will increase and model may suffer by overfitting or high variance problem for multilayer perceptron due to which the test error will increase but training error will low."
    },
    {
      "question_id": "105",
      "model_score": 35.9,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True, for a page fault due to an unmapped physical page, the page allocation policy will allocate and update the virtual to physical address mappings in the page table, instead of doing it dynamically through the physical address with dynamically allocation policy."
    },
    {
      "question_id": "28",
      "model_score": 12.7,
      "human_score": 0.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "To find similarity and reduce it"
    },
    {
      "question_id": "106",
      "model_score": 52.2,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " This is no trap in child process.\nChild process return from a trap by their parents.\nFor example, consider a case where child process exits, then the parent have to swap after it.\nChild process returns from trap as OS has info of its parent and decides to whether to return from trap or not and which process to schedule."
    },
    {
      "question_id": "67",
      "model_score": 99.6,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "Method of moments, Method of maximum likelihood"
    },
    {
      "question_id": "37",
      "model_score": 90.4,
      "human_score": 2.0,
      "question": "Negative electrode used in Nickel         MH Batteries are _____________.",
      "instructor_answer": "Hydrogen absorbing alloys (MH)",
      "student_answer": "Hydrogen absorbing alloy"
    },
    {
      "question_id": "63",
      "model_score": 38.0,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "A range around 120       H needs to be selected such that all green is segmented clearly."
    },
    {
      "question_id": "88",
      "model_score": 57.5,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "to balance the flow of water and even of various toxic waste elements"
    },
    {
      "question_id": "64",
      "model_score": 50.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow filter around H=0 degrees should filter out the red components from the image. Also since red has higher intensities in general in the image, we can set a high pass filter such a way that we capture only that intensities, for example, consider only intensities I >= 0.1 for the given hue range."
    },
    {
      "question_id": "106",
      "model_score": 76.7,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " The return path from the kernel mode to the user mode for the child process is also via trap handler (in this case using forket when handling the fork system call).\nThe fork system call clones the parent process, including the trap frame, except it changes the eax register value for child process to 0 (as eax holds the return value of system calls upon return, and fork returns with 0 in child process).\nThus, it establishes as a process with an interrupt and upon forket, it is handled as if it was returning from an interrupt by the scheduler."
    },
    {
      "question_id": "49",
      "model_score": 32.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True: Threads are instances of the same program which run simultaneously and use the same PCB with reference counters and few more modifications."
    },
    {
      "question_id": "43",
      "model_score": 14.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "FALSE"
    },
    {
      "question_id": "80",
      "model_score": 44.6,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "Material in which there is symmetry about 2 orthogonal planes.\n"
    },
    {
      "question_id": "105",
      "model_score": 78.5,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False,\nafter mapping physical address to virtual valid address, then it re-executes that same instruction."
    },
    {
      "question_id": "45",
      "model_score": 82.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "True, only OS have the capability to schedule some process."
    },
    {
      "question_id": "65",
      "model_score": 68.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) declarations of all the member function at the same time in the class makes structure of code better and at the same time we get an overview of an idea of what function all member  functions are we supposed to create\n2) Also defining one function at a time outside the class make it easier for us to and the reader to check whether the functions is working correctly as per our requirements\n"
    },
    {
      "question_id": "39",
      "model_score": 12.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\n **FALSE**"
    },
    {
      "question_id": "9",
      "model_score": 65.3,
      "human_score": 2.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "wacc, terminal value assumptions "
    },
    {
      "question_id": "65",
      "model_score": 34.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1: This leads us to use that variable anywhere by just declaring it.Like if we define a global variable a,then we can use it anywhere in the program, but if we declare a there then value of a will be fixed in the program.\n\n2: This helps us in the "
    },
    {
      "question_id": "41",
      "model_score": 2.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue"
    },
    {
      "question_id": "55",
      "model_score": 59.9,
      "human_score": 0.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "various types of Alcohols are used that form a layer on top Lake surface to curb evaporation"
    },
    {
      "question_id": "18",
      "model_score": 47.0,
      "human_score": 0.0,
      "question": "Define trap efficiency of a reservoir and write down the factors affecting the trap efficiency",
      "instructor_answer": "It is defined an the ratio of deposited sediment to the total sediment inflow for given period within the reservoir economic life time.Factors affecting the trap efficiency: Diameter of silt particles, size and weight and type of debrais. Wind flow direction. Shape of the dam.Topography of the dam structure. Material of the dam.",
      "student_answer": "It is the efficiency calculated to measure sediments. Sediments bring into reservoir by huge inflow, and\nvarious channel and basin characteristics."
    },
    {
      "question_id": "105",
      "model_score": 84.2,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False.\nAfter handling the page fault, it starts with\nexecuting from the faulting instruction. Of it\nstarted with next instruction, there would be\ninstructions would be left without execution, thus, not\nfollowing the program."
    },
    {
      "question_id": "41",
      "model_score": 2.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "True."
    },
    {
      "question_id": "106",
      "model_score": 74.3,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "The child process is similar to the parent process. The child process can exit from the trap by i.e. return from kernel mode to the user mode with the help of the syscall handlers. At the boot time, all the trap and syscall handlers are loaded in a table. This table shows that which address to go next while handling the particular system call. So when fork is called, the parent returns from the trap using the trap handler. The child returns with the help of fork syscall handler. The syscall handler has the implementation necessary for increasing the privilege level and switch the child process from kernel mode to user mode. Find the ip i.e. instruction pointer of the child process is than pointed to the next instruction in the initial code. The prev ip can be get from the proc-state structure i.e. the PCB for the process."
    },
    {
      "question_id": "19",
      "model_score": 45.5,
      "human_score": 1.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "This will help in taking a decision of the next step to be done when the current target completes. Like if a node is reached then what should be the next step to be done."
    },
    {
      "question_id": "67",
      "model_score": 98.5,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "method of moment and method of maximum likelihood"
    },
    {
      "question_id": "65",
      "model_score": 67.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The class only gives a high level idea of what the functions would be doing and so it serves as an abstraction for the object, giving only an overview of the functioning. This also means we can share the abstraction separately if we want.\n2. We can package the definitions and share them as black box if we do not wish to reveal the implementation. This also separates the abstraction from the implementation, and the various implementations stay separated as well."
    },
    {
      "question_id": "81",
      "model_score": 77.3,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "In PCT the eigen values is the measure of variance of the particular feature.  low eigen value means the variance of the input data or that feature is low and hence that feature can be removed."
    },
    {
      "question_id": "97",
      "model_score": 24.3,
      "human_score": 0.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "overhanging length of tool, material inhomogenity, periodic vibrations due to discontinuous chips, tool geometry "
    },
    {
      "question_id": "22",
      "model_score": 70.1,
      "human_score": 1.0,
      "question": "During coagulation process alkalinity reduces due to the ___________________________",
      "instructor_answer": "As coagulation is done,the OH- tend to form more bonds with the molecules in the sample, and H+ concentration increases which lowers the pH level.",
      "student_answer": "due to consumption of OH-."
    },
    {
      "question_id": "41",
      "model_score": 40.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nFalse, the process will be scheduled immediately on completion of the interrupt handler.\n"
    },
    {
      "question_id": "103",
      "model_score": 50.8,
      "human_score": 2.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "high initial or setup costs and requirement of highly skilled labour"
    },
    {
      "question_id": "18",
      "model_score": 81.0,
      "human_score": 1.0,
      "question": "Define trap efficiency of a reservoir and write down the factors affecting the trap efficiency",
      "instructor_answer": "It is defined an the ratio of deposited sediment to the total sediment inflow for given period within the reservoir economic life time.Factors affecting the trap efficiency: Diameter of silt particles, size and weight and type of debrais. Wind flow direction. Shape of the dam.Topography of the dam structure. Material of the dam.",
      "student_answer": "It is the ratio of deposited sediment to the total sediment in flow for a given period within the Reservoir economic life time. Factors affecting trap efficiency are hydraulic characteristics of Reservoir and sediment characteristics of Reservoir."
    },
    {
      "question_id": "46",
      "model_score": 8.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nFalse"
    },
    {
      "question_id": "51",
      "model_score": 45.8,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "adsorption of positive ion or negative ion,van der waal forces"
    },
    {
      "question_id": "47",
      "model_score": 34.8,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nSolution: True\nThe exec system call also creates a process and can be used in the parent process before its child process terminates. The child processes are terminated at the time of system call can be executed at an instance."
    },
    {
      "question_id": "60",
      "model_score": 78.8,
      "human_score": 2.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "Windrow composting, agitated static piles Or windrows and In vessel composting"
    },
    {
      "question_id": "63",
      "model_score": 55.3,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H should be around 120\nS should be lower than 0.5\nI should be lower than 0.5"
    },
    {
      "question_id": "48",
      "model_score": 92.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "**FALSE**, the parent process can call the exec system call until the child process terminates, if the exec system call is successful the parent will terminate and the child will be in orphan state."
    },
    {
      "question_id": "66",
      "model_score": 71.6,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "market based and quick, convenient"
    },
    {
      "question_id": "48",
      "model_score": 33.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "**False**"
    },
    {
      "question_id": "73",
      "model_score": 55.6,
      "human_score": 1.0,
      "question": "What are the important details that have to be known prior for reservoir routing?",
      "instructor_answer": "storage volm vs elevation of reservoir\ninflow hydrograph \nwater surface elevation vs outflow\ninitial values of S,I and Q at t=0",
      "student_answer": "inflow hydrograph and initial discharge at downstream"
    },
    {
      "question_id": "74",
      "model_score": 72.7,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "When the number of hidden layer is very large this may lead to overfitting of data. As the weight would be captured multiple times and the model would like to minimie the emperical risk, leading to the model being overfit."
    },
    {
      "question_id": "98",
      "model_score": 25.1,
      "human_score": 0.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "Reduce wear due to abrasion"
    },
    {
      "question_id": "2",
      "model_score": 31.6,
      "human_score": 1.0,
      "question": "\nWhat\nis the Full form of RCP?",
      "instructor_answer": "Representative Concentration Pathway",
      "student_answer": "Respiratory Concentration Pathways"
    },
    {
      "question_id": "31",
      "model_score": 55.5,
      "human_score": 2.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "The response of the discriminant function should be 1 vs 1 ie. it should output a +ve value for a particular class and a negative value for the rest of the classes & this should be for each pair of classes"
    },
    {
      "question_id": "65",
      "model_score": 17.2,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The member functions of the class will be available as buttons of the gadget to the user. The user will not need to know the implementation of the member functions(buttons)."
    },
    {
      "question_id": "82",
      "model_score": 62.8,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Non-linear discriminant function classifier helps to classify the data which have non-linear vector space. (cannot be evaluated using linear discriminant)"
    },
    {
      "question_id": "45",
      "model_score": 1.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "None"
    },
    {
      "question_id": "33",
      "model_score": 20.8,
      "human_score": 0.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "transpiration, infiltration"
    },
    {
      "question_id": "105",
      "model_score": 29.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "TRUE: In lazy allocation, OS will create a valid virtual address and not map it to a physical address unless a page fault occurs while referring to the physical address mapping of the valid virtual address. OS would handle the fault and then execute the subsequent instruction."
    },
    {
      "question_id": "106",
      "model_score": 48.5,
      "human_score": 2.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " Idea: To add the address of the\nreturn-trap-buffer function\nis hardcoded into the child\nprocess' kernel context\n\nApproaches:"
    },
    {
      "question_id": "45",
      "model_score": 32.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nFalse, we can set priority to a certain process.\n"
    },
    {
      "question_id": "56",
      "model_score": 97.9,
      "human_score": 2.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbiasedness, consistency, sufficiency, efficiency"
    },
    {
      "question_id": "99",
      "model_score": 28.5,
      "human_score": 1.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "One limitation of PVD method is its higher cost"
    },
    {
      "question_id": "63",
      "model_score": 65.4,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "for leaves :\"a narrow range around 120 for H, a broad range for I around 0.33, a narrow range around 1 for saturation for stem : \"a narrow range around 120 for H, a broad range for I around 0.33, a narrow range around 1 for saturation"
    },
    {
      "question_id": "65",
      "model_score": 59.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Makes the program easier to understand. \n2. "
    },
    {
      "question_id": "64",
      "model_score": 28.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360 degrees for H"
    },
    {
      "question_id": "65",
      "model_score": 53.0,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) it is possible to have abstract class due to this.\n2)declaring function first unables us to use the function elesewhere without thinking about its defination.\n3) an defination for the function can be provided according to where it is used.\n3) this also makes the program well structured."
    },
    {
      "question_id": "65",
      "model_score": 73.1,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. All the declarations can be seen together in the body of the class and we can see the overall abstraction of the class without caring about the implementation.\n2. More organised and neat code as the declarations can be put together in a header file while definitions can be looked as discrete abstractions of their own in a separate program."
    },
    {
      "question_id": "68",
      "model_score": 52.1,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "NN network maybe help when classes cannot be separated from each other by single line example XOR problem. secondly where the output doesnot depend direclty on the provided features but on some function of features. in problem of underfitting, or feature do not give consistent output."
    },
    {
      "question_id": "37",
      "model_score": 96.2,
      "human_score": 2.0,
      "question": "Negative electrode used in Nickel         MH Batteries are _____________.",
      "instructor_answer": "Hydrogen absorbing alloys (MH)",
      "student_answer": "Hydrogen absorbing metal alloys"
    },
    {
      "question_id": "64",
      "model_score": 81.8,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petals if we threshold a narrow range around 0 degree for Hue we can segment the shades of red since 0 degree corresponds to red in hue. However the rose petals are both bright and dark so we do not add any threshold on intensity and saturation."
    },
    {
      "question_id": "65",
      "model_score": 74.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "increases the readability of code for programmers and easy debugging as more modularity is shown than previous\n\nmakes it easy for new people introduced to program to just know what are the functions in class and values to pass and purpose and need not know about working \n"
    },
    {
      "question_id": "65",
      "model_score": 21.6,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Easy to get that these are the membered functions of a class"
    },
    {
      "question_id": "28",
      "model_score": 34.8,
      "human_score": 2.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "helps in constructing intricate or difficult shape of product in a constructive manner. \nit's a step by step process which helps to generate shapes. \n"
    },
    {
      "question_id": "40",
      "model_score": 2.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "TRUE"
    },
    {
      "question_id": "36",
      "model_score": 78.7,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "Climate\nlevel of industrialization\nquality and standard of living\nsize of city\ncost, pressure, quality of water supply"
    },
    {
      "question_id": "65",
      "model_score": 73.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.better readability of the code.\n2.one may want to implement the function differently in different usecases. So he/she may want to define the declaration in one header(. file and provide two implementations for the same declaration in two other different .cpp files."
    },
    {
      "question_id": "51",
      "model_score": 91.7,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1) ionisation of active sites such as OH and COOH groups depending on pH of medium\n2) Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative)"
    },
    {
      "question_id": "65",
      "model_score": 75.7,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. It is easier to analyse various member functions of a class as they just have their declaration in the class body and thus enhance the readability of the code.\n2. It is easier to debug the code since the implementation of each function is present seperately. Moreover declaration also helps in the usage of a class/function before their definition."
    },
    {
      "question_id": "105",
      "model_score": 80.6,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, It executes the same instruction and ensures no page fault this time. i.e handles page-fault-recurses the same instruction and if any page fault occurs again handle and re-execute, then go to next instruction."
    },
    {
      "question_id": "83",
      "model_score": 63.0,
      "human_score": 0.0,
      "question": "What is the difference between basin order and channel order?",
      "instructor_answer": "Basin order is highest order of any stream in that basin whereas Channel order is order of stream\nwhich denotes that what order of streams has joined the channel.",
      "student_answer": "Channel order is the Order of the highest order streams. For example, two first order streams (or more) will make a second order stream and similarly for highest orders."
    },
    {
      "question_id": "50",
      "model_score": 54.6,
      "human_score": 1.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "design of reservoir components, design of weirs or barrages "
    },
    {
      "question_id": "100",
      "model_score": 47.3,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "Low MRR, Hazardous to operator"
    },
    {
      "question_id": "68",
      "model_score": 55.6,
      "human_score": 1.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "a multiple layer perceptron neural network with multiple hidden layer is required when we want to classify more than 2 number of classes. the each hidden layer learns some part of character the certain class through weights and bias term"
    },
    {
      "question_id": "65",
      "model_score": 66.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "***From the point of view of code aesthetics and ease of viewing/access, the class declaration is made less cluttered when we define the function outside the class declaration. This makes debugging easier.\n\n***Logically, declaring a specific function outside the class declaration may also allow us to insert a piece of code in between the declaration and the definition, which might be crucial for that specific function but could not have been declared beforehand due to chronological issues."
    },
    {
      "question_id": "94",
      "model_score": 56.2,
      "human_score": 0.0,
      "question": "Why for an asymmetric variable, median is the best measure of central tendency?",
      "instructor_answer": "because around median 50 percent of the distribution is on the left and 50 percent is on the right , so in case of asymmetrial distribution where it is skewed, median will be the best measure of central tendency as mean in case of assymetrical distribution is not accurate measure of central tendency",
      "student_answer": "Since mean would be biased towards the"
    },
    {
      "question_id": "45",
      "model_score": 5.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "**FALSE**"
    },
    {
      "question_id": "86",
      "model_score": 17.2,
      "human_score": 0.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "In order to get clear visualization of 3d colinearity in 2d"
    },
    {
      "question_id": "74",
      "model_score": 61.8,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "When hidden layer number is very large then the issue arrives that are: There is back propogation of error from the output though the hidden layer. It take more time to compute the output using the training data if              of hidden layers are large"
    },
    {
      "question_id": "65",
      "model_score": 59.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "***From the point of view of code aesthetics and ease of viewing/access, the class declaration is made less cluttered when we define the function outside the class declaration.\n\n***Logically, declaring a specific function outside the class declaration may also allow us to insert a piece of code in between the declaration and the definition, which might be crucial for that specific function but could not have been declared beforehand due to chronological issues."
    },
    {
      "question_id": "92",
      "model_score": 76.2,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Applications such as stereo vision, image to image (tempelate) matching benefits from interest  points like corners since they are invariant to image rotation and translation and to some extent to brightness changes as well."
    },
    {
      "question_id": "48",
      "model_score": 90.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False\nIt is possible to use exec system call in parent process before the child process terminates. If the parent process gets scheduled before the child, and it terminates after execution of exec, in that case the child will become orphan and gets attached (as a child) to the app immediately higher parent which is not yet terminated."
    },
    {
      "question_id": "39",
      "model_score": 60.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse, the read end of the pipe is given by fd[0] & write end by fd[1]. These ends can't be used interchangeably. While reading fd[1] can be read using fd[0] in case of an interrupt. This process may not be vice versa."
    },
    {
      "question_id": "39",
      "model_score": 87.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse. Pipe creates one-way channel for communication between processes. Thus, fd[0] is strictly read end and fd[1] is strictly write end. \n"
    },
    {
      "question_id": "105",
      "model_score": 82.3,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False\nIt executes the faulting instruction again."
    },
    {
      "question_id": "65",
      "model_score": 57.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) To make the code look clearer"
    },
    {
      "question_id": "103",
      "model_score": 43.9,
      "human_score": 1.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "low material removal rate"
    },
    {
      "question_id": "47",
      "model_score": 29.7,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "TRUE. The child can decide to schedule the parent before it terminates."
    },
    {
      "question_id": "64",
      "model_score": 75.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0degree, eg. 355degree to 5degree for H since the value of hue for red is 0 and magenta is at 300degree. Only hue thresholding is sufficient as the petals have red and magenta components while others have different hue"
    },
    {
      "question_id": "46",
      "model_score": 25.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\n$\\rightarrow$ False, without the timer interrupt, there are chances that the control never reaches to the OS, i.e., if a parent process forks a new child process, the exec system call won't work until the child process terminates.\n"
    },
    {
      "question_id": "55",
      "model_score": 94.0,
      "human_score": 2.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "cetyl alcohol and stearyl alcohol"
    },
    {
      "question_id": "45",
      "model_score": 92.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue. Scheduler decides which process will run."
    },
    {
      "question_id": "79",
      "model_score": 82.2,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "the equations that is derived after performing several experiments based on observations"
    },
    {
      "question_id": "65",
      "model_score": 61.6,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1). To write a clean and clear coding. \n2).  We can easily find and make changes to it. "
    },
    {
      "question_id": "53",
      "model_score": 58.1,
      "human_score": 0.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "The feature vector used to differentiate roads from other objects should be that dark pixel values parked spatially close to each other In a linear fashion.  The darkness could be given based on a specific threshold."
    },
    {
      "question_id": "98",
      "model_score": 81.3,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "increases tool lifetime and wear resistance, thermal resistance "
    },
    {
      "question_id": "105",
      "model_score": 84.8,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. OS handles the page fault (via allocation and updates to V2E mapping in pgtable) and then it again executes the same faulting instruction as if no page fault to the user which is an abstraction."
    },
    {
      "question_id": "106",
      "model_score": 74.4,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "Ans: - the in the fork() system call, for the child process the kernel stack for the child process is developed as if the child process ( which didn't exist before) called a trap, this is done in kernel by setting up the kernel stack and context for the new created process with the return value to ( eax or ebx register) set to 0 for the child process. of the child process's kernel stack has the eip (instruction pointer"
    },
    {
      "question_id": "40",
      "model_score": 11.6,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "True, the fd indices are fdr & fdw and are standard."
    },
    {
      "question_id": "10",
      "model_score": 54.0,
      "human_score": 1.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "When low priority tasks are elevated to have high priority temporarily due to starvation"
    },
    {
      "question_id": "40",
      "model_score": 25.7,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "True The byte using fd[0] having value 4 of fd, ate to be read using fd[0] having value 3 has it is written on it. The WR operation, using fd[0] cannot be read because of an RW error, waiting we cannot give no other target process (from a pool of several READY processes) the PID of another target process."
    },
    {
      "question_id": "106",
      "model_score": 80.2,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When the fork() system call is called, it creates a child new process which is exactly identical to the parent process. It copies all the values from the PCB of the parent to the B child except the pid which is different & the eax register which is the return value of the fork. In this copying, It also copies the trapframe of the parent process to the child process. So whenever, the child gets scheduled on the CPU, it reloads the trapframe of the parent and returns from kernel mode to the user mode via this registers.\n\nThus, although there was no trap in the child process, it return from kernel mode to user mode via the trapframe copy of the parent process stored in its PCB via initializing the child in the fork."
    },
    {
      "question_id": "9",
      "model_score": 92.4,
      "human_score": 2.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "Wacc and Perpetuity growth rate"
    },
    {
      "question_id": "100",
      "model_score": 47.6,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "low MRR, hazardous to operator, taper issue"
    },
    {
      "question_id": "79",
      "model_score": 41.9,
      "human_score": 0.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "the equation which is derived for specific area of land ."
    },
    {
      "question_id": "98",
      "model_score": 15.0,
      "human_score": 0.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "low thermal conductivity"
    },
    {
      "question_id": "66",
      "model_score": 60.2,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "It is market based, relative to the comparable companies, quick and easy and on existing LTM data."
    },
    {
      "question_id": "106",
      "model_score": 51.5,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " As we all of us know in the child process, it first execute the set of process (the instruction given) needed to be done. If it has a child process to execute return earlier (if it has a child). Once it is completed, then it leaves the kernel mode to the user mode for child process.\nii) Child process return from a trap using wait function or completing the task it needed to be done."
    },
    {
      "question_id": "106",
      "model_score": 41.3,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When we call fork we will copy all the data present PCB and create new PCB for child and qillocate new entry in the pox table while creating fork for each process we will add variable pid for parent we will make that variable as pid of the newly created process and in the child we will make the variable lo'\nwhen parent when calling the forks() we enters into the trap state so for exiting we will just return the value of variable by return from trap but child is process created in the trap state. So it will know pid of parent process from which it is created. So it goes to parent process and get the which"
    },
    {
      "question_id": "87",
      "model_score": 87.9,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "microorganisms begin to grow and form a small layer which is known as schmutzdecke.this mechanism of particulate removal in the slow sand filter."
    },
    {
      "question_id": "72",
      "model_score": 20.8,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "The compresion ratio is very low in case of outlive compression. The data size is huge and compression may lose the important information."
    },
    {
      "question_id": "63",
      "model_score": 65.2,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "For green leaves hue in narrow range around 120 degrees and intensity in broad range centered around 0.33 as some leaves are brighter while some are in shadow"
    },
    {
      "question_id": "102",
      "model_score": 49.1,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "particle size\nfrequency\namplitude "
    },
    {
      "question_id": "104",
      "model_score": 26.3,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " A user process may attempt to modify variables outside its address space, which is avoided by using virtual memory and not allowing the process to modify or protect the rest of the memory being exposed.\nA user process may attempt to read from a file which is either taking too long or doesn't have read permissions. The first one is taken care of by timer interrupts, which will preempt the process waiting for I/O, and the second will be taken care of by the file system, not allowing to read the file because of no permissions."
    },
    {
      "question_id": "39",
      "model_score": 89.3,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFALSE. We can't read or write on one file descriptor.\n"
    },
    {
      "question_id": "63",
      "model_score": 66.1,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Green color is around 120 degree Hue, and there is broad shades of green in the image we can choose 120-140 degrees range for green color. Since there are both dark and bright stem and leaves, we can select Intensity to be broad range of 0-1. For saturation we can choose narrow range of 0-0.2 as the natural green is genea"
    },
    {
      "question_id": "45",
      "model_score": 9.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "FALSE"
    },
    {
      "question_id": "61",
      "model_score": 19.1,
      "human_score": 0.0,
      "question": "Three key principles of ISO series are                                             .,                                                                                                                              ...and                                                                                  .      ",
      "instructor_answer": "Consensus , Industrial wide applicability and Voluntary Nature",
      "student_answer": "1. it ensures compliance to environmental legislations.\n2. it is the responsibility of polluters to take responsibility for the pollution.\n3. it maintain the integrity that the products actually meet a certain criteria of standards, hence the buyers can have a degree of trust.\ngenerally, two categories of standards are there. \none, informative and regulatory standards.\ntwo, organisational and product based standards.\nthe ISO model involves plan,act and check model."
    },
    {
      "question_id": "32",
      "model_score": 85.3,
      "human_score": 0.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "when the actual gradient is greater than canal gradient."
    },
    {
      "question_id": "106",
      "model_score": 0.9,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "4"
    },
    {
      "question_id": "66",
      "model_score": 24.3,
      "human_score": 0.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "it captures analysts confidence"
    },
    {
      "question_id": "72",
      "model_score": 87.0,
      "human_score": 2.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "maximum image quality should he preserved. full use of channel capacity should be ensured. Date rate should not exceed maximum channel capacity."
    },
    {
      "question_id": "65",
      "model_score": 67.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) when we specify interface to the user, then user can only see the declaration of functions and not the actual implementation, and can use the functions without looking whole 300-400 lines of code.\n2) we can declare functions inside the interface and later define another subclass which inherits former class and override the function in it according to our need. "
    },
    {
      "question_id": "8",
      "model_score": 18.3,
      "human_score": 1.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1, as it does not have any complete entries or logs"
    },
    {
      "question_id": "90",
      "model_score": 72.2,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "The utility of the non-linear transformation is that the neurel network can learn hidden patterns between the data & the corresponding class labels, of the classifier thereby improving the capability of the classifier  to work with complicated data."
    },
    {
      "question_id": "81",
      "model_score": 67.9,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "Low eigen values denotes very low variance all the values are concentrated towards its mean."
    },
    {
      "question_id": "38",
      "model_score": 72.1,
      "human_score": 1.0,
      "question": "Open dumping of waste is a major practice in India. Two major environmental problems associated with are                                                                                                                                                                  ",
      "instructor_answer": "1.Leachate generation and mismanagement\n2.Release of GHGs due to anaerobic reactions\n3.Odour\n4.Insects and rodents infestation leading to public health issues",
      "student_answer": "Release of gases like methane into the environment, leaching of toxins into water bodies"
    },
    {
      "question_id": "98",
      "model_score": 46.7,
      "human_score": 1.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "It has good adhesion, toughness and resistance to chipping is also high which performs well on drills"
    },
    {
      "question_id": "65",
      "model_score": 72.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)Makes it easier for the user to get a list of all functions at one place,that helps in builiding Application Programming interface.\n2)The user doesnt have to know the internal implementation, and hence separating declarations from definition also helps in avoiding unnecessary cluttering.\n3)If Declarations are to be changed later, then we can do so by changing only the file where the code for Declaration is written, however if it were to be Declared and defined elsewhere, the code has to be changed in all those places,where it is defined and declared, while not in those places where it is only defined."
    },
    {
      "question_id": "36",
      "model_score": 54.1,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1) Geographical location 2) size of the city or town"
    },
    {
      "question_id": "105",
      "model_score": 82.2,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, It updates the same instruction again, because it is page-fault before. it is not completed so it should be executed again."
    },
    {
      "question_id": "19",
      "model_score": 72.8,
      "human_score": 2.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "it is a state to make decisions of which turn to take, left, right or u-turn "
    },
    {
      "question_id": "100",
      "model_score": 93.8,
      "human_score": 2.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "material removal rate is low, life of the nozzle is very less and the ones which have higher life are expensive"
    },
    {
      "question_id": "105",
      "model_score": 86.6,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, the OS executes the instruction that caused the page fault."
    },
    {
      "question_id": "44",
      "model_score": 86.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse. OS might schedule on other interrupts, such as I/O, interrupts.\n"
    },
    {
      "question_id": "46",
      "model_score": 32.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue. Timer interrupt is like a non-preemptive interrupt whenever a system call switches and can also schedule ready processes."
    },
    {
      "question_id": "49",
      "model_score": 52.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Reasons for process creation.\n There are two TCBs.\n Once there are multiple processes initiated from the same binary program, they are still their own TCB, they may be copying different processes."
    },
    {
      "question_id": "65",
      "model_score": 59.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) The program becomes easy to understand as all the declarations will be available in one place.\n2) "
    },
    {
      "question_id": "106",
      "model_score": 71.2,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "When fork system call is made, a trapframe is explicitly created for child process. The new trapframe is exactly same as that of parent but with one difference that return value here is 0 opposed to pid in parent. Also, kernel stack is created to hold this trapframe. Now that trapframe exists, we can return to user mode like any other process does it."
    },
    {
      "question_id": "81",
      "model_score": 57.0,
      "human_score": 0.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "Low eigen value with principal component tranform applied to high dimension data conveys flat region where varaince is almost constant."
    },
    {
      "question_id": "47",
      "model_score": 92.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue. The parent and child processes are 2 independent processes and therefore the parent process is allowed to use the exec system call before its child terminates."
    },
    {
      "question_id": "75",
      "model_score": 42.2,
      "human_score": 2.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "k and x are constant for a given catchment"
    },
    {
      "question_id": "43",
      "model_score": 81.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False\nOn interrupt from timer, the kernel may decide to schedule another process. This process' context will be saved on its kernel stack.\n"
    },
    {
      "question_id": "103",
      "model_score": 52.2,
      "human_score": 1.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "Material removal at a smaller rate"
    },
    {
      "question_id": "21",
      "model_score": 92.1,
      "human_score": 2.0,
      "question": "Differentiate between true random number and pseudorandom number generators.",
      "instructor_answer": "TRNG uses unpredictable physical mean for computation of random\nnumber, results are truely random and unpredictable , some random numbers cannot be reproduced. PRNG uses mathematical algorithm which are computer based. Its logical which uses mathematical formulas to generate sequence of random number. Some random number can be produced.",
      "student_answer": "TRNG use an unpredictable physical means to generate numbers. It is Non - Deterministic Whereas PRNG use mathematical algorithms to generate random numbers. It is deterministic."
    },
    {
      "question_id": "8",
      "model_score": 84.6,
      "human_score": 1.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1 is not a leader in any three."
    },
    {
      "question_id": "105",
      "model_score": 86.5,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, even if the allocation of page and updates to V2P address mappings are successfully done and, the execution should continue from the line which caused page fault, not from the next line"
    },
    {
      "question_id": "52",
      "model_score": 54.9,
      "human_score": 0.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a tensor\nstress/Young's modulus"
    },
    {
      "question_id": "67",
      "model_score": 96.9,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "method of moment, maximum likelihood method"
    },
    {
      "question_id": "63",
      "model_score": 54.2,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "To segment the green leaves we can ba narrow edge at H being around 120/360 degrees and intensity"
    },
    {
      "question_id": "48",
      "model_score": 58.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFALSE, we can for parent to execute first by introducing sleep() in child."
    },
    {
      "question_id": "104",
      "model_score": 36.3,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " (P) Action where prom tries to change its IP tries to re-boot the system. Basically prom by changing its IP address is nothing but some This is known to provide clone boot exists and is used when regular turn fixed address where boot code exists and is used as a privileged on . This is presented by LDE setup as this is a privileged setup.\n(ii) Prom tries to access memory from kernel base. Is it random since process doesn't know what this cause those addresses to try to modify it, but LDE stops this because those addresses shouldn't be dined only by OS.\n(iii) Ticks are used not only for timer interrupts but also for libraries register to change the timer intervals but OS and hence LDE results in change in fair scheduling logic of OS and hence LDE prevents this."
    },
    {
      "question_id": "64",
      "model_score": 78.1,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H : a narrow band around 0 degrees. 0 degree corresponds to Red Hue and since there is no other Red body in the picture, hue should be a narrow band around 0 degrees. \n\nS : Since the red is not pure due to shadow, the saturation needs to be a wide band like 0.3 to 1, i.e. a wide band centred at just above 0.5, say towards \n\nI : Due to shadow of rose petals, the red is darker in some patterns, also in some portions, it is bright. So intensity has to be a wide band centred at 0.5, like 0.15 to 0.85\n\n"
    },
    {
      "question_id": "82",
      "model_score": 72.7,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Non-linear discriminant function can classify correctly in many cases which linear function cannot or when distribution of class is such that it may require more than one linear boundary to classify it."
    },
    {
      "question_id": "82",
      "model_score": 68.9,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Functions like XOR cannot be classified by linear discriminant funcion. Or for the datasets that don't have linearly separable boundary we require  non-linear discriminant"
    },
    {
      "question_id": "49",
      "model_score": 20.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True, an executable library program can have more than i instance of the same code bit different ids"
    },
    {
      "question_id": "41",
      "model_score": 76.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "True\nIt might happen that the scheduling mechanism schedules a process different from last.\n"
    },
    {
      "question_id": "99",
      "model_score": 3.1,
      "human_score": 0.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "Not so uniform (accuracy)"
    },
    {
      "question_id": "22",
      "model_score": 21.2,
      "human_score": 0.0,
      "question": "During coagulation process alkalinity reduces due to the ___________________________",
      "instructor_answer": "As coagulation is done,the OH- tend to form more bonds with the molecules in the sample, and H+ concentration increases which lowers the pH level.",
      "student_answer": "settling of compounds which increases alkalinity"
    },
    {
      "question_id": "63",
      "model_score": 72.5,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "A narrow range around 120 degree for H (due to green color of leaves). A narrow range of I centered at 0.7 (since leaves are more bright compared to stem). A broad range of S centered at 0.5."
    },
    {
      "question_id": "39",
      "model_score": 45.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse, 'vice-versa' is not true\n"
    },
    {
      "question_id": "39",
      "model_score": 95.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse, fd[0] is always used for read and fd[1] is used for write."
    },
    {
      "question_id": "64",
      "model_score": 74.2,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Narrow range around 0 degrees for H (to get red colour), intensity variation is high so take entire range of intensities, threshold saturation using a lower bound since colour in the petal is highly saturated."
    },
    {
      "question_id": "105",
      "model_score": 87.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. After handling the page fault OS continues to execute same instruction at which page fault occurred."
    },
    {
      "question_id": "95",
      "model_score": 79.7,
      "human_score": 2.0,
      "question": "Why the steeper main streams results in the Hydrographs with smaller time base?",
      "instructor_answer": "Steeper basin streams allows the run off  to leave the basin quickly because of high slope.Time base means the amount of time for run off to leave the catchment after the storm. So, if there is steeper slope,  excess run off will get out  quickly. Hence time base reduces.",
      "student_answer": "because of steeper slope water reaches at faster speed to catchment outlet. Hence reducing the base time."
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " FALSE\nFirst let's say we increased the heapsize\nptr = malloc(4096)\nthen access ptr\n->ptr=5 but due to lazy allocation policy we get page fault\n& page fault will be handled & the virtual address\nwill be mapped to physical address"
    },
    {
      "question_id": "74",
      "model_score": 75.7,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "It is very difficult to train the model when number of hidden layer re very large. It may also lead to overfitting or memorizing the training data rather than generalise."
    },
    {
      "question_id": "8",
      "model_score": 59.3,
      "human_score": 0.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N4, because otherwise it would have been able to  add 'c' to any of the other nodes in term 1, it can't be a leader in any other term as well"
    },
    {
      "question_id": "1",
      "model_score": 40.3,
      "human_score": 0.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "discounting rate wacc remains constant"
    },
    {
      "question_id": "20",
      "model_score": 78.2,
      "human_score": 1.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "Intermittent, streams have fluctuations in their discharge from base flow as well as some surface runoff. These are the intermediate between perenial and ephemeral streams, having some base flow but discharge varies with surface runoff contribution. Ephemeral streams have almost zero and or no base flow. These streams may run dry during some months of the year,"
    },
    {
      "question_id": "106",
      "model_score": 79.4,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " The child process on creation and after copying the content of parent, (also the eax register is changed for return value of fork) has it's status as \"ready\" and the scheduler can just schedule this process and it can run.\nNote that the kernel stack of child process will also be copied.\nNote that we can restore the trap frame and context from the PCB, as copied from parent and hence the return from trap works because of context trapframe & context"
    },
    {
      "question_id": "63",
      "model_score": 74.1,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "stem and leaves are green in colour.  Narrow band around H = 120 degrees . Both S and I in a broad range centered around 0.5 since they can differ based on how sunlight falls on it."
    },
    {
      "question_id": "44",
      "model_score": 89.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFALSE\nWhen a program calls any system call (eg: I/O event), the control goes to OS and OS can schedule any other process. P2, while & system call by P1 is getting handled and CPU is free."
    },
    {
      "question_id": "106",
      "model_score": 0.9,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "4"
    },
    {
      "question_id": "65",
      "model_score": 58.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1 . we can easily figure out which member function or orther things handle this class . \n2 . we easily figure which function need to declare in this class for handling program and even this is a part of well structured programming ."
    },
    {
      "question_id": "49",
      "model_score": 88.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. If a same binary is executed multiple times, all those instances are treated as different processes, each with its own PCB."
    },
    {
      "question_id": "44",
      "model_score": 83.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "FALSE. Any machine interrupt can give the chance to OS to schedule READY processes after completion of interrupt handles, which schedules READY processes."
    },
    {
      "question_id": "68",
      "model_score": 66.6,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "when relation between input feature and output is complex, more than one hidden unit is desirable. also when the network is not able to learn relationship, then also more no. of hidden units are desirable"
    },
    {
      "question_id": "9",
      "model_score": 86.7,
      "human_score": 2.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "WACC, Perpetuity growth rate or exit multiple"
    },
    {
      "question_id": "65",
      "model_score": 53.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Some      advantages of separating declaration from definition are:\n1) If declarations have been written together in the program, then when a user sees the code file, he'll have an easy time figuring out what all methods are available in the program\n\n2) Suppose I have two methods f() and g() wherein f wants to use g and g  wants to use f. then we have to declare them both together first and then we can use, otherwise we cannot.\ne.g. \nint f(int p){\nif(\n}\nint g()"
    },
    {
      "question_id": "47",
      "model_score": 5.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\n**True**"
    },
    {
      "question_id": "87",
      "model_score": 76.7,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "slow sand filters work through the formation of a gallatious layer called hypogeal layer  in the top few milimeters of the fine sand layer."
    },
    {
      "question_id": "49",
      "model_score": 0.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Every process has its own PCB that it sent to execute. For example, fork even though become PID of processes are different to different PCs, we must"
    },
    {
      "question_id": "64",
      "model_score": 48.5,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "narrow range around 0 degrees for H, narrow range around 0.8-1 for S, broad range around 0-0.4 for I"
    },
    {
      "question_id": "52",
      "model_score": 83.6,
      "human_score": 0.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a change in length of the specimen per unit length on application of stress"
    },
    {
      "question_id": "76",
      "model_score": 6.7,
      "human_score": 0.0,
      "question": "What are the two important aspects of reservoir routing under a flood control criterion?",
      "instructor_answer": "peak discharge reduced and\n peak flow gets shifted",
      "student_answer": "1. For linear Reservoir , Q= K*S ,( here X=0)\n\n"
    },
    {
      "question_id": "65",
      "model_score": 68.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)It increases the readability of the program.We are able to define the function outside the class which enhances the code quality as one can first see what all member functions exist inside the class.\n2)It tells the compiler about the signature(arguments) of the function first. So it will show some error if we use the wrong signature while defining it which happens sometime due to programmers mistake."
    },
    {
      "question_id": "29",
      "model_score": 97.6,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "Rainfall Intensity , time"
    },
    {
      "question_id": "70",
      "model_score": 26.3,
      "human_score": 0.0,
      "question": "What approach should be followed to find a reasonable probability distribution for a given time series?",
      "instructor_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanalysis the results\n",
      "student_answer": "1. observed the variations type from the date set.ie( linear or nonlinear)\n2. Find the mean, "
    },
    {
      "question_id": "87",
      "model_score": 70.5,
      "human_score": 0.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "1. The slow sand filtration process is initially physical and chemical but mostly a biological process. \n2. Over time, on the filter medium a micorll"
    },
    {
      "question_id": "105",
      "model_score": 77.2,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. The current (faulting) instruction hasn't been completed so can't move on to next instruction since other program factors are still executing."
    },
    {
      "question_id": "100",
      "model_score": 85.6,
      "human_score": 2.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "Low MRR, Limited nozzle life"
    },
    {
      "question_id": "87",
      "model_score": 96.9,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter"
    },
    {
      "question_id": "63",
      "model_score": 65.6,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "narrow range for Hue channel around 120deg ,115 to 125 for picking green parts of the channel and for picking darker or black parts of image take narrow channel in Intensity(I) channel around 0 ,0 to 0.1 and must have Green as the max component as it might pick the dark red parts too which we don't want"
    },
    {
      "question_id": "51",
      "model_score": 17.7,
      "human_score": 0.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "Electrical double layer to stabilise the particles &"
    },
    {
      "question_id": "28",
      "model_score": 29.2,
      "human_score": 1.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "regular set operations are closed under reg. boolean set operations and"
    },
    {
      "question_id": "49",
      "model_score": 78.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, each process has its own process-\n control block."
    },
    {
      "question_id": "65",
      "model_score": 48.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1: We can rapidly check what are the member functions present in the class and it's easy to understand abstraction. 2: If we want to use a specific class in a member function then we can just declare them and then after class we can declare class variables and then we can use that variables in member functions while defining."
    },
    {
      "question_id": "65",
      "model_score": 67.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. It makes code easy to read what are the functions defined and can read the its defination seperately. Altogether it is better way abstraction.\n2. If in some class we many virtual and simple member functions then it become to keep track of them, especially when we inherit this class to some other subclass."
    },
    {
      "question_id": "54",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "The appetitive      faculty corresonds to      ",
      "instructor_answer": "Plato's theory of the soul, the appetitive faculty is one of the 3 divisions of the soul. It is the part dealing with desires and passions",
      "student_answer": "Plato's theory of the soul, the appetitive faculty is one of the 3 divisions of the soul. It is the part dealing with desires and passions"
    },
    {
      "question_id": "28",
      "model_score": 89.2,
      "human_score": 2.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects"
    },
    {
      "question_id": "49",
      "model_score": 89.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, for each and every process has its own PCB\n When we run an other instance of the executable\n it is treated like a separate process."
    },
    {
      "question_id": "39",
      "model_score": 76.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "False. The pipe system call creates two file descriptors, fd[0] is for read and fd[1] is for write. We can't use vice-versa because it leads to confusion in program. OS has particular fa value for read and write."
    },
    {
      "question_id": "42",
      "model_score": 52.9,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "False.  User doesn't has capability to initiate a context switch but can make other process wait until completion of target process using waitpid."
    },
    {
      "question_id": "63",
      "model_score": 67.7,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "A narrow range of H around 120 degrees and Intensity(I) centered around 0.5 and Saturation(S) approximately 1"
    },
    {
      "question_id": "84",
      "model_score": 71.8,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "If we use perceptron classifier, it can only converge On linearly separable data and hence it Cannot imitate the XOR function. A multiplayer perception classifier has multiple players & thus Can add non-linearly."
    },
    {
      "question_id": "96",
      "model_score": 51.2,
      "human_score": 1.0,
      "question": "Why to test the level of significance in hydrological time series analysis and modeling? Which test will you use to test the level of significance?",
      "instructor_answer": "The test of level of significance is used to test how well our prediced model fits observed data (goodness of Fit test).It is important because it gives the prorbability of rejecting the null hypothesis using a statistical test. The chi-square (X2) test is used to test the level of significance.",
      "student_answer": "Level of significance in hydrological time series is done to have confidence on our sample time series, as getting population data is very difficult."
    },
    {
      "question_id": "64",
      "model_score": 64.7,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A concial range, surrounding a narrow region of H around 0 degree with as High Intensity and Saturation Possible above a certain threshold"
    },
    {
      "question_id": "79",
      "model_score": 55.2,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "it is a mathematical equation whose free parameters are set according to the experimental data to obtain the for"
    },
    {
      "question_id": "86",
      "model_score": 5.9,
      "human_score": 0.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "we can apply it for any number of points then"
    },
    {
      "question_id": "74",
      "model_score": 82.0,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "when the hidden layers are very large, the model will overfit the data. It will start fitting itself to the noise and outliers also. This will lead to a very complex decision boundary that does not generalise well to new data. All in all, the model will have a small loss value on train set but large loss with many misclassifisations on test set."
    },
    {
      "question_id": "65",
      "model_score": 65.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Class declarations(without definition) act as a compact representation of what all variables and member functions it contains. This gives the user/programmer a compact idea of the class without having to go through implementation of its member functions.\n2. In very large programs,it is a good practice to declare a class in one header file and define all its member functions in a different file.This gives the programmer a higher level idea of what all is going on in the programme as now they can refer to the function definition file only when they want to see/make changes to the implementation of any function and they can refer to the class declaration whenever they want to get a general idea of the class."
    },
    {
      "question_id": "88",
      "model_score": 28.6,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "1. To prevent self- neutralization \n2. To control the formation of sludge \n"
    },
    {
      "question_id": "25",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Full form of ELISA is ____________________.",
      "instructor_answer": "Enzyme linked immunosorbent assay",
      "student_answer": "Enzyme Linked Immunosorbent Assay"
    },
    {
      "question_id": "65",
      "model_score": 70.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Separating declaration and definition can make the code look neat and understandable. Defining a function separately can be done whenever needed instead of trying to adjust the whole code. And if same variable names are used in two separate functions, separating definition would make it less complicated and less probability of getting errors."
    },
    {
      "question_id": "65",
      "model_score": 72.9,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) It keeps the body of the class less cluttered and neat\n2) By separating declarations and definitions, when a user of the abstraction looks at the body, he gets an idea of all the member functions(and their arguments) without worrying about the implementation part(how the function works is not his concern, he only uses the function)\n3)"
    },
    {
      "question_id": "64",
      "model_score": 66.1,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petals we take product of saturation of saturation mask and hue having hue valu"
    },
    {
      "question_id": "48",
      "model_score": 67.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse, If in this case exec is in parent once it runs, the child can run after parent's exec finishes."
    },
    {
      "question_id": "19",
      "model_score": 82.3,
      "human_score": 2.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "the purpose was to decide which action out of rotateleft rotate right rotate 180 to take after reaching the node."
    },
    {
      "question_id": "71",
      "model_score": 96.5,
      "human_score": 2.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "dust particles (clay minerals, organic salts, ocean salts)"
    },
    {
      "question_id": "44",
      "model_score": 83.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFALSE. Even without timer interrupts, OS can perform multitasking when the processes do system calls. If no system calls are made, we can't perform multitasking (in that case).\n"
    },
    {
      "question_id": "3",
      "model_score": 79.5,
      "human_score": 2.0,
      "question": "                                                                                                                                                                                                                                                                                                                                                                   efficiency is the ratio of the quantity of water stored in the root zone of the crops to the quantity of water actually delivered into the field.",
      "instructor_answer": "Efficiency of water application",
      "student_answer": "efficiency of water applications/ irrigation"
    },
    {
      "question_id": "53",
      "model_score": 65.8,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "for categorise the roads the Input feature - the width of road. (Highway will wider ), the length of road (Highway will longer), space between to line"
    },
    {
      "question_id": "10",
      "model_score": 27.4,
      "human_score": 0.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "When a task is running for a long time, it's priority is reduced. \ninversely proportional to time"
    },
    {
      "question_id": "7",
      "model_score": 45.1,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "mechanically removing top few centimetres of the filter or by Bio-Filtration"
    },
    {
      "question_id": "72",
      "model_score": 60.9,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "We cannot compress the image too much as then it will become useless for people at groundstation and we even can't leave it uncompressed as then transmission will the problem due to limit on downlink bandwidth."
    },
    {
      "question_id": "65",
      "model_score": 48.5,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Seperating Definition from declaration can be used in cases like virtual functions where a function is declared in parent class and it is defined in subclasses as we have done in the labs\n\n2)Seperating Definition from declaration\nalso makes the "
    },
    {
      "question_id": "67",
      "model_score": 17.6,
      "human_score": 0.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "point estimation, interval estimation"
    },
    {
      "question_id": "65",
      "model_score": 57.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "- Separating declaration from definition helps reduce clutter in the class definition.\n- It helps the reader of the code to know all the member functions at once, instead of searching through the code."
    },
    {
      "question_id": "31",
      "model_score": 17.9,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "The disriminant function projects the data on a single axis. It reduces the multidimensional classification to a single dimension,"
    },
    {
      "question_id": "49",
      "model_score": 30.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True. This can be done by giving the executable of the running program to itself by calling exec. In this case all processes use PCBs with reference counter to know the number of instances."
    },
    {
      "question_id": "46",
      "model_score": 78.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTRUE - Even without the timer interrupt, there is still scope for cooperative OS control. This happens when processes voluntarily return control back to OS during system calls (through the yield() function for cooperative OS control).\n"
    },
    {
      "question_id": "97",
      "model_score": 59.5,
      "human_score": 2.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "depth of cut, stiffness of machine, type of chip"
    },
    {
      "question_id": "36",
      "model_score": 26.3,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1. Domestic Use (Drinking, Washing, Bathing)\n2. Commercial Use\n3. Industrial Use\n4. Fire Demand"
    },
    {
      "question_id": "64",
      "model_score": 57.0,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "narrow range around H (0      ). \nlooser/narrow range around S (centered around 1) and I (centered around 0.5 or above and extending to values close to 0), in the image"
    },
    {
      "question_id": "27",
      "model_score": 58.9,
      "human_score": 2.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "laser printer, laser surgery and skin treatment"
    },
    {
      "question_id": "69",
      "model_score": 73.4,
      "human_score": 0.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "the time during which silting beyond a certain level doesn         t take place."
    },
    {
      "question_id": "96",
      "model_score": 85.6,
      "human_score": 2.0,
      "question": "Why to test the level of significance in hydrological time series analysis and modeling? Which test will you use to test the level of significance?",
      "instructor_answer": "The test of level of significance is used to test how well our prediced model fits observed data (goodness of Fit test).It is important because it gives the prorbability of rejecting the null hypothesis using a statistical test. The chi-square (X2) test is used to test the level of significance.",
      "student_answer": "Level of significance is used to check whether the modeling fits the data or not. Whether our modeling is correct or not. Chi -square test is used to test significance."
    },
    {
      "question_id": "42",
      "model_score": 62.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "**False** ONLY the OS has the capability to run a specific process next. If, however, it has user process know the PID's of all other processes & this process could have sent a signal to STOP to all other processes."
    },
    {
      "question_id": "47",
      "model_score": 29.9,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue, make the child process Blocking thus results in completion of parent process first before termination of child process."
    },
    {
      "question_id": "106",
      "model_score": 72.5,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "When a fork() call is made the os first allocates a process using allocproc() and then copies various attributes like, open-files, context, etc. from the parent to the child. It also allocates space for the user-stack of the new process. However since there was no trap for the child process, it copies the parents trap-frame to the child and sets the eax in the trapframe to 0. Now since the new process has almost everything set up as the parent process and the os has also set up the trapframe, the child process can return from the trap using trapget and since eax was set to 0 we also get the value returned by fork to be 0 in the child process."
    },
    {
      "question_id": "88",
      "model_score": 57.2,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "to balance the concentration and to assist self neutralization."
    },
    {
      "question_id": "51",
      "model_score": 64.2,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "The colloidal particles are electrically charged.\nReasons:\n1.surface ion charge : The surface contains ionogenic metals which give a net positive or negative charge depending on the pH\n2.Adsorption: Charges with opposite charge are adsorbed on the surface of colloids giving a net negative charge "
    },
    {
      "question_id": "64",
      "model_score": 91.7,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment the rose petals a threshold should be set as a narrow range around 0      . For detecting rose petals we need to detect red color in an image. Converting RGB values of red color into HSI space gives hue of pure red color as 0      . Therefore threshold should be set as narrow range around 0       for hue."
    },
    {
      "question_id": "42",
      "model_score": 72.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse, kernel context switch can only be done by OS (from kernel mode). No user process has that privilege.\n"
    },
    {
      "question_id": "2",
      "model_score": 8.1,
      "human_score": 0.0,
      "question": "\nWhat\nis the Full form of RCP?",
      "instructor_answer": "Representative Concentration Pathway",
      "student_answer": "resource consumption potential"
    },
    {
      "question_id": "35",
      "model_score": 65.2,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Drip irrigation, sprinkler irrigation"
    },
    {
      "question_id": "81",
      "model_score": 61.6,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "It denotes that the variance is very low for the tranformed bands."
    },
    {
      "question_id": "64",
      "model_score": 28.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360 degrees for H"
    },
    {
      "question_id": "29",
      "model_score": 7.1,
      "human_score": 0.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "pressure and temperature"
    },
    {
      "question_id": "65",
      "model_score": 71.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "A neater, more compact code inside the class {} block which is easier to read and to gain information about the existing members/member functions.\nAll function definitions listed later have their separate blocks which also start with the class marker(in the syntax--\nfn_type  class_name : :  fn_name(parameters) )\nwhich will make redefining, locating and debugging easier.\nPublic, private, protected keywords have concise lists of member functions/variables ans so available implementation of the class/abstraction is easily understandable when code is read."
    },
    {
      "question_id": "105",
      "model_score": 31.1,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True. Initially only a virtual page is allocated. When that page is tried to be accessed, a page fault results and the OS handles it by assigning a phy. page to that virtual page and updates the page table."
    },
    {
      "question_id": "53",
      "model_score": 66.1,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Some features that might be useful are the edges of roads and colour of road"
    },
    {
      "question_id": "42",
      "model_score": 75.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse\nNo, it can't as context switching can be done only by O.S (or any Ring 0 process)"
    },
    {
      "question_id": "71",
      "model_score": 65.8,
      "human_score": 1.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "dust, organic salts, etc"
    },
    {
      "question_id": "27",
      "model_score": 82.8,
      "human_score": 2.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "Lasers are used in cutting and welding. Also Lasers are used in medical surgery"
    },
    {
      "question_id": "51",
      "model_score": 80.5,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1) Imperfection in crystal structure\n2) Ionization of surface sites"
    },
    {
      "question_id": "88",
      "model_score": 44.7,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "balancing fluctuating flow\n"
    },
    {
      "question_id": "47",
      "model_score": 23.6,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue. Nothing happens, since the pid is still the same."
    },
    {
      "question_id": "29",
      "model_score": 40.6,
      "human_score": 1.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "Rainfall depth and time"
    },
    {
      "question_id": "10",
      "model_score": 76.1,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "When a low priority task preempts/executes where a high priority task could have run. This usually happens when using locks or semaphores (the low priority task holds some lock which prevents a high priority task from running if that also contends for the same lock)"
    },
    {
      "question_id": "87",
      "model_score": 61.7,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "removal of pathogens and microorganisms by the formation of a biological film called Schmutzdecke"
    },
    {
      "question_id": "7",
      "model_score": 64.2,
      "human_score": 2.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "scrapping off the top layer of the filter,\nif minimum filter depth is reached then the filter is removed and washed and put back"
    },
    {
      "question_id": "92",
      "model_score": 71.3,
      "human_score": 2.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Interest points like corners are useful for segmentation analysis as there are meeting points for edges and one definite point for the boundary. Moreover in classification they forn an important part of object boundary and their corresponding points set to good accuracies."
    },
    {
      "question_id": "65",
      "model_score": 52.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "mutual recursion is possible (two functions can call each other), better for readability and documentation"
    },
    {
      "question_id": "53",
      "model_score": 69.4,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "If the roads are to be put different categories:  Colour and texture (greyish) roads. Long and straight objects but thin in width and Edge detection of boundaries of roads."
    },
    {
      "question_id": "105",
      "model_score": 74.3,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False: It will execute the instruction that gives page fault and gives us the value by memory for access and then execute next instruction."
    },
    {
      "question_id": "105",
      "model_score": 83.8,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False:\nIf an exception (in this case page fault) occurs, then after handling of exception by OS, the instruction that caused exception is re-executed. (The pipeline maintains an invariant that either an instruction executes completely or not at all.)"
    },
    {
      "question_id": "86",
      "model_score": 19.7,
      "human_score": 0.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "(x, y, 1) we should add 1 in our coordinate for making it homogeneous "
    },
    {
      "question_id": "104",
      "model_score": 22.8,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Two privileged actions examples are reading and writing.\nA user process knows that a certain file exists on the disk. But it cannot directly read/write to a certain physical address in a disk.\nIt must go through the kernel mode to achieve these functions (traps, etc.)."
    },
    {
      "question_id": "19",
      "model_score": 59.5,
      "human_score": 1.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "DecideAction is used to decide which action to perform depending upon the whiteline sensor values. The threshold used for checking for white is  > 200 and < 50 for black. For the three available sensors, if all detect black then it's a node, if sensors detect WBW then it's straight line, if they detect WWB then take a faster differential right, if hey detect WBB then take a slow l"
    },
    {
      "question_id": "48",
      "model_score": 36.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nTrue. Because /after exec system call is never executed. If we use exec system call in parent process and if in case there is no wait sys call if the parent executes first then the child process goes to the other program to be executed. Hence exec cannot be used until child process terminates."
    },
    {
      "question_id": "99",
      "model_score": 57.9,
      "human_score": 2.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "PVD method requires high capital and is difficult to coat complex shapes"
    },
    {
      "question_id": "8",
      "model_score": 54.1,
      "human_score": 2.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1 likely not a leader since doesn't have all the entries, while other nodes have"
    },
    {
      "question_id": "64",
      "model_score": 64.8,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue: A narrow range around 0/360 degrees\nSat: High value, preferably more than 0.5 or 0.6"
    },
    {
      "question_id": "53",
      "model_score": 67.2,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Features for roads- Pattern,  shape or texture. Colours including shadow. Boundaries/lanes"
    },
    {
      "question_id": "106",
      "model_score": 64.1,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " As a child is created by the fork() syscall. Its trap frame is populated with forkset function.\nSo as a child process is scheduled it first goes to the forkset() and then to the instruction printer where parent called forkset. This instruction pointer information is given to the child by the while it was created."
    },
    {
      "question_id": "27",
      "model_score": 12.2,
      "human_score": 1.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "(i)in diffraction of x ray  \n(ii) we can study atomic structure thought electron telescope which uses electron beam ( as a ray ) "
    },
    {
      "question_id": "105",
      "model_score": 27.6,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " as solves the problem of page fault due to an\nunmapped physical page during the trap handler\nit will first check virtual address which causes the\npage fault - valid w/ not and do allocations and\nupdate flags eg: lazy allocation policy or malloc will\nfirst only increase virtual address space when we\nare utilizing it will call of follow"
    },
    {
      "question_id": "67",
      "model_score": 19.9,
      "human_score": 0.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "point estimation method, interval estimation method"
    },
    {
      "question_id": "89",
      "model_score": 24.8,
      "human_score": 1.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "To separate the Base flow from flood hydro graph to obtain direct runoff hydrograph"
    },
    {
      "question_id": "81",
      "model_score": 73.3,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "It indicates that the variance in the eigen vectors direction is very low. High probability of collinearity of the data."
    },
    {
      "question_id": "84",
      "model_score": 63.6,
      "human_score": 1.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "We observe that multilayer perceptron classifier works much better than perceptron classifler in performance when handling the XoR problem."
    },
    {
      "question_id": "65",
      "model_score": 76.8,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.better readability of the code.\n2.one may want to implement the function differently in different usecases. So he/she may want to define the declaration in one file and provide two implementations for the same declaration in two other different files."
    },
    {
      "question_id": "106",
      "model_score": 34.9,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " Child process\nIf there is no specific task in child process, it gets executed completely and then the context switch happens to another process which is ready to get scheduled. So, it returns to user mode from kernel mode."
    },
    {
      "question_id": "55",
      "model_score": 88.6,
      "human_score": 2.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "cetyl alcohol stearyl alcohol"
    },
    {
      "question_id": "33",
      "model_score": 17.0,
      "human_score": 0.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "transpiration and condensation"
    },
    {
      "question_id": "44",
      "model_score": 33.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse. Scheduling can be done in kernel mode only.\n"
    },
    {
      "question_id": "92",
      "model_score": 76.2,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Applications such as stereo vision, image to image (tempelate) matching benefits from interest  points like corners since they are invariant to image rotation and translation and to some extent to brightness changes as well."
    },
    {
      "question_id": "88",
      "model_score": 79.6,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "to assist self neutralisation, to balance fluctuations in flow and concentration"
    },
    {
      "question_id": "77",
      "model_score": 12.7,
      "human_score": 0.0,
      "question": "What are the two important scales in Hydrology? ---------------------",
      "instructor_answer": "Availability of driking water, time scale, length of the process, spatial scale.",
      "student_answer": "Scientific and Engineering"
    },
    {
      "question_id": "63",
      "model_score": 57.6,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Wide range of I centred around 0.5, narrow range of H around 120 degrees, wide range of S centred around 0.5"
    },
    {
      "question_id": "63",
      "model_score": 64.8,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Shadowy stem with low I and S. Wide range of I centred around 0.5, narrow range of H around 120 degrees, wide range of S centred around 0.5."
    },
    {
      "question_id": "49",
      "model_score": 86.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE\n A process abstracts a running program, and two running programs are distinct even if they are running the same code. Thus they appear as different entries in the PCB."
    },
    {
      "question_id": "42",
      "model_score": -0.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "F"
    },
    {
      "question_id": "65",
      "model_score": 70.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) If the declaration are seperated, the reader will know all the variables used at once without getting involved in cumbersome task of reading their definition.\n\n2) The definition can be read seperately for each function whichever function is required by the reader/user."
    },
    {
      "question_id": "49",
      "model_score": 0.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "It will need different PC's as different processes can be in different states ( one is backed, one is running ) and different processes can be executing different lines of code and we have to store different contents, so we should use different PC's."
    },
    {
      "question_id": "63",
      "model_score": 64.2,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "narrow around 120 degrees for H since green is 120deg in hsi, around 0.3-0.7 for I because not very bright, S narrow range around 1 like 0.7-1since it is not pure green"
    },
    {
      "question_id": "64",
      "model_score": 71.5,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "The rose petals are mostly red in color, hence, a narrow range around 0/360 degrees for H. The petals have both darks and brights, hence, the intensity and saturation vary quite a lot. Therefore, a broad range centered around 0.5 for I and S"
    },
    {
      "question_id": "58",
      "model_score": 93.6,
      "human_score": 2.0,
      "question": "The philosophies to define environmental management are                                                                                                            ",
      "instructor_answer": "Conservationism, Preservationism, Deep Ecology, Social Ecology",
      "student_answer": "conservationism\npreservationism\ndeep ecology \nsocial ecology"
    },
    {
      "question_id": "49",
      "model_score": 13.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True, to indicate number of instances a reference counter is used."
    },
    {
      "question_id": "105",
      "model_score": 76.7,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False. It runs the faulting instruction again. Otherwise that instruction will not be executed\neg.\nz = lazyalloc()\n*z = 63 // PG fault (should be executed again after handling)\nprint(z)"
    },
    {
      "question_id": "42",
      "model_score": 20.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "A: True, to initiate a context switch, we need to have access to \"kernal stack\" of target process which we can get from PID."
    },
    {
      "question_id": "44",
      "model_score": 84.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "False. If any system calls are made by a user process then os process runs and can schedule READY processes but a process may not may not make a system call and that's why a timer interrupt is used to assuming an user process knows the PID of another task (from a pool of several READY processes), it does not have the capability to initiate a context switch and schedule the target process next on the CPU."
    },
    {
      "question_id": "85",
      "model_score": 20.7,
      "human_score": 0.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "It does not account for Uplift pressure design"
    },
    {
      "question_id": "101",
      "model_score": 50.8,
      "human_score": 0.0,
      "question": "Write down the difference between seasonality and long-term oscillations in a hydrlogic time series data.",
      "instructor_answer": "Seasonality oscillation, Due to rotation of earth, around the sun, monthly and seasonal hydrologic events exhibit regular oscillating varations. Oscillations are found around the trend line some oscillations occur over very large period of time, known as long term oscillations. They are well distributed about their mean value.",
      "student_answer": "seasonality is nothing but a plot in time series about the long term oscillation plot to a Less interval. It is kind of spiral to that curve. Long term oscillation is plot along the trend in a simple may be in cyclic way. Both used to check the data variation with time."
    },
    {
      "question_id": "84",
      "model_score": 85.0,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "For handling XOR problem where data can't be classified by a single linear discriminant we can use multilayer perceptron model for better performance than simple perceptron as simple perceptron model is similar to linear dircriminant function. Hence performance is better for multilayer perceptron."
    },
    {
      "question_id": "53",
      "model_score": 63.5,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Spectral features may help in distinguishing material of roads Edges of roads and distance between edges helps in width based classification"
    },
    {
      "question_id": "104",
      "model_score": 17.6,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) User created an array of 100 ints but accessed array[104] then OS will stop and give segmentation fault for out of memory range.\nint on[100] = {0};\nprint on[104] = 4; //Out of allocated memory range.\n\n2) User tried to write to a only readable file.\nFile permissions -> Only Readable, Not writable.\nUser tried to write to that file the OS will stop the program."
    },
    {
      "question_id": "81",
      "model_score": 68.0,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "very low eigen values of PCT conveys less variation in the eigen vector and if required can be neglected."
    },
    {
      "question_id": "51",
      "model_score": 76.0,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "Imperfection in crystal structure, Ionisation of surface sites"
    },
    {
      "question_id": "40",
      "model_score": 82.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "True, fd[0] is used for reading and fd[1] is used for writing."
    },
    {
      "question_id": "80",
      "model_score": 65.6,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "it is the property of material by virtue of which the property if material is different in 3 mutually perpendicular direction."
    },
    {
      "question_id": "49",
      "model_score": 27.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True we know that an executable (binary) program can be used to instantiate and execute more than one process simultaneously. ie, processes of same program use the same PCB with a reference counter to indicate number of instance. Even processes of the same program, they are done separately."
    },
    {
      "question_id": "49",
      "model_score": 84.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False,\n The processors have their own PCB and they act as two independent processes"
    },
    {
      "question_id": "73",
      "model_score": 65.4,
      "human_score": 0.0,
      "question": "What are the important details that have to be known prior for reservoir routing?",
      "instructor_answer": "storage volm vs elevation of reservoir\ninflow hydrograph \nwater surface elevation vs outflow\ninitial values of S,I and Q at t=0",
      "student_answer": "volume elevation characteristics of reser.\noutflow elevation relationship"
    },
    {
      "question_id": "15",
      "model_score": 10.9,
      "human_score": 0.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "It id define deficiency"
    },
    {
      "question_id": "106",
      "model_score": 45.6,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " The child process was the return from trap of parent process itself.\nreturning to its user mode. Three in the fork implementation, all the required variables of"
    },
    {
      "question_id": "68",
      "model_score": 51.2,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "a multilayer perceptron neural network is desirable when the number of classes into which the input feature vectors need to be classified are >2 and are high in number and also if there is very high variation among the training and test data"
    },
    {
      "question_id": "43",
      "model_score": 58.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False\nThe scheduler may schedule another process, who has appropriated data is stored in the kernel stock and PCB table."
    },
    {
      "question_id": "74",
      "model_score": 75.5,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "With a large number of hidden layers, the time taken to train the model increases, and the resulling model is susceplible to overfitting, or having poor generalization"
    },
    {
      "question_id": "82",
      "model_score": 69.0,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "A non linear discriminant function can classify input vectors which cannot be classified using a linear classifier"
    },
    {
      "question_id": "63",
      "model_score": 32.6,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H - Lower end 50-70 degrees S - 1 ans I centred around 0.5"
    },
    {
      "question_id": "82",
      "model_score": 66.8,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "A non- linear discriminant function generalizes better and can effectively classify more complicated datasets then the linear one."
    },
    {
      "question_id": "46",
      "model_score": 25.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nFalse. The OS has no way to stop a running process because the OS is not running (assuming only 1 CPU).\n"
    },
    {
      "question_id": "64",
      "model_score": 58.1,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A narrow range around 0/360 degree for H (due to red color of petals). A broad range of I centered around 0.5. A broad range of S centered around 0.5."
    },
    {
      "question_id": "43",
      "model_score": 22.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "In cases like I/O waits, the OS can first schedule other processes, still the data is anyway saved in the PCB. Without the timer interrupt, the OS still has share the CPU for multitasking."
    },
    {
      "question_id": "9",
      "model_score": 64.3,
      "human_score": 0.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "revenue growth rate and cost of capital"
    },
    {
      "question_id": "31",
      "model_score": 62.8,
      "human_score": 2.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "In Single discriminant function, if no. of classes are two then simply if value of function is greater than 0 it belong to Class I and if less than than 0, it belongs to other. In Case of multiclass it will generate Value , and  It will be classified in a class where this value is closest to averege class."
    },
    {
      "question_id": "30",
      "model_score": 22.3,
      "human_score": 0.0,
      "question": "If there is one explanatory variable, regression analysis is termed as (                                                               )       else it is termed as (                                                                             )",
      "instructor_answer": "Univariate and Multivariate",
      "student_answer": "single and multiple regression"
    },
    {
      "question_id": "102",
      "model_score": 64.4,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "Particle size, frequency , tool area"
    },
    {
      "question_id": "56",
      "model_score": 42.7,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "embiasdensis, efficiency, consistency, sufficient"
    },
    {
      "question_id": "8",
      "model_score": 96.3,
      "human_score": 2.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1 was not a leader in  any of the terms because in the first term, N4 was the leader. In the 2nd term N3 was the leader and in the 3rd term, N2 was the leader"
    },
    {
      "question_id": "86",
      "model_score": 73.2,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "being homogeneous means uniform rotation, translation, scaling and transformations. a uniform representation allows for optimization"
    },
    {
      "question_id": "43",
      "model_score": 29.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse: If the interrupt is the system \"exit\", it cannot be rescheduled again.\n"
    },
    {
      "question_id": "45",
      "model_score": 32.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "False, context switch is initiated by kernel in userspace so it can make a desired process next. PID to schedule the desired process next."
    },
    {
      "question_id": "40",
      "model_score": 82.1,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "TRUE, os can, in fd[1] and read from fd[0] what was written in fd[1]."
    },
    {
      "question_id": "100",
      "model_score": 47.6,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "Kerf Losses, Low MRR, Energy Inefficient"
    },
    {
      "question_id": "53",
      "model_score": 69.5,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Roads are easily distinguished using their colour so brown colour 's presence/absence can he a feature. Highly congested roads generally have a higher temperature of friction of wheels Thus their thermal signatures (IR seadings) is a useful featue. Roads are commonly characterized by sharp boundaries. this means at the edge magnitude will be lage at the road boundaries."
    },
    {
      "question_id": "65",
      "model_score": 63.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "increases the readability of code for programmers and easy febu\n\nmakes it easy for new people introduced to program to just know what are the functions in class and values to pass and purpose and need not know about working \n"
    },
    {
      "question_id": "64",
      "model_score": 57.8,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H can vary from -45 to +45 degree, I can vary from 0.2 to 0.8 and S can from 0.1 to 1 to get red flower. this will give red color with different intensity and saturation value"
    },
    {
      "question_id": "77",
      "model_score": 9.7,
      "human_score": 0.0,
      "question": "What are the two important scales in Hydrology? ---------------------",
      "instructor_answer": "Availability of driking water, time scale, length of the process, spatial scale.",
      "student_answer": "short scale and long scale"
    },
    {
      "question_id": "105",
      "model_score": 79.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " FALSE\nIf the faulting instruction was the C-equivalent of *ptr = 5;\nthen the directly executing the next line may lead to \nunexpected behaviour if the next line is, say, equivalent to \n*ptr = *ptr + 5;"
    },
    {
      "question_id": "32",
      "model_score": 93.1,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "when the slope of the natural land is more than the slope of the irrigation canal provided."
    },
    {
      "question_id": "52",
      "model_score": 84.2,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a ratio between change in dimension of length to its original length. it can also be defined as stress divided by the modulus."
    },
    {
      "question_id": "81",
      "model_score": 66.4,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "It implies that the variance of the data points is very low along those components. We can drop the corresponding dimensions."
    },
    {
      "question_id": "81",
      "model_score": 60.9,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "very low eigen values mean low variance"
    },
    {
      "question_id": "32",
      "model_score": 20.2,
      "human_score": 0.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "when you want to go downstream"
    },
    {
      "question_id": "5",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "A reactor which is used when intense agitation is required is _____________.",
      "instructor_answer": "Completely mixed flow reactor (CMFR)",
      "student_answer": "Completely mixed flow reactor (CMFR)"
    },
    {
      "question_id": "35",
      "model_score": 97.9,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "flooding, furrow method, drip irrigation, sprinkle irrigation"
    },
    {
      "question_id": "64",
      "model_score": 53.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360      degrees for H"
    },
    {
      "question_id": "65",
      "model_score": 58.1,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Program looks structured. Defining a member function at the place of its declaration gives an untidy look to the program. As a result, while reviewing one might not catch a sight of the other members declared in the same class.\n\n2) Editing/adding/deleting a member function becomes simple. When the member functions are declared"
    },
    {
      "question_id": "71",
      "model_score": 62.1,
      "human_score": 2.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "clay particles, organic and inorganic effluents"
    },
    {
      "question_id": "26",
      "model_score": 63.3,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "produce custom and precision parts at high speed and to cut holes"
    },
    {
      "question_id": "88",
      "model_score": 67.6,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "Balancing fluctuating flows or concentrations,assisting self neutralisation "
    },
    {
      "question_id": "46",
      "model_score": 57.6,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue. Timer interrupt makes it more efficient but OS can still schedule READY processes in some other way (queue where next process waits for last to finish always) balancing on CPU.\n"
    },
    {
      "question_id": "10",
      "model_score": 30.2,
      "human_score": 0.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "Task assigned with larger priority number gets priority first and vice versa for smaller priority number"
    },
    {
      "question_id": "46",
      "model_score": 60.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "True, OS can schedule READY Processes if the running process voluntarily participate in context switching."
    },
    {
      "question_id": "20",
      "model_score": 49.2,
      "human_score": 0.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "Intermittent stream has flow for certain duration of period only whereas Ephemeral stream are perennial."
    },
    {
      "question_id": "104",
      "model_score": 16.7,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Writing to the file logs has no need me.\n1. Assume a user process P1 wants to write to a file f1. But it has no permission to do it due to its privileged level. Hence the OS prevents it to perform via limited-directed execution setup.\n2. Assume that the user"
    },
    {
      "question_id": "15",
      "model_score": 28.4,
      "human_score": 0.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "Meteorological drought is defined by Intensity of wetness,that is Drought is (100- Intensity of wetness).If Drought is greater then 40"
    },
    {
      "question_id": "65",
      "model_score": 60.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)The program becomes more structured.\nFor example, in the class vending machine, if the member functions are insert_coin, serve_drink etc, then their working is evident from their name, hence implementation can be defined elsewhere and it makes our program more structured.\nBasically, inline and outline functions make our programs easily readable\n\n\n2) We might also want to declare a member function in one class without giving the definition if it is inherited.\n"
    },
    {
      "question_id": "66",
      "model_score": 62.2,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "market based and quick&convinent"
    },
    {
      "question_id": "48",
      "model_score": 91.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse, if a parent process forks a new child process, the exec system call can be used in the parent process even if the child process has not terminated."
    },
    {
      "question_id": "31",
      "model_score": 99.9,
      "human_score": 2.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified."
    },
    {
      "question_id": "104",
      "model_score": 45.7,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Two privileged actions that users may attempt, but prevented by OS:\n- Accessing OS code and kernel stack\n - by doing some accessing stuff we could get the address of OS code, but we cannot access it, so it is prevented.\n- Disabling interrupts\n - OS doesn't allow to disable interrupts by user."
    },
    {
      "question_id": "100",
      "model_score": 89.7,
      "human_score": 2.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "low mrr\nnozzle life is limited\nhigh cost"
    },
    {
      "question_id": "104",
      "model_score": 36.5,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. Reading from memory/disk - such operations need to be done in privileged mode otherwise the users can access any information in the memory and hence take over the memory.\n2. Creation of new processes/terminating old processes - every fork or syscall has to go through the kernel hence to make necessary elements of process table and structures. Trying to kill the interprocess data exchange is prevented by the kernel."
    },
    {
      "question_id": "49",
      "model_score": 87.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE. If multiple processes are executing the same binary executable, only the code segment of the executable is shared in the shared virtual address space. The PCB of each of the processes would be different."
    },
    {
      "question_id": "28",
      "model_score": 32.0,
      "human_score": 1.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "consideration of edges when cutting out solids"
    },
    {
      "question_id": "3",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "                                                                                                                                                                                                                                                                                                                                                                   efficiency is the ratio of the quantity of water stored in the root zone of the crops to the quantity of water actually delivered into the field.",
      "instructor_answer": "Efficiency of water application",
      "student_answer": "efficiency of water application"
    },
    {
      "question_id": "49",
      "model_score": 36.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n Even processes of same program were different PCB."
    },
    {
      "question_id": "106",
      "model_score": 26.1,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "In child process, there was no trap."
    },
    {
      "question_id": "48",
      "model_score": 37.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\n$\\rightarrow$ False, exec system call can be used only in a case where the child process is still has opportunities to schedule some other READY processes via context switching and share CPU for multitasking."
    },
    {
      "question_id": "44",
      "model_score": 85.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\n **FALSE**\n Other interrupts like system calls also give the OS control over CPU for multitasking."
    },
    {
      "question_id": "49",
      "model_score": 34.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True\n As it happens in task The executable program is some but another process is created. And for copy-on-write optimisation they can use the same PCB until a write happens to the memory in one of the processes."
    },
    {
      "question_id": "8",
      "model_score": 34.8,
      "human_score": 0.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "No one because all N1, N2, N3, N4 had chance to become leader during first time"
    },
    {
      "question_id": "74",
      "model_score": 56.7,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "When there are the neural network large number of hidden layers, the neurel network would learn very well, that is, it would perform well on the training data. But, the neutral network would not generalize well, that is, it would not perform satisfactory on the test data."
    },
    {
      "question_id": "49",
      "model_score": 77.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, we know that by using fork() in a executable program, it can execute more than one process simultaneously (which are child & parent), but they need not use the \"same\" P.C."
    },
    {
      "question_id": "92",
      "model_score": 48.3,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Identification of object become very easy if we get the corners."
    },
    {
      "question_id": "3",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "                                                                                                                                                                                                                                                                                                                                                                   efficiency is the ratio of the quantity of water stored in the root zone of the crops to the quantity of water actually delivered into the field.",
      "instructor_answer": "Efficiency of water application",
      "student_answer": "efficiency of water application"
    },
    {
      "question_id": "41",
      "model_score": 71.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "**True**, re-scheduling only if the scheduler finds it appropriate."
    },
    {
      "question_id": "49",
      "model_score": 50.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "A: False, there is no such variable known as the reference counter inside a PCB struct. So, it uses the different PCB block."
    },
    {
      "question_id": "51",
      "model_score": 59.6,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1.Adsorption of charge inducing ions (OH-, S2-). \n\n2. Metallic Ions are charged in their various oxidation states eg (Fe(III), Al(III)), and form a layer of anions on their shells.\n\n3. Due to common ion effect, ionic salts like KI have a layer of I- outside which also contributes to them being charged."
    },
    {
      "question_id": "26",
      "model_score": 62.1,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "precision machining for odd shapes like gears and splines"
    },
    {
      "question_id": "102",
      "model_score": 63.9,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "particle size\nfrequency of abrasion tool\namplitude"
    },
    {
      "question_id": "99",
      "model_score": 35.4,
      "human_score": 2.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "higher cost and low output"
    },
    {
      "question_id": "64",
      "model_score": 79.9,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue should be centered around 0 degrees. Intensity should be ranged between 0.5 to 1.0. Saturation should be high around 0.8 to 1.0 to maintain purity"
    },
    {
      "question_id": "57",
      "model_score": 11.3,
      "human_score": 0.0,
      "question": "The dispersion number characterizes the degree of dispersion relative to ________________.",
      "instructor_answer": "the degree of advection",
      "student_answer": "coefficient of 1) Quatal diviation.\n2) arange\n3) mean deviation"
    },
    {
      "question_id": "65",
      "model_score": 49.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)Whole interface is presented in a better and  way by separating declaration and definition\n2)"
    },
    {
      "question_id": "103",
      "model_score": 43.9,
      "human_score": 1.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "low material removal rate"
    },
    {
      "question_id": "63",
      "model_score": 42.1,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "A concial range, surrounding a narrow region of H around 120 degree with as High Intensity as Possible above a certain threshold"
    },
    {
      "question_id": "8",
      "model_score": 74.7,
      "human_score": 2.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1, N5 likely not a leader. In term 1, N4 was a leader. Similarly N3 for term 2 and N2 for term3"
    },
    {
      "question_id": "47",
      "model_score": -5.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "None"
    },
    {
      "question_id": "10",
      "model_score": 12.7,
      "human_score": 0.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "1 becomes 2, 2 becomes 1. And we get alternate tasks"
    },
    {
      "question_id": "36",
      "model_score": 44.7,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "geographical area, water supply pressure, cost of "
    },
    {
      "question_id": "105",
      "model_score": 86.7,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. After handling the page fault OS executes the faulting instruction again and not directly jumping to next instruction. If page fault is handled now the instruction will run successfully."
    },
    {
      "question_id": "33",
      "model_score": 85.7,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "through fall,  stem flow"
    },
    {
      "question_id": "46",
      "model_score": 16.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue. When processes run in a cooperation mode, the user mode data & code & kernel is mostly in a privileged level and gives OS the control. Hence increases the privacy level.\n"
    },
    {
      "question_id": "84",
      "model_score": 88.1,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "Perceptron will not be able to handle XOR dataset with perfect accuracy as the data is not linearly separable. Multilayer perceptron classifier is a non-linear classifier due to multiple layers can learn this data."
    },
    {
      "question_id": "82",
      "model_score": 65.0,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Non linear discriminant function can allow us to classily the dataset that is not linearly separable."
    },
    {
      "question_id": "49",
      "model_score": 86.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": " False, each process has a different PCB"
    },
    {
      "question_id": "71",
      "model_score": 11.1,
      "human_score": 0.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "temperature and pressure,moisture "
    },
    {
      "question_id": "36",
      "model_score": 66.4,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1. population of area\n2. industrialization requirements\n3. quality of water\n4. availability of water(24/7 or only a few hours everyday)\n5. water required for cleaning and maintenance purposes of roads, parks, etc"
    },
    {
      "question_id": "26",
      "model_score": 64.0,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "used for machining holes in gears"
    },
    {
      "question_id": "44",
      "model_score": 90.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFALSE, system calls or other external interrupts too give control back to OS, after which OS can schedule any other process based on its liking.\n"
    },
    {
      "question_id": "99",
      "model_score": 32.9,
      "human_score": 2.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "it is thin in terms of thickness"
    },
    {
      "question_id": "65",
      "model_score": 74.4,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)If the definitions of member functions are separated from declarations then readability of the program improves.\n2) The reader of the program can at a glance look at the abstraction and get an overall idea of the class, which helps in making changes to the program quickly and makes debugging easy."
    },
    {
      "question_id": "105",
      "model_score": 36.1,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "TRUE -> The physical address mapping in the Page table are allocation pointer allocated policy so that memory allocation to process on a page fault."
    },
    {
      "question_id": "63",
      "model_score": 82.8,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "A small range around 120 degrees for H component to detect the green colour\nSaturation indicates the amount of greyness in the colour. This has high variance in the stem/leaf and hence we need a broad range centred around 0.5\nsimilarly the intensity also has a high variance. (The stem is mostly dark while some leaves are bright) hence we need a broad range for I centred around 0.5"
    },
    {
      "question_id": "53",
      "model_score": 70.9,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "The different categories of roads could be -highways, inter-city roads, , busy roads, jammed roads, etc. To identify such categories, useful features can include the texture of roads, , width of roads, the area on either side of the roads (for determining context), length of roads."
    },
    {
      "question_id": "55",
      "model_score": 81.4,
      "human_score": 2.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "Hexadecanol and Octadecanol"
    },
    {
      "question_id": "65",
      "model_score": 61.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Code is more readable and neat.\nMember functions can be declared outside the class body.\nClass body becomes concise and short. "
    },
    {
      "question_id": "48",
      "model_score": -4.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "None"
    },
    {
      "question_id": "49",
      "model_score": 31.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True/False: 2 processes can't run simultaneously in case of a\n multilevel CPU. Processes use PCB with ref counter to indicate\n no. of instances.\n Every process has a unique PCB, so 2 processes cannot use a single\n PCB to indicate no. of instances."
    },
    {
      "question_id": "105",
      "model_score": 27.6,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True;\nThis lazy allocation is done to avoid\nmapping unused pages and map them\nonly when required. These unmapped pages\nwill cause page fault on referencing &\nwe handle the mapping during this fault."
    },
    {
      "question_id": "104",
      "model_score": 22.1,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. A user process may try to change the value stored somewhere in memory where it shouldn                        t, this may cause some important thing to be overwritten. OS provides memory virtualization which maps virtual memory to physical memory and prevents a process from accessing memory illegally.\n2. A user process may try to directly access some device (like hard disk) and change what                        s stored in it. OS provides a layer of abstraction to connect the device using the drivers."
    },
    {
      "question_id": "95",
      "model_score": 72.9,
      "human_score": 1.0,
      "question": "Why the steeper main streams results in the Hydrographs with smaller time base?",
      "instructor_answer": "Steeper basin streams allows the run off  to leave the basin quickly because of high slope.Time base means the amount of time for run off to leave the catchment after the storm. So, if there is steeper slope,  excess run off will get out  quickly. Hence time base reduces.",
      "student_answer": "Hydrograph for steeper main stream generates high peak flow with less time base. The reason is that in steeper slope less infiltration occurs due to less time for flow. So losses are reduced and run off increases . Hence peak increases and time base decreases as compared to less steep stream"
    },
    {
      "question_id": "87",
      "model_score": 70.8,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "biological action and formation of biologically activated fine layer \"Schmutzdecke\""
    },
    {
      "question_id": "67",
      "model_score": 21.0,
      "human_score": 0.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "Point estimation method, method of intervals"
    },
    {
      "question_id": "68",
      "model_score": 65.1,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "a multilayer perceptron neural network with multiple hidden layers would be desirable when the data is multidimensional and feature extraction is difficult in 0 or 1 hidden layer."
    },
    {
      "question_id": "48",
      "model_score": 58.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse, it can be done it does not matter which exec first until it is explicitly mentioned."
    },
    {
      "question_id": "68",
      "model_score": 64.0,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "it is desirable when we are aiming for higher generalisation and higher efficiency . multilayer NN would not require too many neurons in one single layer thus improving efficiency"
    },
    {
      "question_id": "33",
      "model_score": 56.6,
      "human_score": 1.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "stem flow and branch fill"
    },
    {
      "question_id": "42",
      "model_score": 11.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "FALSE"
    },
    {
      "question_id": "8",
      "model_score": 94.8,
      "human_score": 2.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "It looks like N1 would have not been a leader in different terms.in the first term, N4 was the leader. In the 2nd term N3 was the leader and in the 3rd term, N2 was the leader"
    },
    {
      "question_id": "49",
      "model_score": 83.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE The processes will be independent of each other and will have different PCB."
    },
    {
      "question_id": "90",
      "model_score": 64.7,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "suppose the data points are non lineary seperable in such cases introducing nonlinear transformation such as quadratic function can entere classification and increase the Chances of getting correctly classifier.."
    },
    {
      "question_id": "97",
      "model_score": 13.3,
      "human_score": 0.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "1. Friction\n2. Defects in the machine"
    },
    {
      "question_id": "82",
      "model_score": 41.5,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "When data in really complex and we cannot pinpoint the exact relation or function which can separate the class and even non linear transformation is not possible because we dont always know the exact ransformation we need."
    },
    {
      "question_id": "102",
      "model_score": 53.1,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "frequency, partical size, amplitute"
    },
    {
      "question_id": "106",
      "model_score": 67.5,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "When the fork() syscall is made, the parent creates a new process in the PCB by assigning memory, context, pid, etc in the kernel mode and once the child is created, the trap handler returns. Now a timer interrupt may occur. This interrupt makes the OS take control. Now the OS goes to the Ptable and decides on which process to run next. Now it may choose the child process and the user code in the child process starts running from the point after the fork() system thus timer interrupts that goes to the scheduler logic makes the child process run the user code."
    },
    {
      "question_id": "44",
      "model_score": 59.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse, os can set up switch processes to interrupts to interrupts other kind of interrupts such as I/O interrupts.\n"
    },
    {
      "question_id": "63",
      "model_score": 51.6,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "To sample green leaves and stem, we can take Hue around 60      , this time the range can be broader as in the image we can observe at least 2 different varieties of green. A saturation of about 0.7 should suffice to properly extract stems as well."
    },
    {
      "question_id": "100",
      "model_score": 68.5,
      "human_score": 2.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "low MRR, taper, limited nozzel life, high cost"
    },
    {
      "question_id": "52",
      "model_score": 94.1,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a ratio of change in length and original length"
    },
    {
      "question_id": "59",
      "model_score": 84.9,
      "human_score": 2.0,
      "question": "The short-term atmospheric conditions of any place that may vary from time to time is ---------------------------------",
      "instructor_answer": "called temporal variations. example- Weather",
      "student_answer": "called temporal variations. example- Weather of a place is temporally varied.\nIt includes pressure"
    },
    {
      "question_id": "45",
      "model_score": 71.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nYes, OS does the context switch. since user is not in same privilege level user cannot.\n"
    },
    {
      "question_id": "84",
      "model_score": 86.2,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "A simple perceptron can't handle the XOR problem whereas a multilayer perceptron can handle the XOR problem easily because XOR is an example of nonlinear classification, and the multilayer perceptron consist of hidden layers which has activation functions. These activation functions ase responsible for handling nonlinear cases as they are non-linear eg, sigmoidal function."
    },
    {
      "question_id": "54",
      "model_score": 46.6,
      "human_score": 2.0,
      "question": "The appetitive      faculty corresonds to      ",
      "instructor_answer": "Plato's theory of the soul, the appetitive faculty is one of the 3 divisions of the soul. It is the part dealing with desires and passions",
      "student_answer": "Desire, which is pleasure of wealth and desire of food"
    },
    {
      "question_id": "91",
      "model_score": -2.1,
      "human_score": 0.0,
      "question": "What theorem do we use to prove symmetry of stiffness matrix",
      "instructor_answer": "Maxwell Betti Reciprocal Theorem",
      "student_answer": "Conservation of angular momentum"
    },
    {
      "question_id": "43",
      "model_score": 79.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse\nThe data of the process is stored on the PCB and the kernel stack, so there is no loss of information.\n"
    },
    {
      "question_id": "16",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise."
    },
    {
      "question_id": "33",
      "model_score": 92.0,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "stem flow(stems and branches) and fall through(water falling on earth through leaves)"
    },
    {
      "question_id": "43",
      "model_score": 87.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False, It can be scheduled at any time (it should not be immediate) depends on scheduling policy."
    },
    {
      "question_id": "43",
      "model_score": 27.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse. A process interrupted due to exit syscall will never be rescheduled back as the process which called exit syscall has terminated."
    },
    {
      "question_id": "104",
      "model_score": 20.3,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Allocating data directly by using sbrk/brk syscall instead of malloc() is a privileged action, hence prevented by the OS.\nAccessing I/O directly without using syscall but by using only the procedure calls is a privileged action because limited-direct execution doesn't allow users to access file data without appropriate permissions which can lead to malicious handling of files.\nIn the first instance, using directly sbrk/brk syscall leads to imbalance in the states in the OS leading to wrong full allocation of next memory due to no-synchronization."
    },
    {
      "question_id": "65",
      "model_score": 69.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) this division helped us in a way that whenever we want to use a function multiple times in a program, we don't need to define it every time, just declaration would work.\nmeans we can use the function at a later stage just by declaring.\n\n2) second advantage is that it provides us the chance to define functions at a later time also, like if we want our class to be compact (for some reason) then it's possible to just declare the function without definition and definition it out of class .\nand hence"
    },
    {
      "question_id": "45",
      "model_score": 88.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "TRUE. Only OS scheduler can schedule a process."
    },
    {
      "question_id": "45",
      "model_score": 68.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "True. Because only or can do it and doing so requires higher privilege and only as has those administrative privileges."
    },
    {
      "question_id": "29",
      "model_score": 97.6,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "Rainfall intensity, time"
    },
    {
      "question_id": "98",
      "model_score": 50.0,
      "human_score": 1.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "provides hardness, low thermal conductivity"
    },
    {
      "question_id": "7",
      "model_score": 55.0,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "scrapping a small layer of medium from the top of the filter."
    },
    {
      "question_id": "72",
      "model_score": 98.9,
      "human_score": 2.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "The data rate should not exceed the channel capacity, maximum quality to be preserved. full capacity of communication channel to be utilized."
    },
    {
      "question_id": "92",
      "model_score": 32.1,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Image processing applications which increases the smoothness of images benefits from interest point like corners."
    },
    {
      "question_id": "78",
      "model_score": 66.6,
      "human_score": 1.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "storage, cascade, pumped "
    },
    {
      "question_id": "97",
      "model_score": 63.5,
      "human_score": 1.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "depth of cut, feed and workpiece holding"
    },
    {
      "question_id": "103",
      "model_score": 81.1,
      "human_score": 2.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "It is inefficient as it has a low metal removal rate and is very expensive."
    },
    {
      "question_id": "39",
      "model_score": 95.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFALSE.\nfd[0] is used for 'read' while fd[1] is used for 'write'.\n"
    },
    {
      "question_id": "90",
      "model_score": 75.7,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Non-linearity transforming the feature vectors help us to classify them using linear function (Straight line, planes, hyperplanes). This reduces the calculations to be performed! Also it is easy to deal with linear classfication funtions as compared a to non linear classification function."
    },
    {
      "question_id": "92",
      "model_score": 45.8,
      "human_score": 0.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Image analysis applications that benefits from the interest points like corners are Military target identification and scanning pages in softwares like Adobe scan."
    },
    {
      "question_id": "20",
      "model_score": 67.1,
      "human_score": 1.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "Intermittent streams having water only in rainy days. Ephemeral streams has flowing water only during and for short duration after precipitation."
    },
    {
      "question_id": "20",
      "model_score": 67.8,
      "human_score": 1.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "Intermittent stream are long duration flow and not available on dry periods whereas Ephemeral streams are short duration flow and always available."
    },
    {
      "question_id": "83",
      "model_score": 57.2,
      "human_score": 1.0,
      "question": "What is the difference between basin order and channel order?",
      "instructor_answer": "Basin order is highest order of any stream in that basin whereas Channel order is order of stream\nwhich denotes that what order of streams has joined the channel.",
      "student_answer": "Basin order is the canification df basins according to stream distance whereas Channel order is the length of channels of each order."
    },
    {
      "question_id": "51",
      "model_score": 74.3,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "imperfection in crystal structure and ionization of surface sites"
    },
    {
      "question_id": "79",
      "model_score": 84.8,
      "human_score": 2.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "Equations that are derived from experimentation/ graphs as opposed to forming a theoretical equation first."
    },
    {
      "question_id": "42",
      "model_score": 74.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "False\nIt is the sheduler's work to schedule a process. User don not have capability to perform such high privileged level work.\n"
    },
    {
      "question_id": "80",
      "model_score": 35.1,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "orthotropic show similar results when similar load is applied in percenticular direction\n"
    },
    {
      "question_id": "1",
      "model_score": 77.0,
      "human_score": 0.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "debt to equity remains constant"
    },
    {
      "question_id": "82",
      "model_score": 62.1,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Advantage of non linear discriminant classifier is that we can classify the data into converting the function into a non linear function so that the data is separable in 2D format."
    },
    {
      "question_id": "100",
      "model_score": 64.4,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "the material removal rate is low, the powder cannot be reused because of its cutting ability decreases"
    },
    {
      "question_id": "43",
      "model_score": 91.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False. The OS might decide to schedule some other task it need to do, and it can reschedule the process anytime it want"
    },
    {
      "question_id": "8",
      "model_score": 37.1,
      "human_score": 0.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N3 was literally not a leader because N3 doesn't have any complete entry of the particular term."
    },
    {
      "question_id": "67",
      "model_score": 71.7,
      "human_score": 1.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "method of moment, maximum likeliy"
    },
    {
      "question_id": "56",
      "model_score": 78.7,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbiasedness, sufficiency, efficiency,"
    },
    {
      "question_id": "105",
      "model_score": 27.3,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True\nIn lazy allocation policy, OS maps the unmapped physical pages for valid virtual addresses after the occurrence of a pagefault unless until the unmapped are accessed. Everything goes fine once the unmapped physical pages are of valid virtual addresses are tried to get accessed if then results in a pagefault."
    },
    {
      "question_id": "65",
      "model_score": 17.4,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Suppose we have a code of a 500 lines then without knowing exactly how many functions were there in this class, we would fell d"
    },
    {
      "question_id": "51",
      "model_score": 69.7,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1) Adsorption of charged particles\n2) Presence of ionigenic sites "
    },
    {
      "question_id": "104",
      "model_score": 23.3,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. A user process can try and read from a read-only file. This action will be prevented by the OS since in the LDE setup, it will ensure that the privilege level on the file matches the action.\n2. A user process can attempt to change the timer interrupt's quantum slice. This is a privileged action which will again be prevented by the OS."
    },
    {
      "question_id": "104",
      "model_score": 27.5,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " write/update a file:\nWhen the user process uses write/read function, a system call is made for writing by invoking a trap by switching from user to kernel mode."
    },
    {
      "question_id": "65",
      "model_score": 62.9,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Easy to see the names of member function in the class at the same place i.e. improves readability of the code.\nEasy to make changes to the member function if required."
    },
    {
      "question_id": "106",
      "model_score": 41.5,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "The issue described in the problem is identical to the issue faced in process creation. The fork syscall initializes the PCB entry for the child process and copies the necessary"
    },
    {
      "question_id": "72",
      "model_score": 34.3,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "Satellite data is very large and hard to compress in real time and downlink it online."
    },
    {
      "question_id": "70",
      "model_score": 46.1,
      "human_score": 2.0,
      "question": "What approach should be followed to find a reasonable probability distribution for a given time series?",
      "instructor_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanalysis the results\n",
      "student_answer": "1. observed the variations type from the date set.ie( linear or nonlinear)\n2. Find the mean, mode, variance and standard deviation.\n3. Find the kurtosis coefficient (k) if it is equal to 3 then the distribution is Normal."
    },
    {
      "question_id": "56",
      "model_score": 96.9,
      "human_score": 2.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbiased, efficiency, sufficiency, consistency"
    },
    {
      "question_id": "65",
      "model_score": 62.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "To avoid problems when our class/function /whatever are included in more than one place. To have a separate interface and implementation. Compilation speed. Avoiding code duplication."
    },
    {
      "question_id": "99",
      "model_score": 41.2,
      "human_score": 2.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "It has limitation of low output with higher cost"
    },
    {
      "question_id": "75",
      "model_score": 79.8,
      "human_score": 2.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach."
    },
    {
      "question_id": "20",
      "model_score": 81.1,
      "human_score": 0.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "A stream with limited base flow is known as intermittent stream whereas a stream which has no base flows is called as ephemeral stream."
    },
    {
      "question_id": "64",
      "model_score": 58.9,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petals , "
    },
    {
      "question_id": "71",
      "model_score": 89.4,
      "human_score": 2.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "dust particles,\nsalt from sea,\nclay mineral particles in air,\n"
    },
    {
      "question_id": "79",
      "model_score": 68.0,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "Equations derived based on experiments performed and are non homogeneous."
    },
    {
      "question_id": "95",
      "model_score": 69.7,
      "human_score": 2.0,
      "question": "Why the steeper main streams results in the Hydrographs with smaller time base?",
      "instructor_answer": "Steeper basin streams allows the run off  to leave the basin quickly because of high slope.Time base means the amount of time for run off to leave the catchment after the storm. So, if there is steeper slope,  excess run off will get out  quickly. Hence time base reduces.",
      "student_answer": "the time less for steeper main streams beacause, the draining process become quick in steeper basin. The water reaches the channel quicker."
    },
    {
      "question_id": "28",
      "model_score": 67.0,
      "human_score": 1.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "it helps to define boundary specifically and avoid dangling edge or"
    },
    {
      "question_id": "46",
      "model_score": 48.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "True, OS can still have opportunities of context switching and multitasking."
    },
    {
      "question_id": "40",
      "model_score": 2.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "TRUE"
    },
    {
      "question_id": "92",
      "model_score": 35.0,
      "human_score": 0.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Applications in which there is no requirement image rotation or translation or intensity changes benefit the most from interest points like corners."
    },
    {
      "question_id": "40",
      "model_score": 23.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nFalse, because the fd[0], fd[1] are the variable names but those values can be anything. So, it can be vice versa also.\n"
    },
    {
      "question_id": "41",
      "model_score": 2.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue"
    },
    {
      "question_id": "39",
      "model_score": -3.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "None"
    },
    {
      "question_id": "86",
      "model_score": 58.9,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "using homogeneous coordinates we great the same point in a different place on multiplying a scalar to a point. Thus we can have calculations even for points at infinity, and we can use matrices for calculations that makes the task easier."
    },
    {
      "question_id": "29",
      "model_score": 82.9,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "rainfall depth(intensity) and time intervals"
    },
    {
      "question_id": "105",
      "model_score": 83.9,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " FALSE, on a page fault, after the OS returns from the trap\nhandler and the process runs again, the instruction that caused\nthe fault is executed."
    },
    {
      "question_id": "48",
      "model_score": 12.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFALSE"
    },
    {
      "question_id": "65",
      "model_score": 55.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "less clumsy,easy to read\neasy to identify errors\nin some cases instances of classes which require main class can be used in procedures,although this is not a good practice , it can make things way simpler for machine"
    },
    {
      "question_id": "69",
      "model_score": 78.8,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "even after economic life completes the reservoir can be used for some other purposes too, and that is known as usable life of a reservoir."
    },
    {
      "question_id": "106",
      "model_score": 87.8,
      "human_score": 2.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When fork call is made by parent, a new pcb and memory are created by the os for the child identical to the parent process.\nBut, in the child process trapframe is designed so that forkret executes when the child process is scheduled and after fork return & child process is scheduled and after fork return the next addr. in the trapframe is the trapret function addr.\nSo, after child process is created with the above trapframe, the scheduler on the child will execute when the scheduler context switch to child process.\nAfter switching to child, it executes forkret(), and then the trapret(), which will switch back from the kernel to the user mode."
    },
    {
      "question_id": "79",
      "model_score": 88.4,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "these equations are formed by empirical (experimental) data"
    },
    {
      "question_id": "40",
      "model_score": 42.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "True. Because fd[0] is the write end and fd[1] is the read end of the pipe."
    },
    {
      "question_id": "45",
      "model_score": 65.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "True, only OS con has the capability bar & scheduling the processes from its processes list."
    },
    {
      "question_id": "33",
      "model_score": 75.5,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "through fall ( rain drops falling from leaves of the trees due to gravity) and through stem of the trees(precipitation from leaves to branches and finally through stem, it reaches the ground) "
    },
    {
      "question_id": "65",
      "model_score": 72.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)It makes the code representation very fluent and efficient with all the functions listed at a place and defined explicitly in some other place. The code can be understood and analysed easily. It also helps in debugging. Therefore it's a good practice.\n\n2) This way we can use other structures or classes defined after definition of our initial class which would give error if we don't separate the two.. Therefore it helps us include various other functionalities involving use of other classes/objects/structures. "
    },
    {
      "question_id": "88",
      "model_score": 73.2,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "1) Balancing the fluctuating flows or concentration\n2)To assist self neutralization"
    },
    {
      "question_id": "65",
      "model_score": 56.1,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Easy to understand program as all functionality is listed at one place (the declarations with comments).\n2. No fixed allowed order of function calls as all functions are declared above their definitions or in a separate header file. "
    },
    {
      "question_id": "40",
      "model_score": 30.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "FALSE fd[0] can be written into and fd[1] can be read from."
    },
    {
      "question_id": "76",
      "model_score": 6.7,
      "human_score": 0.0,
      "question": "What are the two important aspects of reservoir routing under a flood control criterion?",
      "instructor_answer": "peak discharge reduced and\n peak flow gets shifted",
      "student_answer": "1. For linear Reservoir , Q= K*S ,( here X=0)\n"
    },
    {
      "question_id": "89",
      "model_score": 33.5,
      "human_score": 0.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "Can be used for ungauged basins to find UH if we know basin properties of ungauged basin and hydraulic parameters/results for *similar* catchment. Indirect"
    },
    {
      "question_id": "106",
      "model_score": 77.8,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " During the fork() system call, a kernel stack for the child process is created, and its contents are copied (except for parents kstack)\n\nSpecifically, in the fork(), a trapframe for child is created and populated with same fields as of parent, except for the return value( which is 300 for child) and this trapframe is pushed onto the kernel stack of child process.\n\nSo the return path for child is same as of its parent's return path. Child also returns from a trap when it is scheduled next time."
    },
    {
      "question_id": "39",
      "model_score": 15.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse"
    },
    {
      "question_id": "42",
      "model_score": 72.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "False, context switch is done by os in privilege mode of execution by os."
    },
    {
      "question_id": "104",
      "model_score": 14.2,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " System call\nSignal\nInterrupt"
    },
    {
      "question_id": "65",
      "model_score": 49.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) we can use one member function in another member function of the same class as we wish.(irrespective of the order in which they were declared or defined).\nEx: \nclass a{\n    ........\n    public:\n    int m1();\n    int m2();\n}\nint m1(){\n    //code\n    m2();\n    //code\n}  \nint m2(){\n     //code\n     m1();\n     //code\n} \n2) It's easy to ana and code the abstraction when we just declare them inside the class(and define on).  (provided the names of functions are good enough to understand their activity).\n\n"
    },
    {
      "question_id": "48",
      "model_score": 58.9,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False, It can be used any time but the parent process gets killed and the child becomes an orphan."
    },
    {
      "question_id": "63",
      "model_score": 48.8,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "A narrow range of H around 120 degrees and Intensity(I) centered around 0.5"
    },
    {
      "question_id": "65",
      "model_score": 68.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)The program becomes more structured.\nFor example, in the class vending machine, if the member functions are insert_coin, serve_drink etc, then their working is evident from their name, hence implementation can be defined elsewhere and it makes our program more structured.\nBasically, inline and outline functions make our programs easily readable\n\n\n2) We might also want to declare a member function in one class without giving the definition if it is inherited.\nFor example\nShape{\n   public:\n      virtual int area(){}\n};\n\n\n/*The definition of area need not to be given here as for each child class the formula for area will be different, and then we can define these functions  for each child class afterwards, forample*/\n\nint Rectangle::area(){\n   return length*breadth;\n}\nint Circle::area(){\n   return 3.14*r*r;\n}\n\n/*This reduces the need to define the function in the parent class and also makes it easier to find the function definition for a particular class*/\n"
    },
    {
      "question_id": "36",
      "model_score": 62.3,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1. climatic conditions \n2. size of area to which water is supplied \n3. the cost of water being supplied \n4. availability of water in that area\n5. geographic conditions \n6. seasonally varies \n7. time of day (2 peak hours of water consumption)\n8. population of the area "
    },
    {
      "question_id": "65",
      "model_score": 66.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "separating declaration from definition is a good programming practice as it improves the quality and readability of the code.Also the user can get to know all the available functions and features just by seeing the declaration part and won't have to search in a big code for it.It helps to separate concerns and helps in high level programming allowing the coder to focus on small segments at a time rather than huge complex code."
    },
    {
      "question_id": "72",
      "model_score": 66.6,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "The issue are firstly the transmission channel capacity. It should be such that the data can be easily transmitted. Secondly the compression should be lossless so that the quality of the image is not degraded."
    },
    {
      "question_id": "47",
      "model_score": 66.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "True. Reason: If 'exec' system call is used in parent process before child process terminates, then 'child' becomes 'orphan'. But can be used in parent process after child terminates."
    },
    {
      "question_id": "45",
      "model_score": 35.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "False, the process can only request the OS to execute other process with given pid but it depends on the OS scheduling which process get scheduled next on CPU."
    },
    {
      "question_id": "29",
      "model_score": 83.5,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "Distribution of rainfall intensity and Time"
    },
    {
      "question_id": "64",
      "model_score": 73.0,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around -5degree to 5degree for H since the value of hue for red is 0 and magenta is at -60 degree. The petals have red and magenta components."
    },
    {
      "question_id": "53",
      "model_score": 28.3,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Features are Spatial fetaure, NDVI, Texture feature, shape feature and contextual feature."
    },
    {
      "question_id": "39",
      "model_score": 14.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nSolution: True\nPipes are used for connection between the processes and it doesn't depend on the processors/interrupts/linked-list/read on two descriptors.\n"
    },
    {
      "question_id": "12",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Define design flood.",
      "instructor_answer": "It is the flood adopted for the design of the structures",
      "student_answer": "It is the flood adopted for the design of the structures"
    },
    {
      "question_id": "1",
      "model_score": 74.4,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "constant debt equity ratio"
    },
    {
      "question_id": "92",
      "model_score": 16.0,
      "human_score": 0.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "According to the connected point each segments. This implies is an continuous eigen or pixel where all the pixels are interconnected forming a region and not just the pixel and these are not connected. These regions were not making any sense."
    },
    {
      "question_id": "18",
      "model_score": 53.2,
      "human_score": 2.0,
      "question": "Define trap efficiency of a reservoir and write down the factors affecting the trap efficiency",
      "instructor_answer": "It is defined an the ratio of deposited sediment to the total sediment inflow for given period within the reservoir economic life time.Factors affecting the trap efficiency: Diameter of silt particles, size and weight and type of debrais. Wind flow direction. Shape of the dam.Topography of the dam structure. Material of the dam.",
      "student_answer": "Trap efficiency of a reservoir is a function of ratio of reservoir capacity and total in flows. Factors affecting: infow, slope of basin, no use of level of basin and dam characteristics."
    },
    {
      "question_id": "105",
      "model_score": 27.8,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True. \nIf a lazy allocation policy is used, the describe page fault handler is necessary for the proper functionality. If this policy was not used, one could simply panic on a page fault, since it is expected that memory is lazily allocated."
    },
    {
      "question_id": "64",
      "model_score": 48.9,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "narrow range around 0 deg for Hue channel,-5 to +5 deg and for darker parts similar to the green stem explained in the next part."
    },
    {
      "question_id": "15",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water."
    },
    {
      "question_id": "106",
      "model_score": 56.1,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "The return path from kernel mode to the user mode for the child process returns -1 despite not having a trap returns because of scheduling. A new process is created and it is scheduled by the scheduler. There is no syscall like fork inside it though. The child also contains the pid of its parent process from which it was forked."
    },
    {
      "question_id": "106",
      "model_score": 73.6,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " * In the fork() syscall, OS is assigning child process return value (eax) as 0\n* When the child process is scheduled by OS. It is like the state which just exited the trap handler\n* After that, pop(); pops the stack into the CPU regs, switchown() switches the VM to that of child's\n* fork() return '0' in child (= eax = 0)"
    },
    {
      "question_id": "86",
      "model_score": 69.2,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "By using homogenous coordinates, we can represent any transformation by a simple matrix multiplication. Thus, a 2D tranformation makes use of 3D homogenous coordinates and a 3      3 transformation matrix."
    },
    {
      "question_id": "106",
      "model_score": 55.2,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " This is similar to the case of how a newly created process is brought back to user mode without calling trap.\nin x86, while allocproc() is called and then the function allocproc1() is called. Se then parameters associated with that newly assigned proc are updated based on parent proc, returns the pid of the created process. Se this child process is stored in the proc table.\nThe proc returns to user mode, child process trap box which helps the using the same trap to user mode, just using the same trap to user mode, just parent process to scan over the proc table, gives by doing a scan over the proc table, we can return it to the child process. E we can return it to user mode when it's called / too we can access the pid which was returned while creating the child."
    },
    {
      "question_id": "47",
      "model_score": 44.4,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTRUE. We can call exec in the parent process because it will change child process. It just rewrite the parent code."
    },
    {
      "question_id": "45",
      "model_score": 38.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "FALSE - a user process is incapable of scheduling another process next to itself. It can communicate with and stop & continue the other processes but it has no say on when the other process get scheduled."
    },
    {
      "question_id": "79",
      "model_score": 43.1,
      "human_score": 0.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "Equations available to estimate the evaporation of a water body using its meteorological data"
    },
    {
      "question_id": "81",
      "model_score": 85.0,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "very low eigen values means that the feature vector related to that eigen value are redundant and can be removed for dimensionality reduction."
    },
    {
      "question_id": "65",
      "model_score": 11.0,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Dynamic Binding (Runtime polymorphism) can be enabled\n2."
    },
    {
      "question_id": "53",
      "model_score": 55.7,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "As roads are usually gray like intensity in that bond will be useful. As roads are continues with small breath and large length, adding additional feataures corresponding to neighbouring pixels can be useful ."
    },
    {
      "question_id": "86",
      "model_score": 43.2,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "Allow us to use matrix multiplications which"
    },
    {
      "question_id": "39",
      "model_score": 87.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse, 0 is meant for read and 1 is meant for write."
    },
    {
      "question_id": "42",
      "model_score": 82.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "False, the scheduling can be only done by scheduler with some scheduling policy & user level program can't do this."
    },
    {
      "question_id": "72",
      "model_score": 29.5,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "The quality of image after compression can reduce and user won't be able to retrieve the original image with all the details."
    },
    {
      "question_id": "64",
      "model_score": 41.7,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Narrow range of H around 330 degrees, wide range of I centred around 0.6, wide range of S centred around 0.7"
    },
    {
      "question_id": "26",
      "model_score": 18.7,
      "human_score": 0.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "Broaching process is used to reduce the block thickness or width or length. The block is fixed in one place and the"
    },
    {
      "question_id": "63",
      "model_score": 81.7,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "\nThen green stems and leaves are there with little of black or darkness present, so:\nHue should be around 120 degrees because of green colour\nSaturation high for green colour but also low for darkness in stems. it will again vary from low values to high (0.1-.9)\nintensity is low to minimum for green and black around 0-0.5 range.\n\nagain here if were to ignore the shadowed pixes"
    },
    {
      "question_id": "38",
      "model_score": 29.3,
      "human_score": 0.0,
      "question": "Open dumping of waste is a major practice in India. Two major environmental problems associated with are                                                                                                                                                                  ",
      "instructor_answer": "1.Leachate generation and mismanagement\n2.Release of GHGs due to anaerobic reactions\n3.Odour\n4.Insects and rodents infestation leading to public health issues",
      "student_answer": "Air pollution and Soil pollution"
    },
    {
      "question_id": "40",
      "model_score": 78.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "**True**, Pipes are one-way."
    },
    {
      "question_id": "42",
      "model_score": 69.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse. Context Switches are performed in the Kernel mode. Hence, a user has no permission & switches are decided via the OS."
    },
    {
      "question_id": "65",
      "model_score": 76.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. easy to read, and modify code 2. All functions declarations at one place like in a header file,  can be shared and used among different users."
    },
    {
      "question_id": "41",
      "model_score": 33.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue, for example, the scheduler in Linux FCTS and there is a process with shorter completion time compared to the interrupted process. Then it will be put into schedule first."
    },
    {
      "question_id": "65",
      "model_score": 69.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The abstraction becomes more clearer. At a single glance at the class declaration, one can get an idea of the different functions and the arguments taken by the functions.\n\n2. In case we are working with two classes where both classes need access to each other's member functions, this technique is helpful.\nDeclaring the class A before class B and then defining the member functions of class A after class B's declaration allows functions of both classes to function properly."
    },
    {
      "question_id": "39",
      "model_score": 94.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse: fd[0] is read-only and fd[1] is write-only.\n"
    },
    {
      "question_id": "60",
      "model_score": 27.9,
      "human_score": 0.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "Aerobic, Anaerobic, Backyard Composting "
    },
    {
      "question_id": "65",
      "model_score": 70.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Seperating declaration and definition provides a clear view of the abstraction (i.e.,the idea behind the program) especially when the declarations are grouped together.\n\nThe programs can be made less bulky and made into seperate files. This also helps in delegating the parts of program and highlighting requirements of functions."
    },
    {
      "question_id": "104",
      "model_score": 53.8,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Notes on address space:\n\n(i) Interrupt disabling: Since it is a privileged operation, the interrupt disabling might be necessary to perform certain operations such as a syscall. Since the OS provides the syscall, OS prevents the user process from disabling interrupts in the CPU by running in higher privilege level via LDE.\n\n(ii) Making the book section non-switchable: A user process may try to put a context switch into another process but this is prevented by the OS since the context switch occurs"
    },
    {
      "question_id": "50",
      "model_score": 60.6,
      "human_score": 0.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "useful for spillway design,reservoir design and for safely discharging flood by attenuation and  by increasing the lag"
    },
    {
      "question_id": "62",
      "model_score": 16.4,
      "human_score": 0.0,
      "question": "To reduce spatial and temporal water availability problems ----------- and ----------- are constructed",
      "instructor_answer": "dams & reservoir/canals",
      "student_answer": "pipe networks, acquifiers"
    },
    {
      "question_id": "79",
      "model_score": 49.7,
      "human_score": 0.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "which gives a empirical results of any observation"
    },
    {
      "question_id": "48",
      "model_score": 58.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "FALSE. There is nothing stopping us from doing so. The pid of the parent remains unchanged, and so the child continues to be a child. None of the open files are affected, too. So the child don't need to bother."
    },
    {
      "question_id": "61",
      "model_score": 20.8,
      "human_score": 0.0,
      "question": "Three key principles of ISO series are                                             .,                                                                                                                              ...and                                                                                  .      ",
      "instructor_answer": "Consensus , Industrial wide applicability and Voluntary Nature",
      "student_answer": "decentralisation,polluter pay,principle of non-discrimination"
    },
    {
      "question_id": "40",
      "model_score": 64.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue, pipe creates a unidirectional channel with the write end at fd[1].\n"
    },
    {
      "question_id": "65",
      "model_score": 52.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)Easy readability and understandability of the code.\n2)"
    },
    {
      "question_id": "1",
      "model_score": 72.6,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "constant debt-equity ratio"
    },
    {
      "question_id": "65",
      "model_score": 62.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Seperating Definition from declaration can be used in cases like virtual functions where a function is declared in parent class and it is defined in subclasses as we have done in the labs\n\n2)Seperating Definition from declaration\nalso makes the readability of code easy"
    },
    {
      "question_id": "51",
      "model_score": 82.6,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1)Imperfection in crystal structure \n2)Ionization of the surface sites"
    },
    {
      "question_id": "70",
      "model_score": 37.1,
      "human_score": 1.0,
      "question": "What approach should be followed to find a reasonable probability distribution for a given time series?",
      "instructor_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanalysis the results\n",
      "student_answer": "choose CDF (Chi square test) or PDF(ADS, KS)"
    },
    {
      "question_id": "105",
      "model_score": 63.7,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " TRUE FALSE It reattempts to be what that memory again\nIn lazy allocation, it is stored in PGB as metadata or info or on heap that also and so amount of memory also given/allocated but not mapped get but it will not map it then, when accessing that memory region, it raises a PGFLT since it is not allocated yet, it will handle trap checking that it is valid and then allocate and map(CPB) around that requested address aligned linearly.\nThis is on heap"
    },
    {
      "question_id": "49",
      "model_score": 23.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, since each forms has a PGB of its own. Whereas a PGB is multi. Pid of each process should be unique, not its attributes of PGB. new case has to own ICB."
    },
    {
      "question_id": "104",
      "model_score": 34.0,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " When the user process makes a system call, the OS will prevent that via the limited-directed execution sop As system call is a privileged operation. Another case is when the user process tries to perform an interrupt or tries to schedule something through interrupts. As there are privileged operations OS need to prevent them and perform LDE. Even when user process attempts to change something in hardware or kernel, the OS prevents it via LDE."
    },
    {
      "question_id": "39",
      "model_score": 4.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nTrue.\n"
    },
    {
      "question_id": "27",
      "model_score": 62.5,
      "human_score": 1.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "1-In medical field for surgery of heart laser technology is used \n2-In factories to repair the fault in machines lasers are used"
    },
    {
      "question_id": "61",
      "model_score": 92.2,
      "human_score": 2.0,
      "question": "Three key principles of ISO series are                                             .,                                                                                                                              ...and                                                                                  .      ",
      "instructor_answer": "Consensus , Industrial wide applicability and Voluntary Nature",
      "student_answer": "Consensus of participants, Industry wide applicability, voluntary nature"
    },
    {
      "question_id": "22",
      "model_score": 84.0,
      "human_score": 2.0,
      "question": "During coagulation process alkalinity reduces due to the ___________________________",
      "instructor_answer": "As coagulation is done,the OH- tend to form more bonds with the molecules in the sample, and H+ concentration increases which lowers the pH level.",
      "student_answer": "increase in H+ ion concentration ie lowering of pH."
    },
    {
      "question_id": "90",
      "model_score": 66.1,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "From classification point of view, they can be graphically visualized and can have a simple mathematical function to clearly distinguish the two different classes by non linearly transforming the feature vectors."
    },
    {
      "question_id": "10",
      "model_score": 23.9,
      "human_score": 0.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "changing priority if a task while it's running. vTaskPrioritySet(~xGetTaskPriority())"
    },
    {
      "question_id": "64",
      "model_score": 81.6,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A narrow range of H around 0 degrees (Because Hue angle for red is around 0 degrees) , Intensity(I) centered around 0.5 \nand Saturation(S) approximately 1"
    },
    {
      "question_id": "49",
      "model_score": 89.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "Ans) False, for every new process there is a different PCB. So a program having multiple process executing simultaneously won't use the same PCB."
    },
    {
      "question_id": "98",
      "model_score": 14.6,
      "human_score": 1.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "Residtance to thermal conduction"
    },
    {
      "question_id": "64",
      "model_score": 36.8,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Lowpass filter of H with threshold 240, I centered around 0.3-0.5, S "
    },
    {
      "question_id": "94",
      "model_score": 73.0,
      "human_score": 1.0,
      "question": "Why for an asymmetric variable, median is the best measure of central tendency?",
      "instructor_answer": "because around median 50 percent of the distribution is on the left and 50 percent is on the right , so in case of asymmetrial distribution where it is skewed, median will be the best measure of central tendency as mean in case of assymetrical distribution is not accurate measure of central tendency",
      "student_answer": "In median half of the area under PDF is to it's left and remaining to it's right. it is best suited for asymmetric data because it is usually not sensitive to extreme values."
    },
    {
      "question_id": "41",
      "model_score": 56.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue, os decides whether to reschedule this immediately or to switch process\n"
    },
    {
      "question_id": "63",
      "model_score": 53.5,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "In H space narrow band around 120 degrees, broad range of I around 0.33, All values of S to excluding narrow band above 0"
    },
    {
      "question_id": "32",
      "model_score": 11.9,
      "human_score": 0.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "when dissipation of kinetic energy, i.e. reduction in speed is required."
    },
    {
      "question_id": "104",
      "model_score": 22.8,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " -> If a process attempts to directly interact with a I/O device the OS takes control in the process of the day so\n-> If a process attempts to non kill other processes the os takes control.\n-> If a process writes to aborts to write data to a file which is opened for read only OS will not allow they.\n-> If a process wants to write to address which is out of bounds and belongs to some other then OS will not"
    },
    {
      "question_id": "56",
      "model_score": 86.0,
      "human_score": 2.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbaisedness, efficiency, consistent, sufficient"
    },
    {
      "question_id": "105",
      "model_score": 18.9,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "- True, because this is exactly what lazy allocation does."
    },
    {
      "question_id": "64",
      "model_score": 56.9,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "narrow range around 0 degrees for H, narrow range around 0.8-1 for S, "
    },
    {
      "question_id": "16",
      "model_score": 67.3,
      "human_score": 2.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "It is random fluctuation. White noise is if expectation of each element is zero and variance of each element is finite"
    },
    {
      "question_id": "106",
      "model_score": 65.6,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When fork() is called, all contents of the parent is copied to that of child. There is only one thing that is different between them and that is their k-stack. The task receives fd of child as return value while child receives 0.\nFor the child process, after the content and t are copied from its parent, the eip register value is set to 0.\nThe then pops through all register values and executes.\nAfter that the child process returns from kernel mode to user mode with a return value of 0."
    },
    {
      "question_id": "105",
      "model_score": 49.5,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, On a page fault due to an unmapped physical page, the OS doesn't handles the page fault and handling page fault is not its works and it executes the next instruction."
    },
    {
      "question_id": "40",
      "model_score": 30.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\n **TRUE**"
    },
    {
      "question_id": "47",
      "model_score": 64.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue, we can use sleep() in child process accordingly so that the parent process exec() command."
    },
    {
      "question_id": "37",
      "model_score": 13.5,
      "human_score": 0.0,
      "question": "Negative electrode used in Nickel         MH Batteries are _____________.",
      "instructor_answer": "Hydrogen absorbing alloys (MH)",
      "student_answer": "Nickel as Anode that is Negative Electrode"
    },
    {
      "question_id": "64",
      "model_score": 56.8,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H can vary from -45 to +45 degree, I can vary from 0.2 to 0.8 and S can from 0.1 to 1 to get red flower. to get leafs H can vary from 100 to 160 degree, S can vary from 0.1 to 1 and I can vary from 0.2 to 0.8 this will give green portion from different saturation and intensity.\n to get blue sky  H can vary from 180 to 210 degree, S can vary from 0.1  "
    },
    {
      "question_id": "42",
      "model_score": 62.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "FALSE, only OS has that capability. OS is defined by set of rules, and that rules itself dictate whether or not to schedule a process to target process."
    },
    {
      "question_id": "43",
      "model_score": 84.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "**False**, after interrupt handling the OS and the scheduler may be called as we are inside the scheduler."
    },
    {
      "question_id": "64",
      "model_score": 12.3,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range of S around"
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False, True. When the OS is using lazy allocation policy, On a page fault due to an unmapped physical page (but a valid virtual address), OS handles the page fault via allocation and updates the page table and executes the next instruction after the faulting instruction also executed.\nIf the faulting instruction is not re-executed, then the rest of the program might go wrong."
    },
    {
      "question_id": "63",
      "model_score": 63.9,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "To segment the green leaves we can ba narrow edge at H being around 120/360 degrees and intensity range of about 0.8/1 and saturation around 0.4/1. Lowering the intensity and increasing the saturation will also segment out the petal of the flower."
    },
    {
      "question_id": "42",
      "model_score": 25.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nTrue. This can be done via the use of signals. For example, using the kill( ) with the right PID and action, one can resume some previously paused process.\n"
    },
    {
      "question_id": "65",
      "model_score": 52.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) when in a class while defining a large number of member functions , seperating the declaration so that we can declare it after the class is completed helps in getting the overall idea of how many member functions are present ,which are virtual ,which are pure virtual functions ..etc. all the variables, constructors, member functions , will be  lined up one below the other which gives good picture of total functions of the class.\n\n2) seperating the declaration from definition helps a lot in inheritance , example :\nwhen there is a virtual function f()  in base class that is not declared yet and is inhertited to a daughter class and then declared using right syntax ,as compilation goes from top to down,we will have a not yet declared function passed to the daughter class ,yet since the function is declared later we can use the declaration in main function. "
    },
    {
      "question_id": "100",
      "model_score": 47.5,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "Low mrr and hazardous to operator"
    },
    {
      "question_id": "82",
      "model_score": 75.2,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Non-linear discriminant function can discriminate the points/feature which are not linearly seperable or have a complex distribution; linear descriminant function classifier can discriminate features which are already clustered, but can't seperate, minxed or complex distribution."
    },
    {
      "question_id": "63",
      "model_score": 49.1,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "to segment the green leaves and stem the hue(H) must be in the range of 120degrees to 240 degrees."
    },
    {
      "question_id": "49",
      "model_score": 83.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, processes spawned by fork() system call don't use same PCB, child process has different pid, and everything but initial memory is same..."
    },
    {
      "question_id": "65",
      "model_score": 56.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Easy to understand program as all functionality is listed at one place (the declarations with comments)\n2. No fixed allowed order of function calls as all functions are declared at the to"
    },
    {
      "question_id": "65",
      "model_score": 56.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. It makes the appearance of the class good\n because we can clearly see all the declarations at once and  also \nsuppose  we have many member functions defined in a class and if we declare and define at the same place , it will be difficult for us to look for "
    },
    {
      "question_id": "64",
      "model_score": 53.6,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petal of dark green in colour we can find a narrow edge at around 110/360 degree and intensity value around 0.4/1. The saturation has to be 0.9/1 since the darker region needs to be segment out."
    },
    {
      "question_id": "46",
      "model_score": 6.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "TRUE"
    },
    {
      "question_id": "63",
      "model_score": 56.1,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "a narrow range around 120 degrees for H and a narrow range around 0 for I.\nTo segment the green leaves , we use a narrow range around 120 degrees "
    },
    {
      "question_id": "60",
      "model_score": 92.3,
      "human_score": 2.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "windrow composting, in-vessel composting, static aerated composting "
    },
    {
      "question_id": "16",
      "model_score": 69.3,
      "human_score": 0.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "Noise in the time series is define as the random error in the data."
    },
    {
      "question_id": "18",
      "model_score": 71.2,
      "human_score": 1.0,
      "question": "Define trap efficiency of a reservoir and write down the factors affecting the trap efficiency",
      "instructor_answer": "It is defined an the ratio of deposited sediment to the total sediment inflow for given period within the reservoir economic life time.Factors affecting the trap efficiency: Diameter of silt particles, size and weight and type of debrais. Wind flow direction. Shape of the dam.Topography of the dam structure. Material of the dam.",
      "student_answer": "It is the ratio of total sediment deposited a given period to the Total sediment inflow in that period. Factor affecting are sediment characteristics and inflow characteristics."
    },
    {
      "question_id": "35",
      "model_score": 84.0,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Drip Irrigation, Sprinkler irrigation, Furrow method"
    },
    {
      "question_id": "7",
      "model_score": 12.6,
      "human_score": 0.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "micro organism layer (biological/chemical process)"
    },
    {
      "question_id": "90",
      "model_score": 55.1,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "sometimes the data is not classified using linearly transformation but can be classfied using non linear transformation."
    },
    {
      "question_id": "54",
      "model_score": 68.9,
      "human_score": 1.0,
      "question": "The appetitive      faculty corresonds to      ",
      "instructor_answer": "Plato's theory of the soul, the appetitive faculty is one of the 3 divisions of the soul. It is the part dealing with desires and passions",
      "student_answer": "One of the 3 divisions of the soul,(tripartite) corresponding to desire."
    },
    {
      "question_id": "63",
      "model_score": 18.4,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H should be around 0.33\nS should be lower than 0.5\nI should be lower than 0.5"
    },
    {
      "question_id": "106",
      "model_score": 37.0,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " Ans: for exec() system call is made the child process\nwe are return the path handle mode. So we can\ncall for exec() system and handles memory by kernel \nmode user mode Trap/Interrupt the call system\n\nAns: Kernel mode in child process, that the return path\ncalled by user mode first of all system call\nchild process going to fill directory and add the fill\nTrap/Interrupt mode.\nSo child process calling the trap mode."
    },
    {
      "question_id": "27",
      "model_score": 51.4,
      "human_score": 1.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "laser surgery and laser spectroscopy\n"
    },
    {
      "question_id": "72",
      "model_score": 91.3,
      "human_score": 2.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "In space applications the issue involved are the maximum quality should be preserved and the full capacity of communication channel should be utilized and the data rate should not exceed the channel capacity."
    },
    {
      "question_id": "49",
      "model_score": 83.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "We can initiate multiple programs from single binary using system calls like fork(), exec(). But every process has different PCB. So both statements are FALSE."
    },
    {
      "question_id": "47",
      "model_score": 41.8,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTRUE. exec system call can be used before the child terminates. In this case the child process gets a new parent."
    },
    {
      "question_id": "53",
      "model_score": 47.4,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Colour of road , long straight bands of the above colour."
    },
    {
      "question_id": "104",
      "model_score": 1.0,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Assistant\nThere is no image attached."
    },
    {
      "question_id": "36",
      "model_score": 54.7,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "Season, location, peak hour demand, "
    },
    {
      "question_id": "86",
      "model_score": 53.7,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "To represent points in matrix forms and perform matrix operations in sequence\n"
    },
    {
      "question_id": "8",
      "model_score": 39.0,
      "human_score": 0.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N4, N1, N2, N3"
    },
    {
      "question_id": "45",
      "model_score": 87.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue, this functionality is handled by the scheduler, a part of the OS kernel. As a part of modern OS design principles, a privileged user cannot issue privileged actions. And hence, a user process cannot schedule another process on the CPU."
    },
    {
      "question_id": "35",
      "model_score": 87.4,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "furrow method, drip irrigation, sprinkler irrigation, conventional drip, flooding/basin method"
    },
    {
      "question_id": "26",
      "model_score": 6.5,
      "human_score": 0.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "layers of surfaces get piled upon"
    },
    {
      "question_id": "65",
      "model_score": 78.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The code is more organized and easy to read and understand since all definitions can be seen at once. \n2. "
    },
    {
      "question_id": "35",
      "model_score": 81.7,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "flood irrigation, sprinkler irrigation,  drip irrigation frankle irrigation "
    },
    {
      "question_id": "106",
      "model_score": 56.4,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " Ans: When the fork system call is made, the child process is created but it is not a child process according to the parent. i.e ebp and esp are not set for the child process. \nThe eip of the new child process is set to the same place as the eip of the parent process.\nSo whether the parent process executes x or y, it doesn't matter.\nIn the above way, the context gets stored in the pcb of the new child process. And the child process is set to runnable state in fork() and return value at the current eip (return value of fork()) is used to identify whether the child (according to the register of the parent) Then, process in now ready to be scheduled by the angle."
    },
    {
      "question_id": "19",
      "model_score": 74.3,
      "human_score": 2.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "It decides what action has to be performed. Whenever bot reaches a node, automation goes to this state to decide what action it should take next"
    },
    {
      "question_id": "27",
      "model_score": 16.3,
      "human_score": 0.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "to point out something, can be used on black screen "
    },
    {
      "question_id": "10",
      "model_score": 54.7,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "it is a concept in which a high priority process is preempted by OS low priority"
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False: Goes to the faulting instruction if executed. The return address is stored in the register is I-pointer."
    },
    {
      "question_id": "65",
      "model_score": 30.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. By only declaring a virtual function, we can later define that function in sub-classes, which gives us more freedom about defining that function for only those sub-classes that need it. For example, in classes \n2. Another benefit is that we can define the functions tailored as per the requirements of the class. "
    },
    {
      "question_id": "40",
      "model_score": 78.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTRUE, because they are write side fo doesn't have read permissions and vice-versa."
    },
    {
      "question_id": "74",
      "model_score": 60.3,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "For a multi layer perceptron model there are more then 1 hidden layer. When this hidden layers are larger than the time taken to train model will increase, model will not be able to generalise for a Small training data & small number of iterations."
    },
    {
      "question_id": "65",
      "model_score": 47.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.) First, seperating declaration from definition helps to easily observe the declared function/class , if "
    },
    {
      "question_id": "20",
      "model_score": 44.2,
      "human_score": 0.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "In intermittent stream, basin of stream is having water only in monsoon period. in Ephemeral stream beds are artificially filled with water. like water storage tank."
    },
    {
      "question_id": "105",
      "model_score": 45.6,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, it through an error and handel it via trap handler."
    },
    {
      "question_id": "105",
      "model_score": 85.1,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False\nAfter handling the page fault, the OS needs to re-execute the faulting instruction, as this instruction has not yet completed due to page fault.\nEg:\nint *pts = 42;\nIn lazy allocation this might be a page fault, so after page fault the OS needs to execute *pts = 42, else the pts won't have the value 42."
    },
    {
      "question_id": "87",
      "model_score": 87.1,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "Thin layer called Schmutzdecke, on sand surface which retains particles in spaces between the sand grains, is the principal mechanism of particulate removal in the slow sand filter."
    },
    {
      "question_id": "64",
      "model_score": 48.4,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "\"a narrow range around 0 for H, a broad range for I around 0.33, a narrow range around 1 for saturation"
    },
    {
      "question_id": "43",
      "model_score": 87.9,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse. After READY state , the process goes to READY state. The scheduler can schedule it whenever it wants.\n"
    },
    {
      "question_id": "101",
      "model_score": 65.2,
      "human_score": 1.0,
      "question": "Write down the difference between seasonality and long-term oscillations in a hydrlogic time series data.",
      "instructor_answer": "Seasonality oscillation, Due to rotation of earth, around the sun, monthly and seasonal hydrologic events exhibit regular oscillating varations. Oscillations are found around the trend line some oscillations occur over very large period of time, known as long term oscillations. They are well distributed about their mean value.",
      "student_answer": "Seasonal oscillations shows variation over yearly or 6 month period. While long -term oscillations occurs over 12 years or 60 years these are basically due to plationay relation position."
    },
    {
      "question_id": "45",
      "model_score": 25.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nFalse \n          Parent process when use 'wait (childpid, NULL, 0)', it initiates a context switch and schedule the child process."
    },
    {
      "question_id": "45",
      "model_score": 85.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue.\nThe next process on the CPU can only be scheduled by the OS using the kernel stack. Context switches can be performed only by the OS.\n"
    },
    {
      "question_id": "56",
      "model_score": 76.6,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "consistency, efficiency , sufficiency"
    },
    {
      "question_id": "105",
      "model_score": 71.8,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False. The OS has to execute the same instruction.\nThat particular instruction was never executed. Thus, \nif we execute it now, we are breaking the process\nabstraction. Hence, it will execute the same instruction again."
    },
    {
      "question_id": "58",
      "model_score": 22.0,
      "human_score": 0.0,
      "question": "The philosophies to define environmental management are                                                                                                            ",
      "instructor_answer": "Conservationism, Preservationism, Deep Ecology, Social Ecology",
      "student_answer": "Sustainable Development, Multidisciplinary Approach, Long term global application. "
    },
    {
      "question_id": "49",
      "model_score": 85.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False On executing the same program multiple times simultaneously, each process runs independently with a different PCB to maintain the process abstraction."
    },
    {
      "question_id": "66",
      "model_score": 15.3,
      "human_score": 0.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "Values are more reflective and capture analyst relative confidence"
    },
    {
      "question_id": "65",
      "model_score": 69.1,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) shows all the function declarations of the class at once to us for easy access to the function declarations.\n2) seperates the abstraction from internal code and makes the code neater and easier to access"
    },
    {
      "question_id": "42",
      "model_score": 86.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFALSE: The scheduling is done by OS, as otherwise it allows process to arbitrarily schedule each other."
    },
    {
      "question_id": "41",
      "model_score": 48.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nYes, there might even be a delay/ it may not get scheduled. It all depends on scheduler.\n"
    },
    {
      "question_id": "75",
      "model_score": 61.8,
      "human_score": 2.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "1. The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1\n\n2. The prism storage is a function of the outflow, whereas the wedge storage is a function of the difference of the inflow and outflow "
    },
    {
      "question_id": "41",
      "model_score": 92.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "TRUE. The CPU scheduler may decide to schedule another process after the completion of the interrupt handler."
    },
    {
      "question_id": "8",
      "model_score": 43.9,
      "human_score": 1.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1 as it does not contain the updated logs from terms provided"
    },
    {
      "question_id": "65",
      "model_score": 76.0,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) It helps the code look more organised as all the functionalities of a class/chunk of code in general are visible at one place. (2) It helps us to debug/define individual member functions without disturbing the order of their declaration inside the class. In other words, functions that call other functions can be defined in any convenient order if we have declared them in the correct order"
    },
    {
      "question_id": "105",
      "model_score": 28.7,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " lazy allocation\nTrue\nAs malloc which just allocates a memory but not mapped pages which happens only when we access the memory\nthis happens through the page-fault handler only"
    },
    {
      "question_id": "80",
      "model_score": 69.5,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "material properties at particular point differ in 3 mutually orthogonal axes"
    },
    {
      "question_id": "90",
      "model_score": 61.6,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Nonlinear tranforming the feature vectors makes linear regression so much efficient. This result in ease of classifying into different classes."
    },
    {
      "question_id": "64",
      "model_score": 38.3,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "in H space narrow band above 0 and below 360, broad range for I around 0.5 "
    },
    {
      "question_id": "65",
      "model_score": 39.3,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)If we want to use a function say f in another function g and also g in f then it's advantageous to declare f before the definition of g and define f after the definition of g.\n2)"
    },
    {
      "question_id": "71",
      "model_score": 76.7,
      "human_score": 2.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "clay minerals and ocean salts"
    },
    {
      "question_id": "46",
      "model_score": 84.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue. \nWhenever a process makes a syscall or it completes OS can decide on the scheduling. Though this may cause a problem if a process runs indefinitely in user mode, parent process still the child process terminates.\n"
    },
    {
      "question_id": "64",
      "model_score": 47.4,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0 degrees for H"
    },
    {
      "question_id": "4",
      "model_score": 35.6,
      "human_score": 1.0,
      "question": "A rating curve is only valid when?",
      "instructor_answer": "A rating curve is only valid when there is no over flow or flood in a region.",
      "student_answer": "Rating curve is only valid when the variable to be measured continuously."
    },
    {
      "question_id": "46",
      "model_score": 59.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "True. The OS can schedule anything (based on the scheduling algo), if no timer interrupt, this shift can be due to time interval."
    },
    {
      "question_id": "9",
      "model_score": 52.7,
      "human_score": 1.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "Exit multiple and  perpetuity growth rate"
    },
    {
      "question_id": "46",
      "model_score": 25.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "**TRUE**\n- It may still have opportunities if processes cooperate or make errors, but it also may never get an opportunity if a non-cooperative and runs non-cooperatively and without an error."
    },
    {
      "question_id": "44",
      "model_score": 35.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nTrue, as the schedule READY processes depends on the user and it interrupt the user permission\n"
    },
    {
      "question_id": "3",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "                                                                                                                                                                                                                                                                                                                                                                   efficiency is the ratio of the quantity of water stored in the root zone of the crops to the quantity of water actually delivered into the field.",
      "instructor_answer": "Efficiency of water application",
      "student_answer": "Efficiency of water application"
    },
    {
      "question_id": "24",
      "model_score": 64.1,
      "human_score": 1.0,
      "question": "For cooling, the samples from oven or furnace are moved to desiccator primarily to                                                       ",
      "instructor_answer": "bring down the temperature without any type of condensation process or moisture addition from surrounding",
      "student_answer": "Cool and stabilise it for final/further measurement of remaining compound"
    },
    {
      "question_id": "60",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "Windrow, Static-aerated piles, In-vessel composting"
    },
    {
      "question_id": "53",
      "model_score": 63.2,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "edges of roads and colour of road can be useful in the classification of the roads"
    },
    {
      "question_id": "74",
      "model_score": 92.2,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "when the number hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high."
    },
    {
      "question_id": "58",
      "model_score": 41.4,
      "human_score": 1.0,
      "question": "The philosophies to define environmental management are                                                                                                            ",
      "instructor_answer": "Conservationism, Preservationism, Deep Ecology, Social Ecology",
      "student_answer": "Sustainable, deep ecological, less waste."
    },
    {
      "question_id": "64",
      "model_score": 67.5,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "You may leave your answers in general terms, s\"a narrow range around 0/360      degrees for H\" or \"a broad range of I centered around 0.5.\"      "
    },
    {
      "question_id": "64",
      "model_score": 48.1,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Narrow range around 0 degrees for H"
    },
    {
      "question_id": "63",
      "model_score": 56.3,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "An appropriate range around 120       H needs to be selected such that all green areas (leaves and stem) are segmented clearly. The range can be empirically found."
    },
    {
      "question_id": "102",
      "model_score": 67.0,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "particle size, ultrasonic frequency , tool cross section and vibration amplitude"
    },
    {
      "question_id": "106",
      "model_score": 62.4,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " For the parent process, it is handled by the\ninterrupt handler do return back to user mode.\nFor the child process, its trapframe is also\ncopied from the forked trapframe, thus whenever\nit encounters a trap, it can be handled by the\ntrap handler. If we are talking about returning\njust after the fork() call is made; then the\nparent process is handled by the trap handler.\nFor the child process, we didn't erase it\nrunning in the first place, so its setdata process\nis simply put in runnable state where it can be\nscheduled by the OS later on.\nyield() function can also be used in case of semaphores"
    },
    {
      "question_id": "104",
      "model_score": 16.1,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) A process could try to monopolize the CPU to itself but the timer interrupt used by the Linux kernel will prevent this from happening.\n2) A user could try to access the kernel space by trapping into it, but this is prevented by the user not having the required privilege for it."
    },
    {
      "question_id": "68",
      "model_score": 93.8,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification"
    },
    {
      "question_id": "50",
      "model_score": 69.0,
      "human_score": 2.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "reservoir routing helps to decrease the intensity of flood and also added lag time to the peak\nchannel routing helps in effective discharge of peak water hence used for safety"
    },
    {
      "question_id": "64",
      "model_score": 58.8,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360 degrees for H to preserve the colour red and broad range of S around 0.6 to remove the whites in the background but preserve the reddish dark petals"
    },
    {
      "question_id": "42",
      "model_score": 19.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nTrue, switch() system call can be used for this context switch when arg1 is known"
    },
    {
      "question_id": "29",
      "model_score": 97.9,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "intensity of rainfall, time"
    },
    {
      "question_id": "44",
      "model_score": 16.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "FALSE"
    },
    {
      "question_id": "104",
      "model_score": 18.3,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 2) Handling interrupts: os does not run user interrupt\nof a user process starts handling its interrupt then it may sabotage penalize other processes by handling their interrupts in a wrong way. (Correct) writing to the address of any system call may go wrong & eg. a user process can modify / always kill a process if it handles its interrupts due to a system call.\n\n2) Read/write to disk: If a user process has access to inode of files then it may read & write to make some serious read & writes to datablocks which can affect other processes also along with corrupting the disk."
    },
    {
      "question_id": "69",
      "model_score": 92.1,
      "human_score": 1.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "The life upto which the reservoir can still be used, even after the expiration of the economic life of the reservoir."
    },
    {
      "question_id": "44",
      "model_score": 89.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "FALSE. Processes can give up control willingly using system calls. Moreover when some input processes are blocked, OS can schedule other proc. i.e."
    },
    {
      "question_id": "106",
      "model_score": 72.9,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "When a fork() system call is made, it does two main things. First, it sets the return value to zero for the newly created child process. It also copies the trapframe of the process that created the child process to the newly created child's trapframe. Second, it makes the trapframe PC point to a special function called folk_det(). So, when a newly created child is scheduled for the first time, it first goes to folk_set() function. In this function, the child processes will return to the user mode from the kernel mode."
    },
    {
      "question_id": "46",
      "model_score": 60.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue, in certain scheduling policies (non pre-emptive), OS can schedule processes without using timer interrupt. \n"
    },
    {
      "question_id": "3",
      "model_score": 98.1,
      "human_score": 2.0,
      "question": "                                                                                                                                                                                                                                                                                                                                                                   efficiency is the ratio of the quantity of water stored in the root zone of the crops to the quantity of water actually delivered into the field.",
      "instructor_answer": "Efficiency of water application",
      "student_answer": "water application efficiency"
    },
    {
      "question_id": "74",
      "model_score": 80.5,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "If number of hidden layers is very large : It takes more time for updation of weights by backpropagation algorithm. If the learning function is simple for the given data, then we may overfit the data which results in generalization failure. If number of training samples are less, then also it leads to overfitting & thereby generalization failure."
    },
    {
      "question_id": "42",
      "model_score": 57.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFALSE, only OS has the right to schedule processes, can easily outwitas os if they could have down as mentioned."
    },
    {
      "question_id": "74",
      "model_score": 65.9,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "When the number of hidden layer increases there is a highly possibily that the gradients calculated via back-propagation can explode or diminish to zero. Thus the update doesn't occur properly. This is because the gradient propagate backward and if they are all small, then multiplications leads to very small value. "
    },
    {
      "question_id": "105",
      "model_score": 35.8,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "A: True, this allocation is somewhat similar to the mmap() system call (which on page-fault allocates a new page to the virtual address where the page-fault occurred). So, on a page fault due to an unmapped physical page (on a valid virtual address during execution the OS handles the page-fault (via allocation and new mapping) and then executes the next instruction."
    },
    {
      "question_id": "90",
      "model_score": 61.9,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "It can be case that classes are not linear seperable in the current feature space, but becomes linear separable in some higher dimension"
    },
    {
      "question_id": "47",
      "model_score": 81.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "TRUE. This will lead to parent processes' assembly being overwritten but child is unaffected as it has a different PCB & kernel stack."
    },
    {
      "question_id": "106",
      "model_score": 75.4,
      "human_score": 2.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When fork is called, it creates a copy of the parent one everything\neven the elf, ebp, esp all the registers. It then allocates\nthis newly created process into the running state, just before this\nthe eax register of this newprocess is given value of (return from fork())\nnow when it starts to run it starts from where forks()\nwas called as a separate process but with return value o differentiating\nbetween parent and child. (parent gets 0 child gets pid), so the\nreturn from kernel happens for 2 process even though it was wrapped\nby process, returning different values in eax and no resuming, starting\nexecution in parent, child respectively. This is similar to running\na process twice from the point fork is called\n\nas the eax is given a value inside, it is treated some way as any\nprocess calling system call and getting return o causing it to return from\ntrap even though it has not been trapped as it is using all registers of parent\nexcept the return value."
    },
    {
      "question_id": "2",
      "model_score": 30.3,
      "human_score": 2.0,
      "question": "\nWhat\nis the Full form of RCP?",
      "instructor_answer": "Representative Concentration Pathway",
      "student_answer": "representative concentration pollution"
    },
    {
      "question_id": "84",
      "model_score": 79.4,
      "human_score": 1.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "it can be seem that a single perceptron will not be able to classify the data as it is non - linear so we need min 2 perceptron to classily the output for XOR problem. so performance of multilayer perceptron will be high in comparison with single perceptron classifier."
    },
    {
      "question_id": "41",
      "model_score": 81.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTRUE, scheduler may schedule some other process and original process would have to wait for when it is scheduled.\n"
    },
    {
      "question_id": "53",
      "model_score": 49.9,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "features : color, Texture, width and direction"
    },
    {
      "question_id": "69",
      "model_score": 64.8,
      "human_score": 1.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "It is the life for which a reservoir can be used. It is greater than the useful life of a reservoir."
    },
    {
      "question_id": "41",
      "model_score": 89.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue. The OS may call scheduler before after interrupt handling and scheduler may schedule some other process.\n"
    },
    {
      "question_id": "75",
      "model_score": 59.6,
      "human_score": 2.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "1. Muskingum flood routing method is applicable to Natural Channel.ie (m=1)\n2. Storage is the function of both Inflow and Outflow discharge.\n"
    },
    {
      "question_id": "106",
      "model_score": 80.9,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " The child process copies the trapframe of the parent in the fork call. It changes the value of eax register to 0, as per the expected behaviour of fork.\n\nHowever this trapframe was not a part of the kernel stack of the child process since it has only newly been created in the 'kernel space'. Therefore, at the end of fork iret is not called.\n\nThe trapret call (given the argument: pointer to new trapframe) will simulate the behaviour of returning from a trap in the child process, and the child process starts executing in the userspace as if it just returned from the fork call."
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "Failure, it executes the faulting instruction just after managing the allocation of page and updating page fault."
    },
    {
      "question_id": "43",
      "model_score": 71.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse, context switch can also happen after an interrupt, there is no worry for data loss, because data is stored in kernel stack/PCB"
    },
    {
      "question_id": "106",
      "model_score": 7.3,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " - Allocate a page for the same.\nSP = SP + PAGE_SIZE  // stack grows downwards\nSP = SP - W_SIZE\n*"
    },
    {
      "question_id": "79",
      "model_score": 64.1,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "equation who free parameters should be specified by experimental data"
    },
    {
      "question_id": "27",
      "model_score": 56.7,
      "human_score": 1.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "1)Used in surgery\n2)Used in Laser Spectroscopy "
    },
    {
      "question_id": "49",
      "model_score": 75.1,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. PCB has no reference counter."
    },
    {
      "question_id": "22",
      "model_score": 60.5,
      "human_score": 1.0,
      "question": "During coagulation process alkalinity reduces due to the ___________________________",
      "instructor_answer": "As coagulation is done,the OH- tend to form more bonds with the molecules in the sample, and H+ concentration increases which lowers the pH level.",
      "student_answer": "Hydrogen ion increment in sol"
    },
    {
      "question_id": "65",
      "model_score": 70.4,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Avoids bunching of code in the class and hence has better readibility.\n2. Class is easy to understand as an object which has member functions, without knowing the details of how the task is implemented.\n3. Pure Virtual functions are based on this idea where declaration is present in superclass but definition is present in subclasses. These functions are of great use in creating abstract objects and in inheriting properties in subclasses. "
    },
    {
      "question_id": "42",
      "model_score": 35.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "True, OS can schedule the process next on CPU based on knowing its PID."
    },
    {
      "question_id": "104",
      "model_score": 38.5,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " i) Trying to disable interrupts and monopolizing CPUs (OS will not allow users privileged process to change interrupt times for enabling the interrupts via IDT)\nii) Trying to access the data of other process for trying to modify the data of kernel stack\nOS will not allow one programme to access the data of the other programmes for modifying the OS data it-self\niii) Modifying the system calls by implementing new sys calls (we can't modify for access the system calls directly in user-mode)"
    },
    {
      "question_id": "47",
      "model_score": 87.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue. After the fork is done, the parent child are two different processes executing on their own. Unless a 'wait()' is added before 'exec()', this is possible."
    },
    {
      "question_id": "58",
      "model_score": 67.1,
      "human_score": 2.0,
      "question": "The philosophies to define environmental management are                                                                                                            ",
      "instructor_answer": "Conservationism, Preservationism, Deep Ecology, Social Ecology",
      "student_answer": "Conservertism,Preseverstism, Deep Ecology and Social Ecology"
    },
    {
      "question_id": "35",
      "model_score": 85.6,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "drip, sprinkler, furrow and flooding"
    },
    {
      "question_id": "88",
      "model_score": 20.5,
      "human_score": 0.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "So different layers of waste water is made and we can remove undesirable from it"
    },
    {
      "question_id": "10",
      "model_score": 92.6,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource needed by the higher priority process. "
    },
    {
      "question_id": "88",
      "model_score": 26.4,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "to neutralize the sludge from a discharge process"
    },
    {
      "question_id": "103",
      "model_score": 7.3,
      "human_score": 0.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "requires more running power"
    },
    {
      "question_id": "96",
      "model_score": 85.6,
      "human_score": 2.0,
      "question": "Why to test the level of significance in hydrological time series analysis and modeling? Which test will you use to test the level of significance?",
      "instructor_answer": "The test of level of significance is used to test how well our prediced model fits observed data (goodness of Fit test).It is important because it gives the prorbability of rejecting the null hypothesis using a statistical test. The chi-square (X2) test is used to test the level of significance.",
      "student_answer": "Level of significance is used to check whether the modeling fits the data or not. Whether our modeling is correct or not. Chi -square test is used to test significance."
    },
    {
      "question_id": "57",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "The dispersion number characterizes the degree of dispersion relative to ________________.",
      "instructor_answer": "the degree of advection",
      "student_answer": "the degree of advection"
    },
    {
      "question_id": "69",
      "model_score": 28.9,
      "human_score": 0.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "240 years, denotes the period during which whole or specified fraction of its total or active capacity is lost"
    },
    {
      "question_id": "26",
      "model_score": 82.6,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc"
    },
    {
      "question_id": "106",
      "model_score": 85.5,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " During handling of fork system call, the new PCB etc is allocated for the child process:\n1. Create a new PCB with new pid & fill in process data\n2. PCB contains the context for parent. In this context, the appropriate eip is written for the child\n3. The trapframe inside the kernel stack is also updated with correct eip, esp ebp values. (eip comes from parent, eax, ebp are memory pointers after memory has been copied)\n4. The return value register is written as 0 for child & pid of child for parent. Now both PCB and trapframe have been updated correctly. At this point, sched() is called to run the scheduled process.\nNote that either parent or child are both runnable now.\nThe context information for child is present in a trapframe newly created by OS & stored in k-stack\nIf scheduler chooses to run child, it issues return from trap & the child's context is loaded from it's trapframe"
    },
    {
      "question_id": "102",
      "model_score": 55.5,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "the rate at which particle impacts, frequency, amplitude"
    },
    {
      "question_id": "83",
      "model_score": 72.1,
      "human_score": 1.0,
      "question": "What is the difference between basin order and channel order?",
      "instructor_answer": "Basin order is highest order of any stream in that basin whereas Channel order is order of stream\nwhich denotes that what order of streams has joined the channel.",
      "student_answer": "Basin order is for basin watershed whereas Channel order is no of channel of given order in drainage\nbasin."
    },
    {
      "question_id": "104",
      "model_score": 23.8,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. If we know a physical address/random physical address and try to change content in it, then OS prevents it via LDE setup\n2. If processes can run on infinite while loop and try to cover total CPU but as OS shares CPU with other processes limiting process access to CPU."
    },
    {
      "question_id": "53",
      "model_score": 27.1,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Features are Spatial fetaure, NDVI, Texture feature, shape feature "
    },
    {
      "question_id": "104",
      "model_score": 4.4,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " C6H5\n       |\n      COOH\n       |\n      CH2\n       |\n      COOH"
    },
    {
      "question_id": "97",
      "model_score": 11.4,
      "human_score": 0.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "overhang, non uniform frictional conditions, long tool"
    },
    {
      "question_id": "80",
      "model_score": 24.2,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "MATERIALS  with 3 plane of symmetry"
    },
    {
      "question_id": "80",
      "model_score": 46.5,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "material having three perpendicular planes of symmetry"
    },
    {
      "question_id": "35",
      "model_score": 80.6,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Basin method\nFurrow method\nSprinkler method\nDrip method "
    },
    {
      "question_id": "81",
      "model_score": 56.2,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "If eigen values are very low then it convey that the two bands will be highly correlated."
    },
    {
      "question_id": "77",
      "model_score": 33.9,
      "human_score": 2.0,
      "question": "What are the two important scales in Hydrology? ---------------------",
      "instructor_answer": "Availability of driking water, time scale, length of the process, spatial scale.",
      "student_answer": "Time Scale and Spatial Scale"
    },
    {
      "question_id": "49",
      "model_score": 75.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, \n We need different procs for each of them to store metadata related to that process.\n Example:"
    },
    {
      "question_id": "67",
      "model_score": 12.9,
      "human_score": 0.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "probability papers,normal and lognormal probability papers"
    },
    {
      "question_id": "41",
      "model_score": 54.4,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\n **True**, next process scheduled depends on various factors and per such as priority of processes etc.\n"
    },
    {
      "question_id": "74",
      "model_score": 66.6,
      "human_score": 0.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "Issues that arise when hidden lagers are very large is. that unimportant and not so common features are taken into account while training the model and when tested , it tries to fit such features which leads to wrong results. And also more number of hidden layers means a complex mathematical function mapping form imput to output"
    },
    {
      "question_id": "42",
      "model_score": 91.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "FALSE A user process cannot decide the next process to be scheduled by the OS scheduler."
    },
    {
      "question_id": "44",
      "model_score": 59.8,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse, the OS can schedule the ready processes even without the timer interrupt.\n"
    },
    {
      "question_id": "42",
      "model_score": 80.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "False Only OS has the capability to initiate a context switch and schedule other processes."
    },
    {
      "question_id": "63",
      "model_score": 69.2,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "A narrow range around 120 degree for H (due to green color of leaves). A narrow range of I centered at 0.7 (since"
    },
    {
      "question_id": "64",
      "model_score": 65.9,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "three components:\n1. Red roses\n2. blue sky\n3. green leaves and stems\n\nto segment red roses we can see it is almost pure colour so we can set hue around to 0 degrees with some upper and lower threshold, then for saturation as it is known it is a pure colour saturation will also be high so we can again put narrow range for saturation for intensity as for red only one of the three colours is present in abundance so "
    },
    {
      "question_id": "80",
      "model_score": 51.3,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "have material properties which differ along thr"
    },
    {
      "question_id": "63",
      "model_score": 60.6,
      "human_score": 0.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "To segment the green leaves and stem we extract HSI information from RGB and normalize it. It decouples intensity and color information. The intensity of leaves and stem is less compared to rose petals. The normalized hue should be around the range of 1/3 varying slightly.  \n\nAlso color edge detection can ve used to identify in both cases."
    },
    {
      "question_id": "65",
      "model_score": 63.6,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.) First, seperating declaration from definition gives us the some flexibility the way in which we want to write our program. Like if I declare a function in a superclass then I can override it's definition in anyone of its base classes.\n2.) It helps us to create abstract classes , which in turn gives high level overview of our programs \n3.) It helps to create a generic code which is easily modifiable later on, if we want to.\n4.)If we declare member functions in th class (but define them later), this helps us to know which all components are there in the classes and makes our code easily understandable.  "
    },
    {
      "question_id": "100",
      "model_score": 62.5,
      "human_score": 2.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "Low MRR, high cost of machining and loss of metal during machining"
    },
    {
      "question_id": "71",
      "model_score": 82.6,
      "human_score": 1.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "clay mineral, organic and inorganic salts"
    },
    {
      "question_id": "65",
      "model_score": 80.9,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) User can clearly see the important declarations of a class together, makes the code more readable and usable for a new person.\n\n2) Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. "
    },
    {
      "question_id": "32",
      "model_score": 89.2,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "A Canal fall is provided when the natural slope is greater than the slope of the canal"
    },
    {
      "question_id": "64",
      "model_score": 69.2,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360 degrees for H. A broad range of I centred around 0.5. A narrow range of S centred around 0.8."
    },
    {
      "question_id": "42",
      "model_score": 11.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFALSE"
    },
    {
      "question_id": "64",
      "model_score": 75.6,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A broader range around 0/360 degrees in H such that all red color is covered. The suitable range has to be found empirically. This is done as rose petals are red in color and red color can be easily segmented in hue space."
    },
    {
      "question_id": "86",
      "model_score": 60.3,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "Allow us to use matrix multiplications which are computationally efficient"
    },
    {
      "question_id": "49",
      "model_score": 89.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Different processes have to use different PCBs. Something else that can be done is using threads instead if you want the processes to share memory."
    },
    {
      "question_id": "42",
      "model_score": 61.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse. Scheduling is done by OS and processes have nothing to do with it. If there is a chance for a process to execute and it is interrupted due to a interrupt. This process is always rescheduled immediately and control returns back to the paused process on completion of the interrupt handler to prevent data loss."
    },
    {
      "question_id": "46",
      "model_score": 55.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue. It could be good for response time for each process. CPU can use FIFO method to schedule process i.e., whenever interrupt is created(system call), the process can go to blocked state and subsequently ready state. Mainwhile the first process in queue can continue to run."
    },
    {
      "question_id": "53",
      "model_score": 16.9,
      "human_score": 0.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "We should look for the density of buildings, presence of gardens, if there are railway stations, airports etc."
    },
    {
      "question_id": "71",
      "model_score": 66.9,
      "human_score": 1.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "desert dust, soot, organic matter"
    },
    {
      "question_id": "81",
      "model_score": 59.3,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "It means that the data obtained is too redundant and some dimensions can be used to obtain other dimensions"
    },
    {
      "question_id": "62",
      "model_score": 13.1,
      "human_score": 0.0,
      "question": "To reduce spatial and temporal water availability problems ----------- and ----------- are constructed",
      "instructor_answer": "dams & reservoir/canals",
      "student_answer": "Recording and Non Recording Rain Gauges"
    },
    {
      "question_id": "45",
      "model_score": 34.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nFalse, process has the capacity to initiate the context switch & schedule the target process next on the CPU.\n"
    },
    {
      "question_id": "27",
      "model_score": 52.4,
      "human_score": 2.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "1)Optical Fiber Communication  2) Medical purposes"
    },
    {
      "question_id": "43",
      "model_score": 82.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFALSE. It could schedule some other process and data wouldn't be lost because we store all the register values etc without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking."
    },
    {
      "question_id": "45",
      "model_score": 74.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "True, a process can only communicate with the OS via the ABI, and context switches happen in kernel mode, and can't be initiated from the user mode."
    },
    {
      "question_id": "32",
      "model_score": 27.5,
      "human_score": 0.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "When the drop in river channel is significant"
    },
    {
      "question_id": "28",
      "model_score": 53.0,
      "human_score": 2.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "Regularized set operation helps to follow the defined process in predefined sequence"
    },
    {
      "question_id": "8",
      "model_score": 46.7,
      "human_score": 0.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N4, N5 likely not a leader. N4 is getting less votes than majoriy and we don't know log of N5"
    },
    {
      "question_id": "48",
      "model_score": 88.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFALSE\nThe exec system call has no such restriction, it can be called by any process anytime."
    },
    {
      "question_id": "44",
      "model_score": 32.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nTrue, without timer interrupt we can't switch b/w processes so only one process will run until completion then next process."
    },
    {
      "question_id": "7",
      "model_score": 59.6,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "periodically draining the water from the filter and removing the top few cm of sand from the filter"
    },
    {
      "question_id": "106",
      "model_score": 64.3,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " During fork call, a new entry in PCB will now have its own set of registers, user stack, PC, etc.\nAfter trap, it moves to scheduler and parent when scheduled, value of 'o' returned by fork function was stored in parent's register. Now space, also called as user space is moved to user area and loaded into parent's hardware.\nLater, when child gets scheduled, child's own set of registers, PC, stack are restored after user space and made child run at exact point where parent called fork function.\nSo, on a new entry for child process is created in scheduler and parent run when either one gets scheduled respectively. Fork returns from trap and child has an entry in PCB from which it can be scheduled and run."
    },
    {
      "question_id": "64",
      "model_score": 77.6,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "create a saturation mask, with saturation above a certain threshold (maybe 0.2, could be lower). multiply with original image to get regions where the petals could possibly be. now create a hue mask from this image, with a narrow band in H centred around 0 degrees (red) or the natural shade of red in roses. multiply the mask with the original image to get the petals."
    },
    {
      "question_id": "40",
      "model_score": 36.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue. If we assign fd[0] for write and fd[1] for read then not fd[1] read file descriptor and hence vice versa is not possible."
    },
    {
      "question_id": "81",
      "model_score": 79.3,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "very low eigen value implies very low contribution in the variance of the data in the respective dimension, we can neglect those dimensions."
    },
    {
      "question_id": "8",
      "model_score": 58.6,
      "human_score": 2.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1 and N5. N2 has seen all entries from term 3. N3 has seen all entries from term 2. N4 has seen all entries from term 1. N5 may not have seen any entries from any term. N1 and N5 are most likely not a leader in any term."
    },
    {
      "question_id": "104",
      "model_score": 13.2,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " The user may maliciously or through bugs, run in perhaps an infinite for/while loop thus monoselfishly never giving up the CPU. To tackle this the OS issues timer interrupts so that every process can run on the CPU only for a certain period of time until it gets context switched.\n\nii) The user"
    },
    {
      "question_id": "87",
      "model_score": 58.4,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "formation of biological layer called Schumtzdecke"
    },
    {
      "question_id": "63",
      "model_score": 45.8,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "a narrow range around 120 degrees for H"
    },
    {
      "question_id": "48",
      "model_score": 35.6,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nExec would load the new binary in the normal operation. However here this would interfere with the parent's \"parent responsibilities\". The OS could disable exec in this case, or assign a new parent to the child similarly to orphan children (giving up for adoption?). I think the general behavior is False."
    },
    {
      "question_id": "88",
      "model_score": 51.3,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "1) to assist the self neutralisation 2) to balance the conduction flow"
    },
    {
      "question_id": "51",
      "model_score": 46.6,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "ionisation of surface and alteration in its structure"
    },
    {
      "question_id": "36",
      "model_score": 18.1,
      "human_score": 0.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1.Leakage in pipes\n2.Excess use of water in household"
    },
    {
      "question_id": "51",
      "model_score": 38.5,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "imperfection in crystal stru"
    },
    {
      "question_id": "64",
      "model_score": 54.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "three components:\n1. Red roses\n2. blue sky\n3. green leaves and stems\n\n1. To segment red roses we can see it is almost pure colour so we can set hue around to 0 degrees with some upper and lower threshold, then for saturation as it is known it is a pure colour saturation will also be high so we can again put narrow range for saturation for intensity as for red only one of the three colours is present in abundance so the intensity will be low ( not minimum but low) so we will put a range around 0.3 as it is only one colour out of three primary colours.\n\n2. To segment blue sky we can set hue to a range around 240 degrees, saturation will also be quite high but the range will not be very narrow, as there is also cloud ( white) present to saturation can be low also, then for the"
    },
    {
      "question_id": "106",
      "model_score": 78.8,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "For child process we write the return address as same as parent process in the kernel stack of child process with a change in eax value which will have o in case of child process and pid of child in case of parent process. So when the kernel stack of both processes are same with change in eax value i.e. return value. The trapframe is also copied to child process from the parent process. So we can issue trapget instruction on child process too and as it has same trapframe as parent process and same kernel stack it also returns from kernel mode to user mode by changing the privilege levels from kernel level to user level and using the same context stored on the kernel stack as which was stored in kernel stack of parent process."
    },
    {
      "question_id": "9",
      "model_score": 85.4,
      "human_score": 1.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "discount rate \nGrowth rate"
    },
    {
      "question_id": "47",
      "model_score": 38.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nFALSE. Among the parent & child processes, the OS scheduler will decide the order of execution. Hence there is no guarantee that the child process will terminate only after the exec() call is finished."
    },
    {
      "question_id": "36",
      "model_score": 57.8,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1)population of city\n2)fire demand\n3)industrial demand\n4)cleaning and maintenance demand"
    },
    {
      "question_id": "42",
      "model_score": 85.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "False. Only OS can schedule a process."
    },
    {
      "question_id": "68",
      "model_score": 80.1,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "multiple hidden layers result in a composition of representations with increasing abstraction. so when we want our network to learn more complex features, having multiple hidden layers >1 is desirable."
    },
    {
      "question_id": "84",
      "model_score": 66.7,
      "human_score": 1.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "here the classes are seperated by 2 lines . Multilayer perceptron can handle the situation whereas in single perceptron fails to provide solution,"
    },
    {
      "question_id": "64",
      "model_score": 61.5,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H: narrow range centered at 0/360degree , possibly (330,20) for red color\nS: narrow "
    },
    {
      "question_id": "65",
      "model_score": 57.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) It increases the readability of the program"
    },
    {
      "question_id": "65",
      "model_score": 62.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "First advantage of separating declaration from definition is that it helps in better readability of the code i.e when the declaration of a function occurs separately we can see each function with proper indentation because the code is less clumsy.\nSecond advantage of separating declaration from definition is that since we write the name of the class in which we are declaring the function, there is "
    },
    {
      "question_id": "43",
      "model_score": 91.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse. A different process may be scheduled, for example when it is a hardware interrupt for I/O.\n"
    },
    {
      "question_id": "46",
      "model_score": 84.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue, on sending syscall from process to OS can still start the scheduler and can schedule other ready processes."
    },
    {
      "question_id": "105",
      "model_score": 84.4,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False, after page-fault trap it returns to the instruction \nbefore causing the faulting instruction hence it executes\nthe faulting instruction, not one after faulting \ninstruction"
    },
    {
      "question_id": "46",
      "model_score": 26.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "A: False, without the timer interrupt, it is impossible to know the time consumed by a process, which leads to CPU to run every process sequentially till they finish. This is not multitasking."
    },
    {
      "question_id": "63",
      "model_score": 79.6,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "for green leaves and stem we have Hue having a narrow range around 120(105 to 135)\nfor saturation\nthis should be broad range around 0.8\n(0.6-1)\nfor intensity a broad range around 0.7 works as pure color have"
    },
    {
      "question_id": "68",
      "model_score": 48.6,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "multilayer perceptron neural network is desirable as it gives good results in learning non linear model and it can learning about characteristics without any use of underlying probability density."
    },
    {
      "question_id": "104",
      "model_score": 46.1,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " (iii) disabling local interrupts:\nIf a process tries to disable interrupt and can make it run forever this is a privileged action. But user process knows about this interrupt action but cannot perform because of limited-directed execution.\n(iv) yield:\nIf a user process tries to yield it is prevented by OS via limited-directed execution as it is a privileged action. It should be only done in kernel mode."
    },
    {
      "question_id": "69",
      "model_score": 76.7,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "Reservoir serving some purpose to limited extend even after expiry of its economic life"
    },
    {
      "question_id": "63",
      "model_score": 81.9,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "then green stems and leaves are there with little of black or darkness present, so hue should be around 120 degrees, saturation high for green colour but also low for darkness in stems, intensity low to minimum for green and black around 0-0.5 range."
    },
    {
      "question_id": "51",
      "model_score": 91.2,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1. Ionization of surface particles (depending on pH of water)\n2. Imperfection in particle structure (silicon replacing lower valency atoms, causing a negative charge to form)\n3. Adsorption of anions onto the surface of particles. \n"
    },
    {
      "question_id": "27",
      "model_score": 47.0,
      "human_score": 1.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "1. for medical application 2. for heat treatment"
    },
    {
      "question_id": "74",
      "model_score": 61.9,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "If number of hidden layers is very large, then there is issue in generalization, no. of hidden layers are larged, no. of parametes to be determine will also be large And when our dataset are large, time System will take more time to estimate these parameters."
    },
    {
      "question_id": "35",
      "model_score": 96.2,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Flooding method\nFurrow method\nSprinkler irrigation\nDrip irrigation"
    },
    {
      "question_id": "65",
      "model_score": 78.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. It is easier to see all the available functions at one place, without worrying about their implementation.\n\n2. It helps to implement "
    },
    {
      "question_id": "47",
      "model_score": 94.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "True, exec can be used in parent process it has no dependency on child processes."
    },
    {
      "question_id": "43",
      "model_score": 58.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFALSE \nCPU schedules the appropriate context and the OS can call the scheduler to schedule a new task.\n"
    },
    {
      "question_id": "72",
      "model_score": 83.0,
      "human_score": 2.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "The critical issues are: maximum image quality should he preserved after compressing the image, full channel capacity should be utilised to transmit images to the base station. Date rate should not exceed maximum channel capacity."
    },
    {
      "question_id": "25",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Full form of ELISA is ____________________.",
      "instructor_answer": "Enzyme linked immunosorbent assay",
      "student_answer": "enzyme linked immunosorbent assay"
    },
    {
      "question_id": "30",
      "model_score": 21.6,
      "human_score": 0.0,
      "question": "If there is one explanatory variable, regression analysis is termed as (                                                               )       else it is termed as (                                                                             )",
      "instructor_answer": "Univariate and Multivariate",
      "student_answer": "single linear regression and multiple linear regression"
    },
    {
      "question_id": "32",
      "model_score": 30.7,
      "human_score": 0.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "In cross drainage works when diff between bed level of canal and that of the drainage is small."
    },
    {
      "question_id": "82",
      "model_score": 28.8,
      "human_score": 0.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "On applying a non linear transformation, such as a segmoid as tank function, it is possible to work with probabilities and not numbers directly. Probabilities are easy to understand at a glance and scaling numbers down to smaller internal also helps save on computational power. Using a discriminant functions which is non-linear exploits these and helps make observations easy."
    },
    {
      "question_id": "36",
      "model_score": 51.4,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "climatic conditions, quality of water, "
    },
    {
      "question_id": "22",
      "model_score": 69.3,
      "human_score": 0.0,
      "question": "During coagulation process alkalinity reduces due to the ___________________________",
      "instructor_answer": "As coagulation is done,the OH- tend to form more bonds with the molecules in the sample, and H+ concentration increases which lowers the pH level.",
      "student_answer": "Reduction of basic ions, because in coagulation, ions coagulates and alkalinity means capacity to neutralizing an acid, thus less basic ions make less neutralization."
    },
    {
      "question_id": "47",
      "model_score": 88.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "True, But it will not guarantee that Parent process is scheduled first but yes if parent is scheduled first then after exec child will not run."
    },
    {
      "question_id": "36",
      "model_score": 73.0,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "Temperature (more water needed on hot days)\nEconomic sector (agriculture needs more water)\nGeographical location\nPer capita income (better standard of living consumes more water)"
    },
    {
      "question_id": "36",
      "model_score": 62.3,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1) population of city\n2) climate\n3)type of occupation"
    },
    {
      "question_id": "9",
      "model_score": 94.3,
      "human_score": 2.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "perpetual growth rate, WACC"
    },
    {
      "question_id": "64",
      "model_score": 35.9,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A narrow range around 0 degrees for hue"
    },
    {
      "question_id": "47",
      "model_score": 85.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "True. 'There is no problem in using an exec system call on a process with running/waiting/idle child processes. It doesn't change the process but just loads another program in the process.'"
    },
    {
      "question_id": "48",
      "model_score": 61.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\n **FALSE**, even if parent process shifts to another process the child process will bind to another process as parent and it has separate data in it."
    },
    {
      "question_id": "39",
      "model_score": 90.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "False. Reason: Read using fd[0] & write using fd[1] is only correct. Vice versa ie read on fd[1] & write on fd[0] can't be done because pipe system is **half-duplex**. fd[0] -> read-end & fd[1] -> write-end."
    },
    {
      "question_id": "53",
      "model_score": 56.0,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "As roads are usually gray like intensity in that bond will be useful. As roads are continues with small breath and large length, adding additional feataures corresponding to neighbouring pixels can be useful like gray scale values or error in gray scale values ."
    },
    {
      "question_id": "85",
      "model_score": 88.7,
      "human_score": 2.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "In this, the horizontal and the vertical creep are considered in the same way. "
    },
    {
      "question_id": "105",
      "model_score": 82.7,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " FALSE\nThe OS will again execute the instruction which\ncaused the page fault.\nThat's the only point of allowing the PA, so now the\naccess would be correct"
    },
    {
      "question_id": "48",
      "model_score": 93.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "FALSE, parent process is completely independent of child process and both runs independently. So it doesn't matter if child process terminates or not, parent can still call exec system call."
    },
    {
      "question_id": "42",
      "model_score": 50.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\n$\\rightarrow$ False, exec system call does not have anything to do with the CPU, using switch it can only send signal to initiate a scheduled process, while exec() only has the program is overwritten but file descriptors /child are not affected."
    },
    {
      "question_id": "64",
      "model_score": 79.7,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue should be centered around 0 degrees for red. Intensity should be unchanged to extract all red. Saturation should be high around 0.8 to 1.0 to maintain purity of red color."
    },
    {
      "question_id": "83",
      "model_score": 70.6,
      "human_score": 1.0,
      "question": "What is the difference between basin order and channel order?",
      "instructor_answer": "Basin order is highest order of any stream in that basin whereas Channel order is order of stream\nwhich denotes that what order of streams has joined the channel.",
      "student_answer": "Basin order is classification of basins as per the drainage from streams like 1st order basin contains all drainage area of 1st order system whereas channel order is the function of the nature of surface of the drainage basin."
    },
    {
      "question_id": "41",
      "model_score": 79.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "True, there may be another process waiting to run which gives competition for running in the scheduler queue."
    },
    {
      "question_id": "39",
      "model_score": 16.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "FALSE."
    },
    {
      "question_id": "47",
      "model_score": 89.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue. Parent, child are running independently. Next, exec system call in the parent will not wait for child to finish.\nf. If exec memory is used to load another program into this process, both pids' remain same. Child will get init (pid1) as it's parent.\nFalse. Parent and child will have different PIDs."
    },
    {
      "question_id": "29",
      "model_score": 97.6,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "rainfall intensity , time"
    },
    {
      "question_id": "53",
      "model_score": 51.5,
      "human_score": 0.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "If a high resolution imaging of an urban area is being captured from space then for classifying roads: We can use the max likely road classification for initial classification of the image into specified classes, the features used here will be the sensor data available in different bands. After initial classification results could be improved by relaxation labelling and road is directional feature. Hence the result could be improved by giving high weightage to the road class, when present in the meighbourhood."
    },
    {
      "question_id": "65",
      "model_score": 62.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "/*\n1.It increases readability of the code as everything isn't concentrated at one place but in distinct regions in the \n2."
    },
    {
      "question_id": "90",
      "model_score": 52.7,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Many time using the features vectors as such, it becomes very hard to classify the data , if the decision boundaries are very complex and/or the classifier at hand classify the classes."
    },
    {
      "question_id": "47",
      "model_score": 36.6,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nYes, the exec system call can be used in the parent process before the child process terminates."
    },
    {
      "question_id": "103",
      "model_score": 44.5,
      "human_score": 2.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "expensive, smaller values of MRR"
    },
    {
      "question_id": "106",
      "model_score": 77.9,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " The child process returns from a special trap return function called\nforkret. The parent who creates the child sets the return program counter (eip)\nto this place which then returns the child process to forkret.\nFrom here, the child process returns back to user mode as if\nit we returning from a trap instruction"
    },
    {
      "question_id": "88",
      "model_score": 72.0,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "to balance fluctuating flows or concentrations and to assist self neutralization"
    },
    {
      "question_id": "89",
      "model_score": 23.5,
      "human_score": 1.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "Is useful to plot or measure the stage-dischsrge for the reservoir as a result we can estimate net flow rate of that system"
    },
    {
      "question_id": "74",
      "model_score": 51.7,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "It may take longer no train the network, Also the error backpropagation may not be most efficient and unneccesary changes in the weight take place and this may lead to very poor classification accuracy, basically because model might not have learnt anything"
    },
    {
      "question_id": "48",
      "model_score": 68.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\n **FALSE**. The parent process can perform the exec system call and terminate the child process, as in that case the 2'nd process becomes the parent to the child process."
    },
    {
      "question_id": "104",
      "model_score": 43.1,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " -> Disabling Timer interrupt / & interrupt in the computer but the user knows about the time in then it is restricted if he tries to disable the timer interrupt then it is restricted by the os as os need to know about status of the process in os (can use other interrupts) but if disabling interrupts power is given to user he may misuse it & not enable interrupts which lead to damage of os . So it will be given via limited direct execution\n\n-> Accessing the files that require kernel permission to change:\nThere are some files to run, read, update which requires permission from the kernel such files can't be directly used by the user to update (using sudo in ubuntu for running them or chmod 777)"
    },
    {
      "question_id": "65",
      "model_score": 62.2,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The definition and declaration can be written in separate files. Thus, two different people can develop these independently.\n\n2. Can use forward declaration to solve the problem of cyclic usage in classes or functions.\n\n3. Provides an abstraction of the class. That is, one \n2. Keeps the code concise, clean and organized. We can view all declarations of member functions of a class together at once and then check their definitions separately.\n\n"
    },
    {
      "question_id": "64",
      "model_score": 72.6,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petals we take product of saturation of saturation mask and hue having hue with narrow range around 0       and 360       and I have braod  r"
    },
    {
      "question_id": "63",
      "model_score": 53.9,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "The stem and leaves are green, so we take a filter which filters out only those pixels whose hue is around 120 degrees, but the filter is skewed, since we want to eliminate all cyan components but retain yellow components as the bottom stem is yellowish. Hence, the filter will be towards the yellow side more than the blue side (i.e. not exactly symmetric about h=120 degrees). Since petals are of various intensities, we allow all to pass through."
    },
    {
      "question_id": "81",
      "model_score": 81.8,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "Low eigen values translates to low importance of those particular eigen vectors/ features. High amount of correlation in features will result in low eigen values."
    },
    {
      "question_id": "63",
      "model_score": 80.7,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H : A narrow band around 120 degrees. Since 120 degrees correspond to Green in HSI, and since there is no other green body, hue should be a narrow band around 120 degrees\n\nS : Here also leaves and stems have shadow, so saturation needs to be a wide band like 0.3 to 1, i.e. centred a little above  0.5 so that leaves and stem remain close to green saturation.\n\nI : Due to shadow of leaves and stem, the green is darker in some portions and bright in some portions, "
    },
    {
      "question_id": "65",
      "model_score": 66.7,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)The implementation(definition) is separated from the abstraction(declaration).\n(The code looks more structured with the abstraction and implementation separated).\n2)This way,we can ensure that the user is given access only to the  \"abstraction\" or \"interface\" and not the internal working."
    },
    {
      "question_id": "68",
      "model_score": 65.1,
      "human_score": 1.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "when the given data is not linearly seperable and has a high dimensionality with non regular decision boundary lines, a multilayer perceptron NN can be used for classification. however for simple classification tasks, using multilayer perceptron NN with a lot of hidden layers may lead  to overfitting."
    },
    {
      "question_id": "63",
      "model_score": 61.5,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "The leaves and stem are green (shades of green) in colour. Green colour has 120       hue, maximum saturation i.e. one and low intensity( about one-third). So to segment the rose petals, a hue H can be taken in range of 90       to 150       , saturation S is in range of 0.5 to 1 , intensity I is in range of 1/3(pure green) to 0.5 (light shades of green)."
    },
    {
      "question_id": "65",
      "model_score": 60.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Class declarations(without definition) act as a compact representation of what all variables and member functions it contains. This gives the user/programmer a compact idea of the class without having to go through implementation of its member functions.\n2. In very large programs,it is a good practice to declare a class in one header file and define all its member functions in a different file.This gives the programmer a higher level idea of what all is goin"
    },
    {
      "question_id": "40",
      "model_score": 92.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTRUE\nThe pipe() system call creates an one way bridge between two file descriptors fd[0] & fd[1], it cannot operate in reverse direction. \n"
    },
    {
      "question_id": "49",
      "model_score": 67.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE\n 1) There is not entry \"ref count\" in PLB\n 2) If the executable takes command line args there is no point in using the previous PLB"
    },
    {
      "question_id": "61",
      "model_score": 95.7,
      "human_score": 2.0,
      "question": "Three key principles of ISO series are                                             .,                                                                                                                              ...and                                                                                  .      ",
      "instructor_answer": "Consensus , Industrial wide applicability and Voluntary Nature",
      "student_answer": "1) Consensus \n2) Industrial wide applicability \n3) Voluntary Nature"
    },
    {
      "question_id": "104",
      "model_score": 1.4,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": "I'm sorry, but I can't extract text from an image that doesn't contain any text."
    },
    {
      "question_id": "63",
      "model_score": 62.9,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "An appropriate range around 120       H needs to be selected such that all green areas (leaves and stem) are segmented clearly. The suitable range has to be found empirically. \nThis should work as all stems and leaves are green in color. Furthermore, intensity can't be used as it varies from dark to light for both green and red. Saturation should also not be used as both green and red will have high saturation so a saturation threshold will not be helpful in this case. However, hue is different for leaves, stem than other parts of image as no other green is visible in image.\n\nHere it was assumed that stems are also green colored. If they are brown colored then an additional narrow threshold has to  be applied to select brown color."
    },
    {
      "question_id": "80",
      "model_score": 66.8,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "materials having 9 independent elastic constant"
    },
    {
      "question_id": "86",
      "model_score": 65.5,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "for translation, rotation, etc... multiple steps involved. translate, then rotate, then scaling, 3x3 shortens the process"
    },
    {
      "question_id": "105",
      "model_score": 82.0,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. It executes the faulting instruction again not the one after faulting instruction."
    },
    {
      "question_id": "49",
      "model_score": 53.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Each program has it's own PCB,\n because the PCB object can be different\n for different process. So, single PCB\n cannot handle it."
    },
    {
      "question_id": "11",
      "model_score": 54.2,
      "human_score": 1.0,
      "question": "Define Slutzsky-Yule effect",
      "instructor_answer": "This effect states that summation or average of random series may generate osscilations when no such movements exist in the original set of data.",
      "student_answer": "Effect is caused when an artificial trend is introduced due to the repeated detrending. This\nmay be removed by using harmonic or weighted functions."
    },
    {
      "question_id": "104",
      "model_score": 33.7,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": "The process may try to access kernel code which the OS can't allow. The process may try to increase privilege levels. The process may try to access memory not available to the process."
    },
    {
      "question_id": "103",
      "model_score": 49.9,
      "human_score": 2.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "high expertise to operate the machines for the labour, need skilled technicians. High initial set up cost "
    },
    {
      "question_id": "65",
      "model_score": 21.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. We can use the Base class to create a container to store all the instances of the subclasses. This reduces a lot of naming redundancies. Say, e.g:\n\nRectangle and Circle inherit the Shape class.\n\nvector<Shape*> shapes;\nshapes.push_back(new Rectangle());\nshapes.push_back(new Circle ());\n\nIf shape class has virtual functions, we can use dynamic binding and call all the functions in Circle/Rectangle we want, without refering to the internal contents of shapes vector. We can just make a call \"shapes[0].draw();\" and be sure that it will call Rectangle::draw();\n\n2. Separating declaration from definition also enables us to use dynamic binding and runtime polymorphism.  (Example of the same has been given above)\n\nIf we did not have different declarations and definitions, we would have ended up with the same naming redundancies as mentioned above."
    },
    {
      "question_id": "52",
      "model_score": 52.1,
      "human_score": 0.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a 2nd rank tensor?...a dimensionless quantity?"
    },
    {
      "question_id": "92",
      "model_score": 63.1,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "It can be used in computer vision to extract the corners and features of an image."
    },
    {
      "question_id": "65",
      "model_score": 57.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Readability of code increase as it makes easier for others to understand the code.\n2. "
    },
    {
      "question_id": "104",
      "model_score": 22.7,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Ans) Any operation performed in kernel mode can be privileged actions as in kernel mode , you have direct access to memory.\n(i) Making a system call , to interrupt any process in between.\nYou can run a system call , due to which any process going on the CPU will get interrupted and go to ready/waiting state.\n(ii) If read/write a file , which don't have permission to get access in user mode."
    },
    {
      "question_id": "65",
      "model_score": 73.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. There maybe situations where the developer only wants the user to know how to call a function and not exactly how the function serves the purpose. For an example, we use cmath functions as we know their declarations like sqrt(double f); and we use it to calculate square roots but we don't know exactly how it computes square roots.\n\n\n2. Another advantage is that it allows developer to make multiple definitions for the same function declaration and which definition gets executed depends on the way user uses it."
    },
    {
      "question_id": "98",
      "model_score": 35.2,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "Excellent wear resistance"
    },
    {
      "question_id": "104",
      "model_score": 18.8,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. User want to access the memory that is not in access of process then OS block such attempt.\n2. Accessing the kernel will reduce speed and functionality increasing size."
    },
    {
      "question_id": "2",
      "model_score": 5.1,
      "human_score": 0.0,
      "question": "\nWhat\nis the Full form of RCP?",
      "instructor_answer": "Representative Concentration Pathway",
      "student_answer": "regional climate pollutants"
    },
    {
      "question_id": "39",
      "model_score": 90.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "False. Writes are done using fd[1] & reads using fd[0] This is the structure of piped file descriptors."
    },
    {
      "question_id": "50",
      "model_score": 63.8,
      "human_score": 0.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "reservoir routing helps to decrease the intensity of flood and also added lag time to the peak\n"
    },
    {
      "question_id": "20",
      "model_score": 60.2,
      "human_score": 1.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "Intermittent streams which carries flow during moonsoon season. Gowundwater contributes during wet season. Low table drops below river bed. Ephemeral Stream  has no base flow contribution and series of short duration spikes."
    },
    {
      "question_id": "67",
      "model_score": 96.9,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "method of moment, maximum likelihood method"
    },
    {
      "question_id": "35",
      "model_score": 72.0,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "localised irrigation, drip irrigation, sprinkler irrigation, lateral move irrigation, manual irritation, sub irrigation, centre pivot irrigation"
    },
    {
      "question_id": "46",
      "model_score": 72.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nT. **True**. Through 'syscalls', OS can schedule READY processes. Although it may happen that a process does not have syscalls in which case, the process will end by itself/ OS can't schedule to another process in this special case."
    },
    {
      "question_id": "63",
      "model_score": 76.4,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "The leaves and stem are green (shades of green) in colour. Green colour has 120       hue, maximum saturation i.e. one and low intensity( about one-third). So to segment the leaves and stem, a hue H can be taken in range of 90       to 150       , saturation S is in range of 0.5 to 1 , intensity I is in range of 1/3(pure green) to 0.5 (light shades of green)."
    },
    {
      "question_id": "52",
      "model_score": 73.5,
      "human_score": 0.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a simply the measure of how much an object is stretched or deformed."
    },
    {
      "question_id": "42",
      "model_score": 63.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "**False**, Initiation of context switch within a privileged operation and can't be done by a user process, if it could then it would be a work process."
    },
    {
      "question_id": "8",
      "model_score": 73.3,
      "human_score": 1.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1 as it does not have all the entries of any term"
    },
    {
      "question_id": "55",
      "model_score": 23.2,
      "human_score": 0.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "should be colorless oddless non toxic"
    },
    {
      "question_id": "45",
      "model_score": 74.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue - Process scheduling is decided by the OS, thus a user process cannot initiate a direct context switch by its own. It can only direct towards the next process in its own process queue.\n"
    },
    {
      "question_id": "64",
      "model_score": 43.5,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360 degrees for H and I greater than 0.1 or 0.05 of its max value"
    },
    {
      "question_id": "44",
      "model_score": 54.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFALSE\ntimer interrupt is essential for multitasking maintaining fairness\n"
    },
    {
      "question_id": "84",
      "model_score": 85.7,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "The XoR function is not linearly separable and hence a single layered perceptron classifer will poor performance on it. Graphically, we can observe that the funcion cannot be separated into unique classes using just one line, and therefore a more complex multilayered perceptron will work better."
    },
    {
      "question_id": "99",
      "model_score": 43.5,
      "human_score": 2.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "higher cost, low output"
    },
    {
      "question_id": "80",
      "model_score": 24.6,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "where material properties are same in two mutually perpendicular axes"
    },
    {
      "question_id": "65",
      "model_score": 53.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)in classes it is useful to get an idea of the class's abstraction\n2)if a functio"
    },
    {
      "question_id": "64",
      "model_score": 44.8,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A narrow range of I centered around 0.33 as R is 1 in red region and others are approximately 0.\nAlso, it'll have a narrow range of values of H on 0 degree and 360 degrees"
    },
    {
      "question_id": "65",
      "model_score": 73.0,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.) We get the complete view of all members functions declared in class at once. So that we can have an idea of what functionalities are available for our data type.\n\n2.) Code looks good plus debugging becomes easier as it will be organized into different functions separated from each other "
    },
    {
      "question_id": "106",
      "model_score": 76.4,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "When a fork() system call is made, it copies all the contents of the PCB of the parent-process to the PCB of the child process. PCB stores the information about trapframe also (address of the trapframe contents in the stack). The system call not just copies the contents of trapframe of parent-process to that in the child process, it also creates a new trapframe for the child process and copies the contents of trapframe of parent-process to that in the child process. This trapframe shows information about the trap including the return address. Thus the trap-handler utilizes the trapframe to make the child process return from a trap even though there was no trap in the child process."
    },
    {
      "question_id": "49",
      "model_score": 1.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "The image contains the handwritten text: \"1. 2. 3. 4. 5.\""
    },
    {
      "question_id": "48",
      "model_score": 89.8,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "**False**. Using exec system call terminate the parent process after executing executable provided to exec system call."
    },
    {
      "question_id": "13",
      "model_score": 51.7,
      "human_score": 1.0,
      "question": "Define firm yield.",
      "instructor_answer": "Firm yield is the maximum amount of supply guaranteed during a critical dry period",
      "student_answer": "It is the amount of water that is available as to be used in case of drought"
    },
    {
      "question_id": "66",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations."
    },
    {
      "question_id": "104",
      "model_score": 32.6,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " privileged actions that when an user process may attempt to perform OS prevents via the limited-directed execution setup\n1. I/O actions - user\n2. changing the interrupt-timer\n\n1. I/O actions: when an user process tries to do I/O initialization the OS interrupt / prevent the user process.\n2. Changing the interrupt time: changing the timer by user process may leads to deadloack starvation for some other process. So the OS prevents userprocess"
    },
    {
      "question_id": "106",
      "model_score": 7.0,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " Kstack\nnp_stack_kallar();\nnp_stack_addr = sp;\ncopy (Different_addr, sp);\nnp_sp = sp + KSTACK_SIZE + 1;\nnp_sp = (np_sp - sp) - 4;\ncopy (my"
    },
    {
      "question_id": "10",
      "model_score": 53.6,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "it is a concept in which a high priority process is preempted by OS and a low priority process is scheduled"
    },
    {
      "question_id": "49",
      "model_score": 88.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n If the executable forks and produces two processes, both of them will have their own PCBs."
    },
    {
      "question_id": "78",
      "model_score": 7.8,
      "human_score": 0.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "Radial flow and Axial flow"
    },
    {
      "question_id": "86",
      "model_score": 9.2,
      "human_score": 0.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "non linear system can be transformed into linear systems"
    },
    {
      "question_id": "35",
      "model_score": 83.3,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Flooding Irrigation, Drip Irrigation, Sprinkle irrigation, Furrow irrigation"
    },
    {
      "question_id": "82",
      "model_score": 67.2,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "The non-linear discriminnat function classifier enables to differntiate non-homogentily distribution data. While as linear classifier is unable to discriminate non linear feature space."
    },
    {
      "question_id": "72",
      "model_score": 33.0,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "if the size of compresed image is more than downlimit, image can get distorted. The complete capability of the transportation line might not be used."
    },
    {
      "question_id": "64",
      "model_score": 42.4,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "1. tight/narrow range around 0 degree for H.\n2. broad range around  0.5 in I\n3. broader range on S"
    },
    {
      "question_id": "63",
      "model_score": 22.4,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "narrow band around 120 degrees in H space"
    },
    {
      "question_id": "42",
      "model_score": 80.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nNo (False): Scheduling and context switch requires privileged mode (kernel mode). User process running in user mode cannot do this.\n"
    },
    {
      "question_id": "65",
      "model_score": 62.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "* Definition of the function can be varied according to the user's need.If it is defined in the first place , user might face some difficulties.\n* Code looks elegant and it will be easy to debug,read, change etc."
    },
    {
      "question_id": "45",
      "model_score": 33.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "**False**, it can always send a signal to schedule that process while suspending others."
    },
    {
      "question_id": "44",
      "model_score": 32.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "True A process can be scheduled from the READY state if the currently scheduled process issues a blocking syscall such as a disk read."
    },
    {
      "question_id": "21",
      "model_score": 64.6,
      "human_score": 1.0,
      "question": "Differentiate between true random number and pseudorandom number generators.",
      "instructor_answer": "TRNG uses unpredictable physical mean for computation of random\nnumber, results are truely random and unpredictable , some random numbers cannot be reproduced. PRNG uses mathematical algorithm which are computer based. Its logical which uses mathematical formulas to generate sequence of random number. Some random number can be produced.",
      "student_answer": "True random numbers are those numbers which cannot be regenerated. They are truely random. They lie between 0 and 9(generally for our purpose). The random numben which we generate in our case are not truly random in the sense that they can be regenerated by using the same algorithm that was used to generate them."
    },
    {
      "question_id": "71",
      "model_score": 63.7,
      "human_score": 1.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "Salts and sand particles"
    },
    {
      "question_id": "55",
      "model_score": 92.8,
      "human_score": 2.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "Cetyl Alcohol, Stearyl Alcohol "
    },
    {
      "question_id": "87",
      "model_score": 57.7,
      "human_score": 1.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "biological mechanism and mechanical both included but still we say it is biological mechanism becuase of the microbes terminating the organic impurities present."
    },
    {
      "question_id": "40",
      "model_score": 84.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue, fd[0] is used to read and fd[1] to write, and the opposite is not true.\n"
    },
    {
      "question_id": "69",
      "model_score": 88.5,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "After a reservoir's economic life gets over, it can still be utilised for some purposes either individually or together with some facilities. This total period can be accounted for as the usable life of a reservoir"
    },
    {
      "question_id": "87",
      "model_score": 86.2,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "1. The slow sand filtration process is initially physical and chemical but mostly a biological process. \n2. Over time, on the filter medium a microbiological layer of schmutzdecke develops, which increases the filtration efficiency, until the cut off head Loss is reached  \n3. The schmutzdecke helps in filtering out microorganisms"
    },
    {
      "question_id": "98",
      "model_score": 62.4,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "The coating material is wear resistant, inert and reduces friction."
    },
    {
      "question_id": "77",
      "model_score": 47.3,
      "human_score": 1.0,
      "question": "What are the two important scales in Hydrology? ---------------------",
      "instructor_answer": "Availability of driking water, time scale, length of the process, spatial scale.",
      "student_answer": "Availability of drinking water,"
    },
    {
      "question_id": "43",
      "model_score": 57.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFALSE\nWhen interrupted, the process is stored into process structure and rescheduled depending on shortest process to complete first protocol."
    },
    {
      "question_id": "74",
      "model_score": 61.9,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "Too many neurons in the hidden layer can cause several issues: Increase the time taken to train the network. May lead to overfitting happens when the network has too much info processing capacity but the training dataset is not enough to train all the neurons in the hidden layer."
    },
    {
      "question_id": "43",
      "model_score": 61.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse. It depends upon the OS's spec. Also, if it's Ctrl+C, the process is terminated & can't be rescheduled.\n"
    },
    {
      "question_id": "59",
      "model_score": 13.7,
      "human_score": 0.0,
      "question": "The short-term atmospheric conditions of any place that may vary from time to time is ---------------------------------",
      "instructor_answer": "called temporal variations. example- Weather",
      "student_answer": "instantaneous atmosphere"
    },
    {
      "question_id": "45",
      "model_score": 85.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue. Context switching & scheduling is exclusively done by the OS, and user-ter processes cannot perform these actions.\n"
    },
    {
      "question_id": "53",
      "model_score": 60.7,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "width of road,  Building and service area around the road and vehicle population on the road."
    },
    {
      "question_id": "64",
      "model_score": 74.3,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A narrow range of H around 0 degrees, Intensity(I) centered around 0.5 and Saturation(S) approximately 1"
    },
    {
      "question_id": "37",
      "model_score": 90.8,
      "human_score": 2.0,
      "question": "Negative electrode used in Nickel         MH Batteries are _____________.",
      "instructor_answer": "Hydrogen absorbing alloys (MH)",
      "student_answer": "A hydrogen-absoring alloy(MH)"
    },
    {
      "question_id": "26",
      "model_score": 62.9,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "Machining of splines and keyways and odd shapes"
    },
    {
      "question_id": "74",
      "model_score": 62.7,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "When the number of hidden layers are very lange then number of parameters that need to estimated also became very large and that requires a significantly high amount of data which is sometimes not available and if it is available then also the computer will need a lot of time to estimate these parameters."
    },
    {
      "question_id": "49",
      "model_score": 37.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True:\n An executable program can be used to instantiate & execute more than one process of that program simultaneously. And each process shares the virtual address space hence the same PCB (but different stacks)."
    },
    {
      "question_id": "43",
      "model_score": -1.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "None"
    },
    {
      "question_id": "65",
      "model_score": 32.6,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) it gives the scope for dynamic binding since the function can be declared in super class and it's several new definitions can be defined in its subclasses \n\n2) this helps in role playing we can have 2 seperate parent classes defined for the two different roles and then can make a child inheriting both the classes and then as required we could directly call functions from the child class by declaring pointer of the respective parent role we want \nthis is only possible when we have declared the functions in superclass and have it's definitions in child class "
    },
    {
      "question_id": "99",
      "model_score": 35.4,
      "human_score": 2.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "Higher cost and low output"
    },
    {
      "question_id": "64",
      "model_score": 42.9,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "narrow range around 0       for H and broad range around 0.4 for I"
    },
    {
      "question_id": "35",
      "model_score": 80.1,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Free Flooding Irrigation, Sprinkler Irrigation, Drip Irrigation, Furrow Irrigation "
    },
    {
      "question_id": "63",
      "model_score": 70.5,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "narrow around 120 degrees for H since green is 120deg in hsi, around 0.3-0.7 for I because not very bright, S range around 1 like 0.7-1since it is not pure green"
    },
    {
      "question_id": "82",
      "model_score": 70.8,
      "human_score": 0.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "If the complexity increases then it is difficult to classify training data their right classes with linear discriminant function. In such case non-linear discriminant function work better."
    },
    {
      "question_id": "46",
      "model_score": 28.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nNo, because we are not executing any of the process completely, we are using timer interrupt to go thus increasing CPU utilization & reducing idle making it multi-tasking."
    },
    {
      "question_id": "14",
      "model_score": 30.1,
      "human_score": 1.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "Difference of Kurtosis of the sample for a time series and Kurtosis of the same sample for a lagged time series"
    },
    {
      "question_id": "14",
      "model_score": 30.7,
      "human_score": 1.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "Difference of Kurtosis of the sample for a time interval and Kurtosis of the same sample for a lagged time interval"
    },
    {
      "question_id": "88",
      "model_score": 70.4,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "It balances fluctuating flows or concentrations and helps to assist self neutralization."
    },
    {
      "question_id": "68",
      "model_score": 75.2,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "if we have that kind of data where learning function is complex, multiple hidden layers are desirable,i.e. having more classes and difficulty in separating those classes with simpler functions."
    },
    {
      "question_id": "63",
      "model_score": 61.5,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "To segment green leaves,\nH -- Narrow range around 120 ( Green has hue of 120)\nS -- Close to 1 (Green is primary color and all primary colors are pure colors)\nI -- Broad range / Almost full range (This to handle both dark and bright regions of the leaves)\n\nTo segment stem,\nH -- Broad range/ entire range \nRange in rose petals and green leaves can be subtracted to avoid wrong segmentation i.e., inclusion of dark parts of rose and leaves\nS -- Close to 0 (Color of stem is brownish and grey like. So color in RGB will be close to grey axis)\nI -- Close to 0 (Most of the stem region is very dark)\n"
    },
    {
      "question_id": "79",
      "model_score": 86.2,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "these equations are obtained by empirical (experimental) data"
    },
    {
      "question_id": "92",
      "model_score": 26.6,
      "human_score": 0.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Man-made structure are typically polygon (square, rectangle...) in Shape having corners. So, man- made structures can be differentiated from background"
    },
    {
      "question_id": "75",
      "model_score": 49.3,
      "human_score": 1.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "weighing factor x = 1\nvalid for only channel routing \nuses continuity and momentum equation\n"
    },
    {
      "question_id": "52",
      "model_score": 95.0,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a ratio of change in dimensions to original dimensions"
    },
    {
      "question_id": "10",
      "model_score": 67.6,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "it is a concept in which a high priority process is preempted by OS and a low priority process is scheduled when both process need the same resource"
    },
    {
      "question_id": "79",
      "model_score": 75.5,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "Equations of whose parameters are determined by experiments"
    },
    {
      "question_id": "49",
      "model_score": 85.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": " False, Each process has a separate PID with different PCB entries. As each of them can have different ~status~."
    },
    {
      "question_id": "102",
      "model_score": 33.8,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "Mass of particle, velocity and Rate at which particles are sent."
    },
    {
      "question_id": "75",
      "model_score": 31.0,
      "human_score": 0.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "linear response, and time invariance"
    },
    {
      "question_id": "47",
      "model_score": 87.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTRUE. After the fork, the parent and child processes become two separate processes. So, we can do whatever we want in the parent process including an exec system call."
    },
    {
      "question_id": "106",
      "model_score": 39.0,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "-> When the child process is in kernel mode, i.e. to return to the user mode, the parent makes a wait system call for the child. It waits for a particular child as there is no trap in the child process it cannot return back to the user mode, so when the parent calls wait system call for the particular children it waits in the kernel mode only, and the CPU schedule switches to schedule the different processes."
    },
    {
      "question_id": "106",
      "model_score": 70.5,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " - while creating a child process, the instruction pointer of the child process is set to a method called \"forkest\".\n\nvoid forktest() {\n  release (t + 1000); // some other condition\n}\n\n- These sequence of instruction executes when the kernel switches to the child process context, and parent process switches to run exectution of fork1(), in the parent process during the prexecution of fork1(), one parent stack is copied to the child's kernel stack (with the volume of the parent was copied to the child's kernel stack), & the other contents of the ~kernel~ stack was copied @ the parent.\n\n- the other execution steps follows occuring to the parent.\n\n-> the return from the trap basically (with the modified return value"
    },
    {
      "question_id": "65",
      "model_score": 69.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Makes the program easier to understand\n2. Makes the code more organized and clean"
    },
    {
      "question_id": "65",
      "model_score": 59.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The code looks nicer, the definition of the class is short and readability increases.\n2."
    },
    {
      "question_id": "63",
      "model_score": 45.3,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "1. narrow range around 120 degrees for H\n2. nar"
    },
    {
      "question_id": "104",
      "model_score": 50.7,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. Disable the # interrupt, so process could keep running if it does not go to 08 to control, eg calling cli();\n2. Disabling locks:\nDon                        t let other processes wakeup by acquiring lock for itself\nHence\n3. Making changes to READ-ONLY files."
    },
    {
      "question_id": "84",
      "model_score": 70.7,
      "human_score": 1.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "It is not linearly separable, this a perception will not converge to a solution.This is because a solution does not exist for a perception. A perception learns a linear boundary (hyperplane) that separates the point. But no such plane exists here. A multilayer perception overcomes this problem and is able to lean non-linear complex boundaries."
    },
    {
      "question_id": "41",
      "model_score": 25.7,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nT\nIt want to send signal to A after interrupt using kill syscall, so, cpu can run A after interrupt handles."
    },
    {
      "question_id": "105",
      "model_score": 82.7,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False: It executes the same execution that cause\nthe page fault. If the page fault was caused by\nmov O, [offsece], then we first need to handle\nthe page fault and then comback and move 1\ninto the newly created memory"
    },
    {
      "question_id": "49",
      "model_score": 54.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. If this is the case, then if same executable is used in different directories and it is trying access different files with same names in their respective directories, then processes executed should be different so it should not happen."
    },
    {
      "question_id": "65",
      "model_score": 77.6,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)When we write declarations of all the variables and functions required seperately then while defining the functions we have a clear idea of what variables we have and what member functions we could use \n2)Code doesn't look clumsy so it would be much easier for any other user using our code or for us when we are reviewing our code"
    },
    {
      "question_id": "86",
      "model_score": 52.8,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "So that we can use it in matrix form fir transformations"
    },
    {
      "question_id": "98",
      "model_score": 51.3,
      "human_score": 1.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "Tool life increase because heat will not enter into the tool due to coating"
    },
    {
      "question_id": "49",
      "model_score": 69.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n Different branches have separate PCBs"
    },
    {
      "question_id": "65",
      "model_score": 50.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The class body becomes compact and more readable. \n2. "
    },
    {
      "question_id": "65",
      "model_score": 69.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Seperating declaration and definition provides a clear view of the abstraction (i.e.,the idea behind the program) especially when the declarations are grouped together.\n\nIt also helps when other people are adding toa"
    },
    {
      "question_id": "45",
      "model_score": 86.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "TRUE. The scheduling of processes in a higher privilege level task that only the OS can perform (with the help of a policy). Or else, malicious activity can happen where process A schedules process B, and vice versa."
    },
    {
      "question_id": "37",
      "model_score": 88.6,
      "human_score": 2.0,
      "question": "Negative electrode used in Nickel         MH Batteries are _____________.",
      "instructor_answer": "Hydrogen absorbing alloys (MH)",
      "student_answer": "Hydrogen absorbing alloy like"
    },
    {
      "question_id": "105",
      "model_score": 86.9,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "FALSE: After OS handles the page fault, the instruction that caused the page fault executes again and page fault does not occur. Then the next instruction executes."
    },
    {
      "question_id": "45",
      "model_score": 82.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "True. Scheduling is in the hands of the OS."
    },
    {
      "question_id": "63",
      "model_score": 69.1,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "create a saturation mask, with saturation above a certain threshold for S to eliminate grayish colors (better to choose a lower threshold than for the petals case as stems in the image are grayish). multiply with original image to get regions where the stem and leaves could be. now create a hue mask from this image, with a narrow band in H centered around 120 degrees (green) or the natural shade of green in leaves. multiply the mask with the original image to get the leaves and stems."
    },
    {
      "question_id": "68",
      "model_score": 60.0,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "for >1 perception layers, multilayer perception neural network is desirable when we need both generalisation and it  is more efficient as single layer would require many neurons."
    },
    {
      "question_id": "48",
      "model_score": 64.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False\nA parent can fork multiple child processes without issues. Child will execute its intended `exec` process without issues. But if the parent process exits without waiting for child, child is repainted under init process instead."
    },
    {
      "question_id": "38",
      "model_score": 61.4,
      "human_score": 2.0,
      "question": "Open dumping of waste is a major practice in India. Two major environmental problems associated with are                                                                                                                                                                  ",
      "instructor_answer": "1.Leachate generation and mismanagement\n2.Release of GHGs due to anaerobic reactions\n3.Odour\n4.Insects and rodents infestation leading to public health issues",
      "student_answer": "Odour and leachate problem"
    },
    {
      "question_id": "90",
      "model_score": 62.2,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "When in training data have non-linearity then we use non-linear transformation by using SVM classification."
    },
    {
      "question_id": "53",
      "model_score": 69.8,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Roads are easily distinguished using their colour so brown colour 's presence/absence can he a feature. Highly congested roads generally have a higher temperature of friction of wheels Thus their thermal signatures (IR seadings) is a useful featue. Roads are commonly characterized by sharp boundaries. this means at the edge magnitude will be lage at the road boundaries, this too can be a useful feature."
    },
    {
      "question_id": "97",
      "model_score": 36.3,
      "human_score": 1.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "tool geometry , roughness of the workpiece and "
    },
    {
      "question_id": "104",
      "model_score": 39.7,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Q A user process may use base bound registers.\ni) A user process might disable the timer interrupt by self changing the values of the registers that are responsible for timer interrupt thus executing for as long as it wants.\nii) A user process might try to access memory allocated to other processes given the physical address space of the device.\niii) Given access to base bound registers a user process may increase in system space size of itself."
    },
    {
      "question_id": "39",
      "model_score": 42.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nTrue. We use fd[0] to write to fd[1] and fd[1] is used to read from fd[0].\n"
    },
    {
      "question_id": "106",
      "model_score": 53.7,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " If there is no trap in the child process, then\nit will return similar to the parent process.\nwhen we fork() a process the child process\ncannot copies identical data of the parent process\nit also includes the parent trap frame.\nand all those. So it will use same trap\nframes to return from a trap."
    },
    {
      "question_id": "63",
      "model_score": 45.5,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H- around 180, S-1, and I- around0.5"
    },
    {
      "question_id": "41",
      "model_score": 44.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue. It is possible for context switch to happen.\n"
    },
    {
      "question_id": "65",
      "model_score": 41.4,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. we can declare a function earlier and define it later and hence can call it in"
    },
    {
      "question_id": "4",
      "model_score": 58.3,
      "human_score": 0.0,
      "question": "A rating curve is only valid when?",
      "instructor_answer": "A rating curve is only valid when there is no over flow or flood in a region.",
      "student_answer": "A rating cure is valid only for virgin/ natural flows. In case of there is a reservoir release downstream, it is not valid."
    },
    {
      "question_id": "32",
      "model_score": 89.5,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "when the natural slope of the country is steeper than the longitudinal slope provided in the irrigation channel."
    },
    {
      "question_id": "39",
      "model_score": 23.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nTRUE. pipe() creates a pipe, which is a kernel object with 2 ends."
    },
    {
      "question_id": "84",
      "model_score": 87.1,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "XOR function is not linearly separable and it requires 2 lines to classify the points. this we will require a more complex multilayer perceptron classifier rather than a perceptron classifier."
    },
    {
      "question_id": "45",
      "model_score": 78.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "**TRUE**. The scheduling of an OS capability, not a user program"
    },
    {
      "question_id": "82",
      "model_score": 32.6,
      "human_score": 0.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "The are capable to learn non-linear models and also learn models in real time. This allows for probabilities based predicitive of items into multiple labels."
    },
    {
      "question_id": "105",
      "model_score": 21.5,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True, lazy allocation policy will allocate Next Empty Pagetable and moves to next instruction."
    },
    {
      "question_id": "65",
      "model_score": 59.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Makes the program easier to understand and more organized\n2. "
    },
    {
      "question_id": "104",
      "model_score": 28.3,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. An user process might want to keep running till its completed & hence might want to change the value of instruction pointer which is an privileged action.\n"
    },
    {
      "question_id": "63",
      "model_score": 79.7,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "for green leaves and stem we have Hue having a narrow range around 120(105 to 135)\nfor saturation\nthis should be broad range around 0.85\n(0.7-1)\nfor intensity a broad range around 0.33 works as pure color have low intensity 1/3"
    },
    {
      "question_id": "45",
      "model_score": 81.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue. Because to start new process, it has to do a system call; which will give control in hand of os, so os will do the switch.\n"
    },
    {
      "question_id": "52",
      "model_score": 56.0,
      "human_score": 0.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a deformation defining variablle"
    },
    {
      "question_id": "65",
      "model_score": 73.7,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Program looks structured and is comprehensive. It becomes easier for the reader to get a quick idea about the working of the class by just looking at the names of member functions once. Defining a member function at the place of its declaration gives an untidy look to the program.\n\n2) Editing/adding/deleting a member function becomes easier. When the member functions are declared at the same place (without definition), the editing of a program becomes easy. This also becomes useful to fix an error (in case any) that arises at the time of compilation."
    },
    {
      "question_id": "49",
      "model_score": 92.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False - Every process has its own PCB and does not share it. The processes, though of the same executable, must run independent of each other with individual virtual spaces."
    },
    {
      "question_id": "43",
      "model_score": 81.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "**FALSE**\n- If scheduler considers some other process to for exec execution after interrupt handle, above the old process is context-switched out."
    },
    {
      "question_id": "87",
      "model_score": 61.0,
      "human_score": 0.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "Principal mechanism is same as bio - sand filtration"
    },
    {
      "question_id": "43",
      "model_score": 24.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\n **FALSE**. There is not any concern related to data loss as the data of the process is for copied onto the kernel heap on the process before execution of the interrupt.\n"
    },
    {
      "question_id": "102",
      "model_score": 63.3,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "amplitude,tool cross section area , number density, frequency"
    },
    {
      "question_id": "58",
      "model_score": 20.2,
      "human_score": 0.0,
      "question": "The philosophies to define environmental management are                                                                                                            ",
      "instructor_answer": "Conservationism, Preservationism, Deep Ecology, Social Ecology",
      "student_answer": "It is a system that allows to properly manage and allot the resources as well as the process to curb the pollution and the damage that has been already done to the environment."
    },
    {
      "question_id": "49",
      "model_score": 91.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE: Each process (regardless of whether some of them might be executing the same program) is allotted a different PCB."
    },
    {
      "question_id": "66",
      "model_score": 36.5,
      "human_score": 1.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "relatively easy to use and are relatively easy to use"
    },
    {
      "question_id": "45",
      "model_score": 8.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "True."
    },
    {
      "question_id": "64",
      "model_score": 66.1,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue in narrow range around 0 degree for red colour and saturation in broad range around 1 and some petals also have shadows"
    },
    {
      "question_id": "39",
      "model_score": 37.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nYes, read on fd[1] and write on fd[0] cannot happen as pipe conveys one way.\n"
    },
    {
      "question_id": "53",
      "model_score": 43.0,
      "human_score": 0.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "To categories roads we will require spatial feature to check interclass compatibility with neighbouring pixel to segregate them."
    },
    {
      "question_id": "14",
      "model_score": 38.0,
      "human_score": 0.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "it is the ratio of fourth moment of the data about mean to the standard deviation with a fourth order power."
    },
    {
      "question_id": "69",
      "model_score": 42.8,
      "human_score": 0.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "time till reservoir complete need which for it was designed."
    },
    {
      "question_id": "4",
      "model_score": 31.5,
      "human_score": 1.0,
      "question": "A rating curve is only valid when?",
      "instructor_answer": "A rating curve is only valid when there is no over flow or flood in a region.",
      "student_answer": "Rating curve is valid when discharge measurement are not  available over range\nof observed stages. To calculate variable which is difficult to measure continuously."
    },
    {
      "question_id": "9",
      "model_score": 84.0,
      "human_score": 1.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "Growth rate assumptions , discount rate"
    },
    {
      "question_id": "48",
      "model_score": 88.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False, once the fork is done, child process and parent process work independently. The code after the exec in the parent has already been copied by the child and it doesn't care about parent any more."
    },
    {
      "question_id": "64",
      "model_score": 67.2,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petals , a narrow range of H around 0 to 60 degree for H and take product of H and S to segment it."
    },
    {
      "question_id": "33",
      "model_score": 87.9,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "through fall and stem flow"
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "constant capital structure"
    },
    {
      "question_id": "23",
      "model_score": 67.8,
      "human_score": 2.0,
      "question": "Following forces are considered in Navier Stokes equation:",
      "instructor_answer": "pressure, gravitational force, viscous force",
      "student_answer": "viscous,gravity,frictional"
    },
    {
      "question_id": "51",
      "model_score": 73.9,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1.Imperfection sites in colloids:\ninstead of silicon sometimes there are lesser metal valency atoms which causes a net negative charge.\n2. Colloids binding to negative radicals in water:\nThe colloids bind to hydroxide(OH^(-1)) ion and bicarbonate ions((HCO3)^(-1)) which gives a net negative charge on the colloids."
    },
    {
      "question_id": "54",
      "model_score": 67.8,
      "human_score": 2.0,
      "question": "The appetitive      faculty corresonds to      ",
      "instructor_answer": "Plato's theory of the soul, the appetitive faculty is one of the 3 divisions of the soul. It is the part dealing with desires and passions",
      "student_answer": "desires/passion and the pleasure of senses like wealth, food, drink and other bodily pleasures"
    },
    {
      "question_id": "85",
      "model_score": 83.0,
      "human_score": 2.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "There's no distinction between vertical and horizontal creep"
    },
    {
      "question_id": "67",
      "model_score": 97.8,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "moment method, method of maximum likelihood"
    },
    {
      "question_id": "18",
      "model_score": 65.3,
      "human_score": 0.0,
      "question": "Define trap efficiency of a reservoir and write down the factors affecting the trap efficiency",
      "instructor_answer": "It is defined an the ratio of deposited sediment to the total sediment inflow for given period within the reservoir economic life time.Factors affecting the trap efficiency: Diameter of silt particles, size and weight and type of debrais. Wind flow direction. Shape of the dam.Topography of the dam structure. Material of the dam.",
      "student_answer": "Trap efficiency the amount of silt that is trapped upstream of the reservoir. It depends in the settling velocity and retention time"
    },
    {
      "question_id": "28",
      "model_score": 77.1,
      "human_score": 1.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "Regularised set operation makes it possible for keeping the boundaries and surfaces in the part after any set operation is performed. In normal set operation, a difference operation can result in part with an open end. "
    },
    {
      "question_id": "43",
      "model_score": 80.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False OS can schedule a new process instead of scheduling the previous process."
    },
    {
      "question_id": "64",
      "model_score": 66.1,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue in narrow range around 0 degree for red colour and saturation in broad range around 1 and some petals also have shadows"
    },
    {
      "question_id": "69",
      "model_score": 62.0,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "it can continue to serve some of the purposes even after expiry of its economic life."
    },
    {
      "question_id": "40",
      "model_score": 27.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "**True**.  By default fd[0] is not possible."
    },
    {
      "question_id": "64",
      "model_score": 50.9,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H should be around 0-10\nS should be greater than 0.6\nI should be greater than 0.6"
    },
    {
      "question_id": "65",
      "model_score": 49.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) when in a class while defining a large number of member functions , seperating the declaration so that we can declare it after the class is completed helps in getting the overall idea of how many member functions are present ,which are virtual ,which are pure virtual functions ..etc. all the variables, constructors, member functions , will be  lined up one below the other which gives good picture of total functions of the class.\n\n2) "
    },
    {
      "question_id": "79",
      "model_score": 35.0,
      "human_score": 1.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "Empirical equations are theoretically derived equations"
    },
    {
      "question_id": "40",
      "model_score": 35.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nFalse, we can use fd[0] to write & fd[1] to read but we have to change already implemented softwares. Those just have to enqueue fd[s] for read & write."
    },
    {
      "question_id": "82",
      "model_score": 58.6,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Simple linear discriminant function cannot classify all the data in certain situation there all require non linear discriminant function."
    },
    {
      "question_id": "79",
      "model_score": 78.3,
      "human_score": 2.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "empirical equation are those equations which are not derived equations, they are made on the observations and experimental data"
    },
    {
      "question_id": "86",
      "model_score": 61.1,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "It can be used to represent non-affine transformation like Translation which is not possible if 2D coordinate representation is used."
    },
    {
      "question_id": "45",
      "model_score": 85.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTrue, although user process can call \"exec\" syscall but the scheduler decides to context switch (or not), not user.\n"
    },
    {
      "question_id": "16",
      "model_score": 31.1,
      "human_score": 0.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "If the dafa in time series is repeated so that then it is called noise in time series."
    },
    {
      "question_id": "39",
      "model_score": 95.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "False, to write use fd[1] and to read use fd[0], no vice-versa"
    },
    {
      "question_id": "65",
      "model_score": 68.9,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "First advantage of separating declaration from definition is that it helps in better readability of the code i.e when the declaration of a function occurs separately we can see each function with proper indentation because the code is less clumsy.\nSecond advantage of separating declaration from definition is that since we write the name of the class in which we are declaring the function, this is easier and more organised. We do not need to worry about  other functions as only the output, depending on the parameters, is important. As an effect of this even function overloading becomes much simpler."
    },
    {
      "question_id": "104",
      "model_score": 11.8,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": "If an user process try to call the system call then OS prevents it. Because User system call require high level privileged actions which is done by Kernel but not with user process."
    },
    {
      "question_id": "31",
      "model_score": 40.6,
      "human_score": 2.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "It will catagories into 2 class only and if we use one vs rest method than it will become slow and it will take time."
    },
    {
      "question_id": "52",
      "model_score": 90.7,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a the ratio of change of a particular dimension to the original length of that dimension."
    },
    {
      "question_id": "49",
      "model_score": 88.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Multiple instances of a program are still considered as different processes, hence they would have different PCBs."
    },
    {
      "question_id": "33",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)"
    },
    {
      "question_id": "8",
      "model_score": 89.3,
      "human_score": 2.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1 is not likely to be leader in any of the term as it has least entry in every term out of three"
    },
    {
      "question_id": "46",
      "model_score": 52.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\n **FALSE**. Even without the timer interrupt, there is very less chance that a single process hogs the CPU continuously running. Can't be switched until multi-tasking as the processes currently running can't be preempted unless a parent process with a new child process, the exec system call\n"
    },
    {
      "question_id": "95",
      "model_score": 72.8,
      "human_score": 1.0,
      "question": "Why the steeper main streams results in the Hydrographs with smaller time base?",
      "instructor_answer": "Steeper basin streams allows the run off  to leave the basin quickly because of high slope.Time base means the amount of time for run off to leave the catchment after the storm. So, if there is steeper slope,  excess run off will get out  quickly. Hence time base reduces.",
      "student_answer": "steeper main streams have higher slopes/gradients and the flow velocity is more. Also gravity plays as important role, resulting in hydrographs with smaller time base."
    },
    {
      "question_id": "46",
      "model_score": 27.8,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTRUE: Timer only provides a method for OS to regain control if a process is malfunctioning.\n"
    },
    {
      "question_id": "82",
      "model_score": 72.8,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "The non linear discriminant tunction classifier is used when the dataset is complex in nature there is no proper relation exists in that case we use non linear discriminant function over linear discriminant function. Linear discriminant function mainly useful for normally distibuted data for other data we prefer non Linear discriminant function."
    },
    {
      "question_id": "73",
      "model_score": 26.8,
      "human_score": 0.0,
      "question": "What are the important details that have to be known prior for reservoir routing?",
      "instructor_answer": "storage volm vs elevation of reservoir\ninflow hydrograph \nwater surface elevation vs outflow\ninitial values of S,I and Q at t=0",
      "student_answer": "In Reservoir routing the storage is a f"
    },
    {
      "question_id": "104",
      "model_score": 21.5,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) Creating a new process\nCreating a new process using fork() is a privileged action. Creating a new process involves, among many other things, allocating space for a new PCB and populating it. The new process does not know about POS and thus cannot handle its creation on its own and has to request the OS to do so. Furthermore, the OS can prevent the process creation if, say, there is insufficient memory to create a new process.\n\n2) Allocating memory on the heap\nAllocating memory on heap (say, by malloc or calloc()) is also a privileged action. It requires finding free physical memory, mapping that memory to physical memory and updating the page table accordingly. The status of the physical memory and the directory of the process is not known by the user process and thus it cannot handle allocating a new page for heap from physical memory. It stays on missing and there needs to request the OS to do so. Furthermore, the OS can prevent the heap expansion if, say, there is insufficient physical memory for the same."
    },
    {
      "question_id": "86",
      "model_score": 41.2,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "In order to be able to write it as product of matrices"
    },
    {
      "question_id": "41",
      "model_score": 59.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTRUE. When interrupted, control goes to CPU which can reschedule to any process on next time."
    },
    {
      "question_id": "15",
      "model_score": 24.1,
      "human_score": 0.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "drought caused by the change"
    },
    {
      "question_id": "82",
      "model_score": 77.7,
      "human_score": 2.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Advantage of non- linear discriminant function Classifier over a liner one is non-linear\ndiscriminant function let us to classify the  dataset that isn't linearly separable."
    },
    {
      "question_id": "105",
      "model_score": 76.3,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False\nO.S executes the same inst again that produced page fault error."
    },
    {
      "question_id": "39",
      "model_score": 4.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nTRUE. "
    },
    {
      "question_id": "106",
      "model_score": 74.8,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " Child process returns from forkret function.\nIt returns from the same path as parent process, when stack is copied from parent to child content and trapframe are also copied hence child process also returns through trap as parent."
    },
    {
      "question_id": "85",
      "model_score": 91.5,
      "human_score": 2.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "It makes no distinction between horizontal and vertical creep"
    },
    {
      "question_id": "56",
      "model_score": 72.9,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "consistency, efficiency,suffici"
    },
    {
      "question_id": "31",
      "model_score": 75.2,
      "human_score": 2.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "Single discriminant function is used for multiclass classification only it will give correct result for one class only i.e if input feature vector is of a particular class it will give output correct and for all other input feature vector belonging to different class output will be wrong."
    },
    {
      "question_id": "80",
      "model_score": 24.4,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "Material Properties are same in Perpendicular axis"
    },
    {
      "question_id": "39",
      "model_score": 17.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nso, first statement is True."
    },
    {
      "question_id": "75",
      "model_score": 42.5,
      "human_score": 1.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "linear relation between inflow and outflow, prism storage, wedge storage, cross sectional area is proptional to discharge"
    },
    {
      "question_id": "65",
      "model_score": 66.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)  It makes the code more neat and readable.\n2)  "
    },
    {
      "question_id": "90",
      "model_score": 63.1,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "A nonlinear transformation changes linear relationships between variables and thus changes the correlation between the variable. Every feature to class correlation might not be linear in nature & hence this is used."
    },
    {
      "question_id": "63",
      "model_score": 79.8,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "for green leaves and stem we have Hue having a narrow range around 120(105 to 135)\nfor saturation\nthis should be broad range around 0.8\n(0.6-1)\nfor intensity a broad range around 0.5 works"
    },
    {
      "question_id": "49",
      "model_score": 18.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True\n This can be done through exec() command where it runs multiple program through single binary file"
    },
    {
      "question_id": "26",
      "model_score": 8.7,
      "human_score": 0.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "layers of surfaces get piled upon inner walling of mater"
    },
    {
      "question_id": "51",
      "model_score": 75.5,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "Imperfection in Crystal structure, Ionization of surface sites"
    },
    {
      "question_id": "65",
      "model_score": 42.6,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. We can define functions only when needed and otherwise we can just declare\n2. By defining a function we can access the objects of the class through them"
    },
    {
      "question_id": "65",
      "model_score": 65.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.) When declaration is separated from definition, then names of all the member functions inside a particular class can be found at the same place and it would make the body of the class look less cumbersome.\n2.) When the functions are declared first and then defined later, then during defining a particular member function, we can use the other member functions of the class too inside this function's definition as they were already declared earlier and hence there will be no error. \n3.) Instead of writing a single long function, we can divide the function into two parts and then, use one of the function in the other function. For example, we can write a function to eject a drink from the vending machine, eject_drink(int drinkid) and also another function insert_coin(int value) which will take in the coin and find the drinkid corresponding to the inserted coin. We can declare both these functions in the vending machine in the start and then we can use eject_drink function inside insert_coin function to eject the drink after knowing the drinkid instead of a single long function which finds the drinkid and also ejects it.\n4.) The advantage from the example explained in the 3rd point can be seen during debugging as there will be separate functions for finding drinkid and ejecting drink i.e., each function will have a single objective instead of having multiple objectives."
    },
    {
      "question_id": "86",
      "model_score": 60.1,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "It makes calculations easier to put in computer as matrix."
    },
    {
      "question_id": "49",
      "model_score": 41.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False: Each process has its own PCB if and only if more than one process is executed simultaneously"
    },
    {
      "question_id": "65",
      "model_score": 67.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The class only gives a high level idea of what the functions would be doing and so it serves as an abstraction for the object.\n2. We can package the definitions and share them as black box if we do not wish to reveal the implementation. This also separates the abstraction from the implementation, and the various implementations stay separated as well."
    },
    {
      "question_id": "105",
      "model_score": 20.5,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "TRUE, malloc uses lazy allocation. It allocates a physical page on access to v.a"
    },
    {
      "question_id": "75",
      "model_score": 39.9,
      "human_score": 1.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "1. Wedge storage, prism storage, cross section area is proportional to discharge of section\n2. Linear relationship between inflow and outflow"
    },
    {
      "question_id": "44",
      "model_score": 67.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse, CPU time sharing is possible without timer interrupt also. But it is not efficient and best.\n"
    },
    {
      "question_id": "105",
      "model_score": 36.5,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True\nOnce the instruction which riels the page fault is dealt with the page fault, it executes the next instruction. The next instruction executes only when the fault is handled."
    },
    {
      "question_id": "102",
      "model_score": 93.0,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "frequency of the tool, number density of abrasive particles in the slurry, diameter of the abrasive particles"
    },
    {
      "question_id": "106",
      "model_score": 0.9,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "4"
    },
    {
      "question_id": "92",
      "model_score": 67.0,
      "human_score": 2.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Some applications of corner features are CV application to convert sat images to maps. Self driving cars (road/building detection etc). 3P video tracking. Image stitching. Image alignment"
    },
    {
      "question_id": "48",
      "model_score": 91.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. After a fork(), the parent & child processes are independent & separate processes, So, it is upto user whether to call exec() or not."
    },
    {
      "question_id": "106",
      "model_score": 47.2,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When forking a process the os creates a identical copy of the rom process. (Except the pid is different as a new process was created)\nSo when or wants to give the process created from kernel to user so it should switch to user mode.\nBut they to ensure that the forlt() process created work{\nTo check whether there is any other process with same pid as forlc process if there, then at the forl( ) cannot be used.\nTo ensure this it is passed to trap/interrupt handler."
    },
    {
      "question_id": "106",
      "model_score": 45.1,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When we call fork() which calls allocproc()\n\nIn that first after allocating a physical page on kerenel stack\nwe set the trapframe of newtask push the action added using\nSet_parent() to the forket\nwhen the child process is scheduled? while popping off the \nkernal stack we get to the takenkern address\n\nnp-1x8tack -> kalloc();\nsp = np-1x8tack + PAGESIZE;\nsp = s - sizeof(char *p);\nnp->sp = sp;\nsp = sp-4;\nnp->signo = 0;\nsp = sp - sizeof(context);\nnp->u_context = sp;"
    },
    {
      "question_id": "99",
      "model_score": 62.8,
      "human_score": 0.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "coating may not be sufficiently thick to protect against wear. Coating may not bind well with the surface."
    },
    {
      "question_id": "39",
      "model_score": 42.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nTrue, in general we use fd[0] for read & fd[1] for write we can use vice versa but you have to write your own code accordingly.\n"
    },
    {
      "question_id": "104",
      "model_score": 26.6,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Two privileged action that an user process may attempt to perform and which are prevented by the OS via limited-directed execution setup:\n(iii) VA to PA translation: user process does not know have map virtual address to physical address.\n(iv) Concept of lock: user process does not know the process behind the acquiring lock for critical section part of the code, for which atomicity is required (only one process is allowed at a time)."
    },
    {
      "question_id": "74",
      "model_score": 61.6,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "If there is a large number of hidden layers on a NN than the Network not only learns essential of the input output  relationship properly in such case the network fails to correctly classify the test supplies that the network did not see during the training phase. This is the case of generalization failure"
    },
    {
      "question_id": "64",
      "model_score": 23.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0 degrees of H"
    },
    {
      "question_id": "49",
      "model_score": 45.8,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. The processors are independent. For each of the procs OS loads the executable file to memory and starts executing it."
    },
    {
      "question_id": "21",
      "model_score": 76.3,
      "human_score": 2.0,
      "question": "Differentiate between true random number and pseudorandom number generators.",
      "instructor_answer": "TRNG uses unpredictable physical mean for computation of random\nnumber, results are truely random and unpredictable , some random numbers cannot be reproduced. PRNG uses mathematical algorithm which are computer based. Its logical which uses mathematical formulas to generate sequence of random number. Some random number can be produced.",
      "student_answer": "Difference between the true random number and pseudo random number generator is that (TRNG) uses an unpredictable physical means to generate numbers (like atmospheric noise) and (PRNGT) use mathematical Algorithm (completely computer generated). Pseudo random numbers are sets of algorithm. TRaI behave differently since the result are timely, random and unpredictable. It is a not cost effective. Another efficiency of pseudo is that one can reproduce the same sequence of number in another tme by simply knowing the starting point of sequence."
    },
    {
      "question_id": "46",
      "model_score": 78.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "**True** (Cooperative sys call) It has chance, whenever some other syscall is processed, i.e. if a program runs in infinite loop CPU can't be shared with other process."
    },
    {
      "question_id": "92",
      "model_score": 45.7,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Interest point like corners to detect boundaries in two directions. Agricultural field Image and Military targets image."
    },
    {
      "question_id": "65",
      "model_score": 53.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "We are able to create abstract classes without any definition of member function in parent class and overriding in base class which is a great use of this.\n\nThe code appears neatly in a structured manner in which we get to know all the member  functions which are accessible to whom and what member  functions are actually present in that class.\nAnother use is that if we have a private variable v(say) and we have to implement a member function using same parameter then we can do by defining outside the class which don't give any confusion to code reader otherwise it becomes confusing if both are used at same place.\nAlso at the starting of a code we will have an base idea of the member functions but not their exact implementations so we can define the functions first."
    },
    {
      "question_id": "49",
      "model_score": 81.7,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False PCB if non executable is to initiate more than one process then contents of PCBs are copied so that 2-processes can run independently."
    },
    {
      "question_id": "39",
      "model_score": 91.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "FALSE - Through the standard pipe system call, we can read using fd[0] and write using fd[1] and not vice-versa."
    },
    {
      "question_id": "82",
      "model_score": 75.8,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "A linear discriminant funtion classifier assumes feature covariance matrices of both classes are the Same, resulting in a linear decision boundary. A non linear function is less strict and allows different feature covariance matrices for different classes which allows for non -linear separation of data"
    },
    {
      "question_id": "105",
      "model_score": 32.8,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True,\nIf there is any unmapped physical page, os allocates the VA -> PA mapping and update the pagetable and then execute the next instruction so that same pagefault will not occur. else chance of occuring same pagefault in next instruction."
    },
    {
      "question_id": "22",
      "model_score": 31.3,
      "human_score": 1.0,
      "question": "During coagulation process alkalinity reduces due to the ___________________________",
      "instructor_answer": "As coagulation is done,the OH- tend to form more bonds with the molecules in the sample, and H+ concentration increases which lowers the pH level.",
      "student_answer": "due to the molecules are far away each other and have kinetic energy . so it is difficult to neutralise H+ ions from sol.  therefore alkalinity reduces."
    },
    {
      "question_id": "104",
      "model_score": 17.3,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " A process may try to :\n1) ~grab~ change the default action\n~uncatchable~ signal (like ~stack~ which is over\ncause on error it won't be allowed )\n2) A process may try to change its own state\nwithout using any system calls (eg: make state KILLED but\nits data isn't cleaned up)\n3) A process may try to reschedule itself\non the CPU or deschedule another\nprocess by guessing its PID\n4) A process may try to modify the data present at\nsome memory location that it isn't supposed\nto have access to"
    },
    {
      "question_id": "9",
      "model_score": 92.4,
      "human_score": 2.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "WACC and perpetuity growth rate"
    },
    {
      "question_id": "63",
      "model_score": 82.7,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H : A narrow band around 120 degrees. Since 120 degrees correspond to Green in HSI, and since there is no other green body, hue should be a narrow band around 120 degrees\n\nS : Here also leaves and stems have shadow, so saturation needs to be a wide band like 0.5 to 1, i.e. broad range centred at 0.75 so that leaves and stem remain close to green saturation.\n\nI : Due to shadow of leaves and stem, the green is darker in some portions and bright in some portions, hence I should be wide band centred at 0.5."
    },
    {
      "question_id": "102",
      "model_score": 48.3,
      "human_score": 0.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "1. Slurry properties, like viscosity\n2. Input energy\n3.  "
    },
    {
      "question_id": "65",
      "model_score": 79.1,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Readability of code increase as it makes easier for others to understand the code.\n2. Also by doing this , there is no need to write the definitions in the first go. We can declare all the functions initially and can compile that program. After that we can write definitions of the functions."
    },
    {
      "question_id": "7",
      "model_score": 37.2,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "Removing top few centimeters of sand filter"
    },
    {
      "question_id": "74",
      "model_score": 61.0,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "overfitting may arise when number of hidden layers are very large which means new Sample may not be classified Correctly."
    },
    {
      "question_id": "61",
      "model_score": 22.8,
      "human_score": 0.0,
      "question": "Three key principles of ISO series are                                             .,                                                                                                                              ...and                                                                                  .      ",
      "instructor_answer": "Consensus , Industrial wide applicability and Voluntary Nature",
      "student_answer": "standard, labelling and assessment"
    },
    {
      "question_id": "65",
      "model_score": 70.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The class body becomes compact and more readable. \n2. The class body and the function implementations can be stored in different  files  as the programs get larger and larger. "
    },
    {
      "question_id": "49",
      "model_score": 54.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n Each process has its own PCB because it needs to be uniquely identifiable (i.e., different PIDs)."
    },
    {
      "question_id": "97",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "depth of cut, hardness of workpiece, width of cut"
    },
    {
      "question_id": "45",
      "model_score": 8.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTRUE"
    },
    {
      "question_id": "19",
      "model_score": 53.5,
      "human_score": 1.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "Based upon the current parameters, it decides which function/action/state to call or go into. It sets the parameters accordingly. Keeping the system in working state."
    },
    {
      "question_id": "55",
      "model_score": 94.0,
      "human_score": 2.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "cetyl alcohol and stearyl alcohol"
    },
    {
      "question_id": "16",
      "model_score": 69.7,
      "human_score": 2.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "Noise in a time series data is defined as those data which varies greater than that the average variation of the data set. This means either the particular data in data set is recorded wrong or it has occurred due to some other nuisance."
    },
    {
      "question_id": "98",
      "model_score": 29.1,
      "human_score": 0.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "Hardness of material might result in tool breaking Titanium coat would help prevent that"
    },
    {
      "question_id": "65",
      "model_score": 69.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) If the declaration are seperated, the reader will know all the variables used at once without getting involved in cumbersome task of reading their defination.\n\n2) "
    },
    {
      "question_id": "106",
      "model_score": 64.5,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " The fork system call copies the state of a process to a new process with different pid and parent pid (a diff return value of fork()).\nThere was no trap for child process, however all the state metadata about trap of parent process is copied onto the child process's state as well.\nThis is how the child process returns from trap (although with a different pid)."
    },
    {
      "question_id": "31",
      "model_score": 71.5,
      "human_score": 2.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "If single discriminant function is to be used- Method 1: Make it 1 vs 1  problem and run it to seperate classes Method 2: Make it 1 vs all problem and run it to seperate classes\n"
    },
    {
      "question_id": "64",
      "model_score": 10.7,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "I range from 0.296-0.33\nH range from 0-50\n"
    },
    {
      "question_id": "105",
      "model_score": 84.2,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False: After handling page fault, it starts with the execution of instruction which caused the page fault."
    },
    {
      "question_id": "104",
      "model_score": 40.4,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. Accessing large V.t. (kernel address). Since the user can ask for any address, the OS needs to limit the access to its size else it SEG FAULTS, as it is not its code.\n2. It should not tamper IDTR. (Either hardware interrupt.\n3. Since the user process can send signals to the device, it cannot call SIGKILL when the process in other CPU is in kernel mode, thus signals should be prevented by the OS."
    },
    {
      "question_id": "104",
      "model_score": 36.0,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " - Schedule itself for infinite time and doesn't allow others to run.\nEx: Simple while loop.\nwhile(1)\n{ }\nwith LDE, it will run for some time and CPU is given to other processes.\n- It may try to read/write data directly from the disk, by LDE os comes into play and cause an exception.\n- Change it's privilege level, this causes an exception, in this case LDE OS comes into play.\nEx1: open (\"/proc\")\n-> the process may try to read a file that it may not have permission to read"
    },
    {
      "question_id": "48",
      "model_score": 87.7,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. The exec call may be used, the parent will be rewritten and the child orphaned, if the parent exits."
    },
    {
      "question_id": "35",
      "model_score": 87.8,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "furrow, sprinkler, drip, flooding"
    },
    {
      "question_id": "65",
      "model_score": 26.8,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. When we see only the decla"
    },
    {
      "question_id": "85",
      "model_score": 30.2,
      "human_score": 0.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "The Bligh's creep theory is not able to take into account the variation in headlosses that may happen and therefore not able to explain the total weir floor length."
    },
    {
      "question_id": "64",
      "model_score": 77.3,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue a narrow range around 0 eg)-15 to 15\nFor I a Broad range around 0.5.\nFor saturation, the rose petals are natural images with high content of red so it should be a broad range around 0.8\ni.e. 0.6-1.0"
    },
    {
      "question_id": "30",
      "model_score": 20.3,
      "human_score": 0.0,
      "question": "If there is one explanatory variable, regression analysis is termed as (                                                               )       else it is termed as (                                                                             )",
      "instructor_answer": "Univariate and Multivariate",
      "student_answer": "Linear regression, Multiple regression analysis"
    },
    {
      "question_id": "48",
      "model_score": 40.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. The exec system call may be used in a child to terminate it may use the exec system call"
    },
    {
      "question_id": "35",
      "model_score": 29.2,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Direct Irrigation system\nStorage Irrigation system\nCombined System"
    },
    {
      "question_id": "64",
      "model_score": 48.1,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "\"a narrow range around 0      degrees for H\", \n\"a range around 0.75 to 1 for I\",\n\"a range from [0, 0.15] and [0.85,1] for S\""
    },
    {
      "question_id": "29",
      "model_score": 95.9,
      "human_score": 2.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "intensity of rainfall, time/duration"
    },
    {
      "question_id": "98",
      "model_score": 63.0,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "decreases the friction also increase chemical and thermal stability"
    },
    {
      "question_id": "65",
      "model_score": 62.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. we can declare a function earlier and define it later and hence can call it in a line above where we define it.\n2. we can declare functions altogether and then decide how to define them later on and thus prevent error of calling function incorrectly."
    },
    {
      "question_id": "7",
      "model_score": 46.9,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "Removal of slit/bacterial layer by vaccum"
    },
    {
      "question_id": "65",
      "model_score": 81.9,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. This increases the readability of the code and makes the program more structured.\n2.It helps in debugging and removing errors as the code is more organized now.(robust code)"
    },
    {
      "question_id": "63",
      "model_score": 77.3,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Green colour has high intensity but this is not fully green at all parts. It is shadowed at some parts so some dark portion is present which lowers its intensity to some extent.\nHue for green is near to 120 degree, so in this case it will be close to 120 degree. \nSaturation is low because of presence of shadowed region. \n"
    },
    {
      "question_id": "5",
      "model_score": 89.3,
      "human_score": 2.0,
      "question": "A reactor which is used when intense agitation is required is _____________.",
      "instructor_answer": "Completely mixed flow reactor (CMFR)",
      "student_answer": "Complete mix flow reactor"
    },
    {
      "question_id": "64",
      "model_score": 45.2,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "1.a narrow range around 0-15degrees for H\" \n2.a broad range of I centered around 0.3-0.6.\n3.a narrow range around 0.6-0.7 for I . "
    },
    {
      "question_id": "40",
      "model_score": 31.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\n$\\rightarrow$ True, because 0 is for write & 1 is for read, something like 0 for STDIN & 1 for STDOUT\n"
    },
    {
      "question_id": "44",
      "model_score": 81.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\n **FALSE**\n Other interrupts such as read/blocking interrupts can also make OS to schedule ready processes. For timer interrupt is necessary for user process (from a pool of several READY processes), it does not have the capability to initiate a context switch and schedule the target process next on the CPU.\n"
    },
    {
      "question_id": "65",
      "model_score": 44.6,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "we can alter the definition at any time any where in the code \n\neasy to identify the declaration \n\nmember functions will be well seperated"
    },
    {
      "question_id": "10",
      "model_score": 42.5,
      "human_score": 2.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "If a low priority process is in critical section and high priority process is running in cpu, then increasing the priority of low priority process so that it can complete and give chance to high priority proce"
    },
    {
      "question_id": "63",
      "model_score": 52.5,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "To segment green leaves H should have narrow range around 120      "
    },
    {
      "question_id": "48",
      "model_score": 88.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse, exec() can be called by the parent and also parent can terminate. In that case init takes up the children for reaping."
    },
    {
      "question_id": "45",
      "model_score": 63.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTRUE, this capability is only with the OS.\n"
    },
    {
      "question_id": "49",
      "model_score": 86.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Whether processes belong to same program or not each process is assigned with a PCB, PID and memory. They run independent of each other."
    },
    {
      "question_id": "28",
      "model_score": 89.2,
      "human_score": 2.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects."
    },
    {
      "question_id": "41",
      "model_score": 30.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nFalse, as the process is send back and rescheduled if the process is running\n"
    },
    {
      "question_id": "65",
      "model_score": 51.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Declaration all the required functions makes the code to be understood easier by the reader since all the functions that we are going to use in program will be present at one place and could be analysed by only one glance\n2. \"NO SCOPE ISSUES\" in case of any global functions usage, we may use functions in functions. In those cases we need to make sure that the internal function present in the current functions definition or declaration must be present before anywhere. To avoid such problems we can declare all required function"
    },
    {
      "question_id": "88",
      "model_score": 70.2,
      "human_score": 2.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "1) balance fluctuating flow\n2)encourages self neutralisation of influent\n3)stop discharge of periodic sludge"
    },
    {
      "question_id": "31",
      "model_score": 55.6,
      "human_score": 1.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "We can use a single discriminant functions when there are 2 classes and in that case our discriminant function will work such that g(n)>0 for 1st class inputs and g(n)<0 for the 2nd class inputs."
    },
    {
      "question_id": "104",
      "model_score": 49.5,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Accessing virtual memory that it has not been allocated. This causes a pagefault which is handled by the OS and with its entrance into the trap state.\nOpening/writing to files which it does not have access/privilege to. The OS keeps track of file permissions and prevents writes to read-only files, etc."
    },
    {
      "question_id": "64",
      "model_score": 76.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue Angle for red is zero degrees. Hence, a narrow range of 0/360 degrees for H. "
    },
    {
      "question_id": "53",
      "model_score": 59.3,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Edges and boundaries will be very important  for cotegorizing different roads, detecting the edges and using them as feature will be useful and solve our task"
    },
    {
      "question_id": "46",
      "model_score": 19.3,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "True, we can just reboot the process so, os can take control again."
    },
    {
      "question_id": "49",
      "model_score": 21.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "I think we can execute more than one process\n true\n simultaneously of same program using\n threads\n which use same\n process, initial block\n with reference want to indicate - of threads."
    },
    {
      "question_id": "46",
      "model_score": 22.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "False. This can only happen if the process was some system/utility that didn't require any inputs from the user. Otherwise, the OS will eventually reach a point where it will not be able to continue till infinity."
    },
    {
      "question_id": "78",
      "model_score": 68.5,
      "human_score": 1.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "1)storage type\n2) running river\n3)cascade type"
    },
    {
      "question_id": "105",
      "model_score": 82.4,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "FALSE, the OS does not start executing the next instruction ( the one after faulting instruction) just after allocating handling the pagefault. It returns control to scheduler & whenever this process gets scheduled it starts from the instruction where the trap accured & not the next instruction. Starting from the next instruction might result in unexpected"
    },
    {
      "question_id": "82",
      "model_score": 46.6,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Non-linear discriminant function can born data which is not linearly separable by xor."
    },
    {
      "question_id": "49",
      "model_score": 27.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True, PCB is required to count no. of instances also different process run simultaneously the different threads could be counted by (TCB)"
    },
    {
      "question_id": "60",
      "model_score": 91.9,
      "human_score": 2.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "Windrow composting,In vessel composting,Static Aerated composting "
    },
    {
      "question_id": "72",
      "model_score": 13.6,
      "human_score": 0.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "the main critical issue included the mapper, quantizer and the symbol encoder should be placed in the space vehicle. Another issue is using quantization matrix for different landuse which is a major issue."
    },
    {
      "question_id": "77",
      "model_score": 42.8,
      "human_score": 2.0,
      "question": "What are the two important scales in Hydrology? ---------------------",
      "instructor_answer": "Availability of driking water, time scale, length of the process, spatial scale.",
      "student_answer": "time and length of the process."
    },
    {
      "question_id": "63",
      "model_score": 45.8,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "a narrow range around 120 degrees for H"
    },
    {
      "question_id": "2",
      "model_score": 99.9,
      "human_score": 2.0,
      "question": "\nWhat\nis the Full form of RCP?",
      "instructor_answer": "Representative Concentration Pathway",
      "student_answer": "representative concentration pathway\n"
    },
    {
      "question_id": "42",
      "model_score": 46.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFALSE\ncontext switch and schedule the task does the kernel."
    },
    {
      "question_id": "21",
      "model_score": 62.3,
      "human_score": 2.0,
      "question": "Differentiate between true random number and pseudorandom number generators.",
      "instructor_answer": "TRNG uses unpredictable physical mean for computation of random\nnumber, results are truely random and unpredictable , some random numbers cannot be reproduced. PRNG uses mathematical algorithm which are computer based. Its logical which uses mathematical formulas to generate sequence of random number. Some random number can be produced.",
      "student_answer": "TRNG are the numbers that occur in same sequence/series with values uniformely distributed over a defined interval and its impossible to predict the values based on the present number. Its uses in statistical and probablistic theory. PRNG uses mathematical formula to produce algorithm to have sequence of random number. It is the process to accept input apply mathematical formula use it  in next step repeat process."
    },
    {
      "question_id": "39",
      "model_score": 93.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "False, fd[0] is used as read and fd[1] is used as write, always, if not duped."
    },
    {
      "question_id": "20",
      "model_score": 70.7,
      "human_score": 1.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "In intermittent stream, water availability is not throughout the year like perinial stream. Water level falls down below the bed level of river during summer season whereas in Ephemeral stream, water availability is only during monsoon season."
    },
    {
      "question_id": "74",
      "model_score": 48.3,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "We need a large set of examples in the training dataset to train the network and the time taken for learning increases."
    },
    {
      "question_id": "51",
      "model_score": 58.8,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1.Adsorption of charge inducing ions (OH-, S2-). \n\n2. Metallic Ions are charged in their various oxidation states eg (Fe(III), Al(III)), and form a layer \n\n3. Due to common ion effect, ionic salts like KI have a layer of I- outside which also contributes to them being charged."
    },
    {
      "question_id": "88",
      "model_score": 26.2,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "It equalize the amounts of organic bacteria and sludge."
    },
    {
      "question_id": "65",
      "model_score": 81.7,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. This increases the readability of the code and makes the program more structured.\n2.It helps in debugging and removing errors as the code is more organized now. "
    },
    {
      "question_id": "72",
      "model_score": 47.8,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "issue includes that Information preservation is important, there can be transmission error, information loss could also happen."
    },
    {
      "question_id": "104",
      "model_score": 66.1,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " (i) Changing the interrupt-timer register value.\nThis is a register on CPU, but to update it requires privilege. It is important that no user process can modify it because if a user process modifies it then it can increase its value arbitrarily and gain full control of CPU (machine).\n(ii) Changing the IDTR register value.\nThis is also a register on CPU and requires privilege to update. Suppose it was unprivileged then a process make it point to its own code somewhere, but on an interrupt, privilege level becomes 0 and the CPU will start executing the code from IDTR register."
    },
    {
      "question_id": "63",
      "model_score": 75.7,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "a narrow range around 120(green hue) in hue, a wide range 0.5-1 in saturation and wide range centered at 0.3(too include darker pixels go for low intensity) in intensity"
    },
    {
      "question_id": "102",
      "model_score": 50.5,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "workpiece material, slurry concentration, tool material, static load"
    },
    {
      "question_id": "2",
      "model_score": 11.8,
      "human_score": 0.0,
      "question": "\nWhat\nis the Full form of RCP?",
      "instructor_answer": "Representative Concentration Pathway",
      "student_answer": "Radiation control potential"
    },
    {
      "question_id": "42",
      "model_score": 56.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "**False**, The OS decides which process to switch to, but the OS can only initiate a context switch."
    },
    {
      "question_id": "42",
      "model_score": 59.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "False, user process cannot schedule the target process."
    },
    {
      "question_id": "64",
      "model_score": 27.8,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A narrow range around 0/360 degree for H"
    },
    {
      "question_id": "39",
      "model_score": 92.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFALSE, since fd[0] is opened in such a way that it is used for reading only and fd[1] is opened for writing. Vice-Versa won't be done as necessary permissions aren't there for the fds when interchanged.\n"
    },
    {
      "question_id": "28",
      "model_score": 27.9,
      "human_score": 0.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "a regularised set operation increases productivity, reduces material wastage and takes all process parameters into account."
    },
    {
      "question_id": "104",
      "model_score": 22.2,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Reading a file from memory is privileged action that can attempt but presented by OS.\nWriting to a file.\nAll file system related things like creating a file on disk, writing content to disk."
    },
    {
      "question_id": "88",
      "model_score": 79.7,
      "human_score": 2.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "the role of equilisation tanks are\n1) to balance the fluctuating flows\n2) to assist self neutralisation and\n3) To even out the effect of slug during "
    },
    {
      "question_id": "48",
      "model_score": 67.3,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False, exec command can be used in parent after exec command the new parent will be assigned to child process & if we are not using COW(copy on write) Parent PID is still the same."
    },
    {
      "question_id": "63",
      "model_score": 40.8,
      "human_score": 0.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "to segment the green leaves and stem the hue"
    },
    {
      "question_id": "49",
      "model_score": 29.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "TRUE: When every executable program is made to run, the data in the program needs a lock in order to avoid the synchronization problems. So, PCB maintains a set_count to count the instances of the program and lock such that only one program can modify at a time."
    },
    {
      "question_id": "106",
      "model_score": 48.0,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "The context of the child process is saved in a register and the pointer which is initially pointed to this register of the child process is now shifted to the same register of another process in the kernel mode itself. (And assume that we created a new program in the user mode). Now this process in the kernel mode will return path to the user mode via trap/interrupt handler which now behaves exactly same as our previous child process."
    },
    {
      "question_id": "26",
      "model_score": 4.7,
      "human_score": 0.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "Removing multiple layers in single stoke"
    },
    {
      "question_id": "43",
      "model_score": 74.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFALSE - The schedulers doesn't always return CPU execution to this process. To prevent data loss, the relevant data, the registers are stored in the process's stack of the process & the necessary pointers are stored in the kernel stack of the process. There is NO necessity for the PC are stored in the process stack of the process & the necessary pointers are stored in the kernel stack of the process. There is NO necessity for the same thread to go back & run immediately after it was interrupted.\n"
    },
    {
      "question_id": "86",
      "model_score": 24.8,
      "human_score": 0.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "by using homogeneous co-ordinate we can easily convert it to"
    },
    {
      "question_id": "2",
      "model_score": 7.0,
      "human_score": 0.0,
      "question": "\nWhat\nis the Full form of RCP?",
      "instructor_answer": "Representative Concentration Pathway",
      "student_answer": "Renewable consumer product"
    },
    {
      "question_id": "86",
      "model_score": 19.4,
      "human_score": 0.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "For projecting 3D objects on 2D plane. Homogeneous transformation do not"
    },
    {
      "question_id": "80",
      "model_score": 63.3,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "orthotropic materials are anisotropic materials with three planes of symmetry"
    },
    {
      "question_id": "51",
      "model_score": 40.2,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1) It can induced by other particles by vander wall means\n2)in water the dissociated ions got stabalized on colloidal particles might be in state to that from earlier"
    },
    {
      "question_id": "56",
      "model_score": 95.8,
      "human_score": 2.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbiaseness, consistency, efficiency, sufficient "
    },
    {
      "question_id": "65",
      "model_score": 50.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Let us suppose , I have declared class name ' Shape' , And in that I have declared Area() function, which calculates the area of given shape. \nBut as we know that Area depends on actually which type of shape it is!\nA rectangle, or a circle , or Rhombus...\nso ,\nthis is the advantage of separating declaration from defination.\n--> as I can't define my Area() function in base class here, so I will defined a derived class, ex. Rectangle and then I can implement or define my Area() function here.\n-->By separating Declaration from definations, we can easily structure our program, in proper executable manner."
    },
    {
      "question_id": "81",
      "model_score": 79.3,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "low eigen values implies high correlation between some bands of our data and thus lesser variance in the transformed domain and thus can be discarded"
    },
    {
      "question_id": "65",
      "model_score": 12.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. One can implement different data types in declarations and definitions (provided the defining type is a subclass of the declaring type) \n2. Dynamic Binding (Runtime polymorphism) can be enabled via the above technique through the use of virtual functions\n3. One may even create raw pointers of abstract classes and follow it up by assigning the pointer to an object of a \"concrete\" subclass by separating declarations and definitions"
    },
    {
      "question_id": "88",
      "model_score": 20.8,
      "human_score": 0.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "It is used for sedimentation of SS"
    },
    {
      "question_id": "6",
      "model_score": 81.1,
      "human_score": 1.0,
      "question": "Chi-square goodness of fit test evaluates the error between (                                                                                   ) and (                                                                                   )                    (                                                                     )",
      "instructor_answer": "Observed and assumed/Estimated PDF",
      "student_answer": "observed and theoritical and pdf"
    },
    {
      "question_id": "75",
      "model_score": 17.2,
      "human_score": 1.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "The sum of muskigham parameter is 1"
    },
    {
      "question_id": "105",
      "model_score": 23.3,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True, by coalescing the remaining allocation, it maps the VA & PA and allocates them in the page table."
    },
    {
      "question_id": "49",
      "model_score": 80.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False processes of same program are assigned different PCB."
    },
    {
      "question_id": "47",
      "model_score": 78.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "True, if parent gets scheduled before child terminates."
    },
    {
      "question_id": "106",
      "model_score": 62.4,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "The child process uses trap/interrupt handler of the parent process. As the parent and child use the same control block, so when child wants to make a system call or an interrupt, it goes via parent process -> trap handler, save registers into k-stack. Switch to privilege mode -> handle the system call -> return from trap -> restore registers from kernel stack. -> switch to user mode -> child process."
    },
    {
      "question_id": "74",
      "model_score": 63.1,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "When the number of hidden layers are very lange the cost and time for computation increases tremendously. Also to obtain the optimal weight vectors Iterations are also increased & which will result into more complexity."
    },
    {
      "question_id": "49",
      "model_score": 78.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": " False. Each process runs independently, and each process\nhave different pid, as different process may have diff\ncontext at the same time."
    },
    {
      "question_id": "106",
      "model_score": 50.5,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " When a new child is forked, the traps of the parent\nprocess is also duplicated (except the eax/small return value\nwhich is set to 0) and copied onto the next trap.\nThus when a child process is scheduled in the next trap,\nthe duplicated trapframe is copied onto the trap when\nimplemented by the hardware."
    },
    {
      "question_id": "42",
      "model_score": 11.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "FALSE"
    },
    {
      "question_id": "64",
      "model_score": 82.9,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0 degrees for H since pure R is 0 deg, broad range around 0.5 for I since petals are not very bright here, around 0.7-1 for S since pure red is completely saturated but here it is not pure red"
    },
    {
      "question_id": "39",
      "model_score": 95.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "FALSE.  write using fd[1] and reads using fd[0], vice versa is not possible, because fd[1] is the writing end and fd[0] is the reading end."
    },
    {
      "question_id": "83",
      "model_score": 68.6,
      "human_score": 1.0,
      "question": "What is the difference between basin order and channel order?",
      "instructor_answer": "Basin order is highest order of any stream in that basin whereas Channel order is order of stream\nwhich denotes that what order of streams has joined the channel.",
      "student_answer": "Channel order reflects to the number of streams coming together to form a channel."
    },
    {
      "question_id": "105",
      "model_score": 81.1,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. The first part of the statement is true, if it allocates physical memory and enters it into page table. But after finishing this, OS handles the instruction that caused the page fault before proceeding to the next instruction. Otherwise the program will be logically wrong. (if we miss an instruction in between) as it doesn't necessarily have to proceed to next instruction, it may switch context to another process."
    },
    {
      "question_id": "65",
      "model_score": 47.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Class declarations(without definition) act as a compact representation of what all variables and member functions contains. This gives the user/programmer a compact idea of the class.\n2. In large"
    },
    {
      "question_id": "106",
      "model_score": 67.4,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " as the child gets created when fork is called the whole context of parent gets copied into child initially hence the same trapframe as the parent process.\nBut then we change the top to the stack to return value from the parent process and as the child gets scheduled it pop the return value and changes its mode to user mode."
    },
    {
      "question_id": "65",
      "model_score": 60.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Codes doesn't look messy when defined and declared at different lines.\nAll the defined member functions gets placed in consecutive lines which makes code user friendly."
    },
    {
      "question_id": "38",
      "model_score": 65.9,
      "human_score": 2.0,
      "question": "Open dumping of waste is a major practice in India. Two major environmental problems associated with are                                                                                                                                                                  ",
      "instructor_answer": "1.Leachate generation and mismanagement\n2.Release of GHGs due to anaerobic reactions\n3.Odour\n4.Insects and rodents infestation leading to public health issues",
      "student_answer": "leachet (water pollution) odour (air pollution) and inorganic (land pollution)"
    },
    {
      "question_id": "48",
      "model_score": 36.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nTRUE. exec system call waits for all child processes to complete. This it's to done to ensure that child processes don't get orphaned due to execute system call."
    },
    {
      "question_id": "50",
      "model_score": 27.2,
      "human_score": 1.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "1. In reservoir routine the Storage is independent of Outflow discharge.\n\n2. In case of Channel flood routine the Storage is the function of both Inflow and Outflow discharge."
    },
    {
      "question_id": "96",
      "model_score": 34.0,
      "human_score": 0.0,
      "question": "Why to test the level of significance in hydrological time series analysis and modeling? Which test will you use to test the level of significance?",
      "instructor_answer": "The test of level of significance is used to test how well our prediced model fits observed data (goodness of Fit test).It is important because it gives the prorbability of rejecting the null hypothesis using a statistical test. The chi-square (X2) test is used to test the level of significance.",
      "student_answer": "The test which is used for level of significance is Turning point test and Kendel's Rank correlation Trend. This test of level of signifinance in hydrological time series analysis and modelling is done."
    },
    {
      "question_id": "5",
      "model_score": 93.3,
      "human_score": 2.0,
      "question": "A reactor which is used when intense agitation is required is _____________.",
      "instructor_answer": "Completely mixed flow reactor (CMFR)",
      "student_answer": "Completely Mixed Flow Reactor"
    },
    {
      "question_id": "65",
      "model_score": 43.2,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Prevents class declaration from getting cluttered.\n2. "
    },
    {
      "question_id": "64",
      "model_score": 42.6,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Rose petals are red in colour. we know H=0 for red colour. intensity is (r+g+b)/3."
    },
    {
      "question_id": "43",
      "model_score": 61.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\n$\\rightarrow$ False, It depends on the scheduler, to use other schedule without the timer interrupt, the OS still has opportunities to schedule READY processes and pause the CPU for multitasking."
    },
    {
      "question_id": "73",
      "model_score": 24.5,
      "human_score": 0.0,
      "question": "What are the important details that have to be known prior for reservoir routing?",
      "instructor_answer": "storage volm vs elevation of reservoir\ninflow hydrograph \nwater surface elevation vs outflow\ninitial values of S,I and Q at t=0",
      "student_answer": "The reservoir dimensions"
    },
    {
      "question_id": "48",
      "model_score": 43.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. If the exec process is used the parent process will exit and new parent will be assigned to child. It won't affect the running of child process."
    },
    {
      "question_id": "69",
      "model_score": 80.0,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "the usable life of a reservoir is that time till which it can be used to serve some purposes though to limited extent"
    },
    {
      "question_id": "65",
      "model_score": 41.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "The code is cleaner and there is less repetition when we use definition.\nWhen declaration is used, memory has to be allocated which is not in the case of definition."
    },
    {
      "question_id": "41",
      "model_score": 5.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nFalse"
    },
    {
      "question_id": "45",
      "model_score": 8.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "TRUE"
    },
    {
      "question_id": "92",
      "model_score": 50.7,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Image analysis applications that benefits from the interest points like corners are Harris Corner detection algorithms."
    },
    {
      "question_id": "68",
      "model_score": 36.7,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "if the data is linearly separable and feature vectors are of higher dimension. in case of non- linear separable data we need to use non-linear activation function which gives nice classification"
    },
    {
      "question_id": "97",
      "model_score": 62.4,
      "human_score": 2.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "depth of cut, stiffness of machine, speed of cutting"
    },
    {
      "question_id": "71",
      "model_score": 89.3,
      "human_score": 2.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "Ocean Salt, dust, clay particles, Organic material"
    },
    {
      "question_id": "82",
      "model_score": 57.4,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "the Advantage of a Non- linear discriminant classifier are:  It generalises better to the data providing less error in the optimization. It is able to take into account the classification with a better overall accuracy as compared to the linear classifier."
    },
    {
      "question_id": "100",
      "model_score": 25.5,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "high set up and operation costs, need skilled labour as unconventional process, dimensional accuracy is lower than other conventional methods, surface finish isnt that great, chemical and physical composition of surface may change "
    },
    {
      "question_id": "45",
      "model_score": 56.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "**TRUE**"
    },
    {
      "question_id": "7",
      "model_score": 49.6,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "Manually scraping off top layer of Schmutzdecke"
    },
    {
      "question_id": "104",
      "model_score": 28.0,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " First > A process may initialize a pointer and declare it some value which will lie outside of its allocated space (say a large no. ). Now accessing this will lead to a page fault segmentation error.\nSecond > When a process tries to access restricted files / privileged files, the OS will detect such and error and will warn the process ( and a specific return / error ) or say it does a restricted operation on a file.\nThird > If does a division by zero.\nForth > If assigns a null ptr location."
    },
    {
      "question_id": "81",
      "model_score": 66.3,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "dimension corresponding to low eigen value is irrelavent and can be removed from data."
    },
    {
      "question_id": "106",
      "model_score": 70.0,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " On the kernel stack of child process the return address in set to \"iret\" so and the register of string the return value is also cleared to '0' so when the child process makes a \"syscall\" that it returns to given to the trapget and then execute the corresponding code + eventually return to usermode using \"iret\"\n\nOn the kernel stack of the child process we push the trapget. Their creates the illusion that the child process on completion of task goes to trapget. Them it executes the corresponding code + eventually return to usermode every time. Also the return value is set to '0'."
    },
    {
      "question_id": "26",
      "model_score": 51.0,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "Broaching process is used to machine teeths and holes of internal gear"
    },
    {
      "question_id": "81",
      "model_score": 76.3,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "Eigen values represents amount of variance in the direction correspond to given eigen vectors. Low eigen values means low variance along the particular eigen vector. Sometime it also referred as noise as noise has low variance."
    },
    {
      "question_id": "80",
      "model_score": 11.6,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "properties are same in perpendicular planes"
    },
    {
      "question_id": "82",
      "model_score": 19.8,
      "human_score": 0.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "But in linear discriminant function, We use a small number of pixels in an image."
    },
    {
      "question_id": "65",
      "model_score": 29.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. By only declaring a virtual function, we can later define that function in sub-classes, which gives us more freedom about defining that function according to the specific needs of the sub-classes. \n2. "
    },
    {
      "question_id": "46",
      "model_score": 68.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "**True** Time interrupt is there to make this process streamlined but without it also, OS can schedule READY processes once the previous process is blocked/terminated. Conventional Scheduling -> However, without time interrupt, when a child process terminates, the exec system call cannot be used in the parent process until the child process terminates."
    },
    {
      "question_id": "65",
      "model_score": 59.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)More structured 2)avoid redeclaration"
    },
    {
      "question_id": "41",
      "model_score": 89.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "True, after handling the interrupt the process may go into ready state if some other process is in running state."
    },
    {
      "question_id": "44",
      "model_score": 55.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse. Without timer interrupt context switching can still happen.\n"
    },
    {
      "question_id": "65",
      "model_score": 54.9,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) It gives an interface approach to the class, displaying all its functions at once. The class with all its declarations can be placed in a separate header file and the methods implemented differently in each program using the header.\n2) The bodies of the method may contain things taken from classes yet to be defined. Thus the methods can be defined after those classes are declared."
    },
    {
      "question_id": "65",
      "model_score": 55.1,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) when we specify interface to the user, then user can only see the declaration of functions and not the actual implementation, and can use the functions without looking whole 300-400 lines of code.\n2) we can keep "
    },
    {
      "question_id": "44",
      "model_score": 0.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "None"
    },
    {
      "question_id": "36",
      "model_score": 70.9,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "Geographic Location,size of the city,quality of water,extent of industrialisation "
    },
    {
      "question_id": "67",
      "model_score": 19.9,
      "human_score": 0.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "point estimation method,  interval estimation method"
    },
    {
      "question_id": "105",
      "model_score": 23.8,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True. In lazy allocation, physical pages aren't allocated to virtual addresses right away, hence allocation via PGLT is necessary"
    },
    {
      "question_id": "55",
      "model_score": 88.6,
      "human_score": 2.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "cetyl alcohol stearyl alcohol"
    },
    {
      "question_id": "52",
      "model_score": 98.1,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a change in length divided by the original length"
    },
    {
      "question_id": "49",
      "model_score": 89.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n Each process has its own PCB"
    },
    {
      "question_id": "105",
      "model_score": 82.9,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False\nOnce the page fault is handled, it first executes the instruction that gave a page fault (failing instruction), then goes to the next instruction, assuming no more page faults/exceptions occur."
    },
    {
      "question_id": "106",
      "model_score": 55.2,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "Even child uses return path of the parent to return to user process, and when any variable is changed, due to copy-on-write idea, we get a interrupt & then it starts to work in its own user mode."
    },
    {
      "question_id": "68",
      "model_score": 23.3,
      "human_score": 0.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "the multilayer perceptron neural network is desirable when  the sequence of steps that are similar to the chain rule of partial differentiation shown when dealing with the weights linking to output node."
    },
    {
      "question_id": "39",
      "model_score": 66.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "False. Only fd[0] can read what fd[1] has written and the same is the case for fd[2]."
    },
    {
      "question_id": "65",
      "model_score": 42.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "The code is cleaner and there is less repetition when we use definition.\nWhen declaration is used, memory has to be allocated which is"
    },
    {
      "question_id": "49",
      "model_score": 59.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, lets say there are 2 different processes, one of the processes is scheduled before executed, some of the part of the code but the other process didn't even start, so, PCBs will be different at the end of the page."
    },
    {
      "question_id": "63",
      "model_score": 40.1,
      "human_score": 0.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Green colour has high intensity but this green ni"
    },
    {
      "question_id": "31",
      "model_score": 62.3,
      "human_score": 2.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "Far a multiclass application, we can do the following: If we have n-classes we can Split the problem into 'n' 1 vs Rest classification. we will use the function n times and assign the class with max probability. we can biject the problem into nC2 1 v 1 classifiers and choose the label with the highest points."
    },
    {
      "question_id": "104",
      "model_score": 42.8,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) Enable and disable Read from and/or write to files on disk. Processing device drivers / I/O devices etc is a privileged operation so as to protect different users content from each other.\n2) Setting the IDT which contains the location of the IDT can permit the user to control what the CPU does on interrupts and hence is privileged process.\n3) Disabling interrupts would allow user to hog the CPU and never give it up, hence it is privileged.\n4) Setting of the privilege bit is naturally a privileged operation and a new process cannot do it at its privilege level."
    },
    {
      "question_id": "45",
      "model_score": 32.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nFalse, the OS is the manager of scheduling policies & interrupt switching depends upon the mechanism adopted by OS, by using appropriate system call OS is using privileged mode of execution, scheduling the desired PID is possible.\n"
    },
    {
      "question_id": "44",
      "model_score": 16.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "FALSE"
    },
    {
      "question_id": "72",
      "model_score": 30.9,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "Undesired data loss is there and which sometimes leads to information loss"
    },
    {
      "question_id": "81",
      "model_score": 62.2,
      "human_score": 1.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "the low eigen values in the PCT corresponds to lowest variance among all the principal component of the image. This denotes noise present in the data."
    },
    {
      "question_id": "67",
      "model_score": 95.5,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "method of moments, MLE method"
    },
    {
      "question_id": "42",
      "model_score": 90.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "False. A user process can yield output or something from a target process forcing itself into waiting state, but the process to be scheduled immediately next on CPU is in hands of scheduler."
    },
    {
      "question_id": "79",
      "model_score": 76.1,
      "human_score": 2.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "empirical equation are those which are obtained by only observation , they don't have any derivation."
    },
    {
      "question_id": "65",
      "model_score": 70.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) declarations of all the member function at the same time in the class makes structure of code better\n2) Also defining one function at a time outside the class make it easier for us to and the reader to check whether the functions is working correctly as per our requirements\n"
    },
    {
      "question_id": "9",
      "model_score": 86.4,
      "human_score": 0.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "discount rate and terminal growth rate"
    },
    {
      "question_id": "70",
      "model_score": 83.4,
      "human_score": 2.0,
      "question": "What approach should be followed to find a reasonable probability distribution for a given time series?",
      "instructor_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanalysis the results\n",
      "student_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit "
    },
    {
      "question_id": "85",
      "model_score": 32.8,
      "human_score": 0.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "Losses of head do not take place in the same proportions as creep length."
    },
    {
      "question_id": "65",
      "model_score": 19.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.We can change the type of object our variable is holding.(but class-subclass rule must be followed.)\n2.By this we can declare pointers of abstract classes(we can't intiansiate these),and later we can point them to a subclass which is not absrtact.(this way we can write a more superfical code like we did in VendingMachine involving planet and star vending machine)"
    },
    {
      "question_id": "99",
      "model_score": 13.4,
      "human_score": 0.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "increase abrasive resistance"
    },
    {
      "question_id": "67",
      "model_score": 57.5,
      "human_score": 1.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "met, maximum likelihood method"
    },
    {
      "question_id": "53",
      "model_score": 64.2,
      "human_score": 1.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "In this case feature\" edge per unit Area\" may be useful. Based on edge per unit area roads can be classified into different types basedon the width or area they cover."
    },
    {
      "question_id": "64",
      "model_score": 41.4,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "narrow range of H around 0 degree, broad range of s around 0.5, and broad range of I around 0.5"
    },
    {
      "question_id": "64",
      "model_score": 76.3,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "The rose petals are red (shades of red) in colour. Red colour has zero hue,maximum saturation i.e. one and low intensity( about one-third). So to segment the rose petals, a hue H can be taken in range of 0       to 60       , saturation S is in range of 0.5 to 1 , intensity I is in range of 1/3( pure red)  to 0.5 (light shades of red)."
    },
    {
      "question_id": "51",
      "model_score": 84.6,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1.due to disociation of surface molecule\n2.due to selective adsorption of ions"
    },
    {
      "question_id": "44",
      "model_score": 84.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse, the OS has opportunities to schedule ready processes like in Sys-calls, without the timer interrupt.\n"
    },
    {
      "question_id": "41",
      "model_score": 86.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "**TRUE**. Rescheduling depends on the scheduling policy of the OS. Eg: If a process ran long time, the time interrupt happens and the OS decides to switch to other process."
    },
    {
      "question_id": "27",
      "model_score": 63.7,
      "human_score": 1.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "Lasers are used in projections and shows. Also now a days several surgeries and other treatments also use laser therapy."
    },
    {
      "question_id": "65",
      "model_score": 42.0,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "class becomes easier to understand and edit"
    },
    {
      "question_id": "86",
      "model_score": 45.3,
      "human_score": 0.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "to keep the coordinate linear"
    },
    {
      "question_id": "84",
      "model_score": 80.2,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "Function like XOR are not linearly separable we require minimum 2 lines to separate them. For such classification a network with minimum 2 layears performs best. Hence, multilayer perceptron network gives better performance then single perceptron network"
    },
    {
      "question_id": "46",
      "model_score": 85.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue, when one of process calls a system call then OS gains the control.\n"
    },
    {
      "question_id": "49",
      "model_score": 18.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "Each process will have an independent & separate entry in the P.L.B."
    },
    {
      "question_id": "106",
      "model_score": 83.3,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " The fork system call executes via an interrupt handler handling that system call in the kernel mode. While creating a new process, almost all the fields of the process are central block are the same except the pid and the virtual address space of both the parent and the child processes are initially the same. This means that the child is stored on the 8 trapframe. It also the same for the child process. The process state of the child process is marked as runnable and return value set to 0.\n\nWhen the child process is scheduled, its kernel state is the same as it would be during a timer interrupt call (by setting kernel stack). It drops back to the trap handler section and then it drops back to the user state. While handling the times interrupt. Logic which is them responsible for switching the child process drops back to the user state. (Thus built setup creates an illusion of a process the child process returning from a trap)."
    },
    {
      "question_id": "81",
      "model_score": 68.1,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "lower eigen value implies component is of very little value. Eigen value decreasing implied that variance are decreasing along them."
    },
    {
      "question_id": "106",
      "model_score": 70.5,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " First of all, an almost identical trapframe for the child process is constructed in fork itself while setting the eax register in the trapframe as 0. (Since this would be the return value) And after the execution of fork, the child process starts executing the \"h\" forkret().\n```\ntf\nesp\ntf_esp\naddr to return to trap from fork\n```\n```\ntf\ntf_esp (adjusted by forkret())\nesp\n```\nStructure of parent just before calling fork\nStructure of child from forkret(). Then the child moves to another trapframe and then through user mode to \"iret\""
    },
    {
      "question_id": "75",
      "model_score": 44.2,
      "human_score": 1.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "1- Weighing factor = 1, 2- based on continuity equation only"
    },
    {
      "question_id": "31",
      "model_score": 9.7,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "Provide different bandwidth to different classes."
    },
    {
      "question_id": "54",
      "model_score": 46.1,
      "human_score": 1.0,
      "question": "The appetitive      faculty corresonds to      ",
      "instructor_answer": "Plato's theory of the soul, the appetitive faculty is one of the 3 divisions of the soul. It is the part dealing with desires and passions",
      "student_answer": "the lower material human desires like hunger for food and desire to procreate"
    },
    {
      "question_id": "44",
      "model_score": 79.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse, it is possible to perform multitasking even without the timer interrupt. One example is if the processes contain I/O interrupts then we could schedule other processes during it."
    },
    {
      "question_id": "47",
      "model_score": 86.3,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue, the parent process can call exec syscall anytime."
    },
    {
      "question_id": "63",
      "model_score": 56.7,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Hue for green is +120degree. So H threshold can be narrow range around 120degree eg. 115degree to 125 degree. Only hue thresholding is sufficient as red and blue have different much different hue values and dominant color component can be captured just by hue."
    },
    {
      "question_id": "20",
      "model_score": 69.9,
      "human_score": 1.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "Intermittent streams are the stream which flows in same season (monsoon) , mean are intermittent in nature not perenial, Ephemeral streams are the streams in which, in wet season water table is above the bed level and for dry season, water table level is below the bed level,"
    },
    {
      "question_id": "72",
      "model_score": 87.0,
      "human_score": 2.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "maximum image quality should he preserved. full use of channel capacity should be ensured. Date rate should not exceed maximum channel capacity."
    },
    {
      "question_id": "105",
      "model_score": 29.9,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True. Since it is following its allocation\npolicy, OS handles page fault and\ncontinues with the execution of next instructions. It\ndoesn't end the process beacuse, its allocation policy\nis to allocate when there is page fault.\n(more)"
    },
    {
      "question_id": "65",
      "model_score": 67.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Separating declaration and definition can make the code look neat and understandable. Defining a function separately can be done whenever needed instead of trying to adjust the whole code."
    },
    {
      "question_id": "99",
      "model_score": 36.1,
      "human_score": 0.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "Low deposition rate (slow process)"
    },
    {
      "question_id": "88",
      "model_score": 69.8,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "1. to balance the fluctuating flow of water\n2. to assist self neutralization\n3. to even out the"
    },
    {
      "question_id": "53",
      "model_score": 57.6,
      "human_score": 0.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "For a high resolution image of urban area, contextual information can be used to put roads in different categories. i.e street roads have buildings nearby, highway roads can't have to be in developed urban region."
    },
    {
      "question_id": "74",
      "model_score": 65.1,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "Overfitting of the model such that it can correctly predicts the training data but cannot predict correctly the testing data or perform well in real enviornment. Longer training time due to more number of neurons in the layer and larger number of hidden layers,"
    },
    {
      "question_id": "45",
      "model_score": 57.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTRUE. The capability of to schedule a process into the OS only and not to user process."
    },
    {
      "question_id": "82",
      "model_score": 57.2,
      "human_score": 1.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Linear discriminant function classifier cannot be used when the dataset is not linearly seperable."
    },
    {
      "question_id": "63",
      "model_score": 44.9,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "a narrow range around 120 degrees for H and a narrow range around 0 for I."
    },
    {
      "question_id": "1",
      "model_score": 16.3,
      "human_score": 0.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "Revenue Growth Assumption"
    },
    {
      "question_id": "1",
      "model_score": 90.8,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "capital structure remains constant"
    },
    {
      "question_id": "72",
      "model_score": 17.4,
      "human_score": 0.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "The critical issues involved in design of a compression system for space applications are the 3 types redundancies: Psychovisual, Interpixel and Coding"
    },
    {
      "question_id": "44",
      "model_score": 30.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "TRUE - Without the timer interrupt, an user process can run eternally without generating any sort of interrupt & the OS becomes humanly incapable to control to schedule other processes to mimic multitasking."
    },
    {
      "question_id": "104",
      "model_score": 35.9,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. User may try to change the time counter. Resetting a time counter will help user use more CPU time essentially blocking the CPU. LDE stops this type of actions.\n2. Malicious users may try to change the important registers like the cr3, cr2 etc which are essential for correct working of OS. Also the register which stores stack pointer for use during int instruction\n3. Someone might try and alter the contents of some of the essential h/w like mmu or TLB. Eg: user may flush all the content of TLB and making the memory translation slow."
    },
    {
      "question_id": "31",
      "model_score": 60.3,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "In order to handle multiclass classification problem. The discriminant function should give the outputs which, are propotional to the probabilities of the feature vector belonging to that particular class for which discriminant function is given."
    },
    {
      "question_id": "105",
      "model_score": 84.1,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False: A also checks if the faulting address is within the virtual address space allocated else it cannot do any physical page allocation.\nSecond case: After allocation the faulting instruction is executed not the next one."
    },
    {
      "question_id": "49",
      "model_score": 66.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, each have their own PCBs, have 2 processors, are independent, they have their own code, data, stack, heap on memory and also their own PCBs."
    },
    {
      "question_id": "38",
      "model_score": 61.1,
      "human_score": 2.0,
      "question": "Open dumping of waste is a major practice in India. Two major environmental problems associated with are                                                                                                                                                                  ",
      "instructor_answer": "1.Leachate generation and mismanagement\n2.Release of GHGs due to anaerobic reactions\n3.Odour\n4.Insects and rodents infestation leading to public health issues",
      "student_answer": "Leaching of waste water , poisonous gases"
    },
    {
      "question_id": "92",
      "model_score": 53.3,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Applications where image rotation, translation, intensity changes benefits the most from interest points Ex Image templale matching."
    },
    {
      "question_id": "103",
      "model_score": 39.0,
      "human_score": 2.0,
      "question": "__________________________ is one of the drawbacks of non-conventional machining processes.",
      "instructor_answer": "It requires high-skill labour and is inefficient as it has a low metal removal rate (MRR). Also, it is generally an expensive process",
      "student_answer": "expensive low mrr high power high skill req haz zones"
    },
    {
      "question_id": "64",
      "model_score": 97.4,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petals\nH -- Narrow range around zero ( Red has hue of 0)\nS -- Close to 1 (Red is primary color and all primary colors are pure colors)\nI -- Broad range "
    },
    {
      "question_id": "69",
      "model_score": 76.1,
      "human_score": 1.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "when the reservoir can still serve after it's expired economic period"
    },
    {
      "question_id": "46",
      "model_score": 38.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "TRUE. ^A multitasking process may not eat any moment. Then the OS can call scheduler."
    },
    {
      "question_id": "104",
      "model_score": 22.0,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. open (\"filename/path\") : This action is used to open a file from a process or create a new one. We cannot let this run in user mode as the process may try to open files which it's not permitted to. Subsequently it might use read()/write() calls to do read/change contents of file (which can be a major security vulnerability)\n2. malloc() : get more space in heap. If we let this run in user mode the process might take over the entire memory, corrupting data of other processes. So memory is handled in kernel, (malloc calls are stored internally) which prevents misuse of it by processes."
    },
    {
      "question_id": "70",
      "model_score": 16.0,
      "human_score": 1.0,
      "question": "What approach should be followed to find a reasonable probability distribution for a given time series?",
      "instructor_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanalysis the results\n",
      "student_answer": "probability distribution indicates likelihood of an event or outcome."
    },
    {
      "question_id": "48",
      "model_score": 42.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "True, only exec system call can be used in child process."
    },
    {
      "question_id": "98",
      "model_score": 44.2,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "For High Speeds and high life than uncoated tools."
    },
    {
      "question_id": "43",
      "model_score": 33.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFALSE, in a non preemptive scheduling policy or a blocking interrupt, any other process on the CPU is not los of data, it is stored on kernel stack of process."
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. After handling the page fault, a timer interrupt may occur making the CPU run different process's instructions."
    },
    {
      "question_id": "105",
      "model_score": 84.6,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "FALSE: After the page fault is addressed, the instruction that caused the page fault must be executed to start any I/O. Thus, therefore, the dance instruction will execute again."
    },
    {
      "question_id": "50",
      "model_score": 58.3,
      "human_score": 1.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "reservoir- control flooding\nflood routing- predict hydrograph\n"
    },
    {
      "question_id": "26",
      "model_score": 68.5,
      "human_score": 1.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "used for multiple pass machining. used in making of automobile parts."
    },
    {
      "question_id": "65",
      "model_score": 74.4,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) All the function declarations of the class at once to us which makes the code more understandable and navigable to us.\n2) Seperates the abstraction from internal code and makes the code neater and easier to access.It Is an essential part of object oriented programming."
    },
    {
      "question_id": "44",
      "model_score": 87.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "False, as OS can also get H/W interrupt which forces OS to start a process."
    },
    {
      "question_id": "74",
      "model_score": 83.1,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "When number of hidden layers are very large it can cause overfitting of the available data and also backpropagation is slow as well."
    },
    {
      "question_id": "65",
      "model_score": 69.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.Separaying declaration from definition helps in creating good interface of the class.\n2. It becomes easy to define the member functions of the class and also the code looks good and is easy to understand."
    },
    {
      "question_id": "102",
      "model_score": 65.8,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "frequency, partical size, vibration amplitude"
    },
    {
      "question_id": "55",
      "model_score": 42.9,
      "human_score": 0.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "carboxylic acids and some fatty acids"
    },
    {
      "question_id": "65",
      "model_score": 71.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The abstraction becomes more clearer. At a single glance at the class declaration, one can get an idea of the different functions and the arguments taken by the functions.\n\n2. "
    },
    {
      "question_id": "63",
      "model_score": 47.3,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "A narrow range around 120/240 degrees for H. A broad range of I centred around 0.5. A narrow range of S centred around 0.8."
    },
    {
      "question_id": "65",
      "model_score": 42.4,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. we can modify easily the defination while writing"
    },
    {
      "question_id": "10",
      "model_score": 70.4,
      "human_score": 1.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "It is a phenomenon where higher priority process has to wait for lower priority process to finish."
    },
    {
      "question_id": "49",
      "model_score": 90.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False:\n All the processes generated by an executable program run independent of each and hence require separate PCBs and other memory components."
    },
    {
      "question_id": "48",
      "model_score": 86.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. After fork a new child process runs simultaneously along with parent process. If exec system call is used in parent process, it doesn't depend on status of child process, it just executes a new program and exits (terminated)."
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "constant capital structure"
    },
    {
      "question_id": "48",
      "model_score": 92.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. Exec system call can be used in the parent process, the pid value of the new process will be same as the parent. Even if parent is terminated after exec call child will become orphan and adopted by init process."
    },
    {
      "question_id": "105",
      "model_score": 35.9,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "True, it handles the page fault via allocation and updates to the virtual to physical address mappings in the page table."
    },
    {
      "question_id": "35",
      "model_score": 74.7,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "canal irrigation, sprinkling irrigation,drip irrigation"
    },
    {
      "question_id": "106",
      "model_score": 1.5,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "No picture"
    },
    {
      "question_id": "40",
      "model_score": 77.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue. Pipes are uni-directional, for duplex linking, 2 pipes are needed, or 1 pipe with appropriate open/close handling.\n"
    },
    {
      "question_id": "66",
      "model_score": 74.1,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "it is market based and is quick and convenient"
    },
    {
      "question_id": "49",
      "model_score": 82.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False\n In such cases, using fork we create multiple processes and we can exec call on this program inside each of these processes. Now, all these processes execute this program simultaneously. We can't use same PCB, as the execution context differs between processes as they are scheduled one after the other."
    },
    {
      "question_id": "90",
      "model_score": 64.7,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "when the feature vectors (training point and test points) can't be classified from linear modele & have outliers in them then it is required to transform them to a non linear space i.e, using sigmoid, gaussian function where they can be easily classified by a linear function."
    },
    {
      "question_id": "106",
      "model_score": 61.1,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "During the fork() system call on the child process is made identical to the parent process, to return to the user mode from kernel mode. It uses the trap/interrupt handlers of the parent. It takes the help of the parent process to return to the user mode from its kernel mode."
    },
    {
      "question_id": "106",
      "model_score": 74.1,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " while copying the contents of parent PLB to child PLB, we modify trapframe for child to store the appropriate return value in eax register. Sim on this copy of PLBs, we replicate everything from kernel_stack to user stack.\nwe post doing that set the state of child to \"RUNNABLE\", so that it can get scheduled by the scheduler sometime later and also change the ip of kernel to point to beginning of tasklet (like do this by appropriately changing the context and also store it in kernel stack for child)\n\nThen, when child gets scheduled, it starts running from task_entry using its(i.e, child) pointer) and goes zero initialization step of napping (limitation and then context switches back to user space using trap_return.\n\ntrap_frame has all the values like register values, eip, eax(to store return value), when child comes in user system, \"looks\" to it as if it has resumed its working post system call. whoever return value was 0.\nwe also change of trapframe and kernel ip and setting state IRUNNABLE results in proper forking."
    },
    {
      "question_id": "45",
      "model_score": 45.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "True, it does not have the privilege level. Who does context switch?"
    },
    {
      "question_id": "43",
      "model_score": 72.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False. The process interrupted due to an interrupt may not be rescheduled immediately. This is because causing interrupt handling the CPU may run another process of READY processes and while doing so without the timer interrupt, the OS still has share the CPU for multi tasking."
    },
    {
      "question_id": "40",
      "model_score": 91.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "True, the pipe function creates two descriptors and fd[1] is used as write descriptor and fd[0] as read descriptor. So information travels only in one way. Write -> fd[1] \nfd[0] -> Read"
    },
    {
      "question_id": "89",
      "model_score": 21.1,
      "human_score": 0.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "To separate the Base flow from flood hydrogra"
    },
    {
      "question_id": "91",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "What theorem do we use to prove symmetry of stiffness matrix",
      "instructor_answer": "Maxwell Betti Reciprocal Theorem",
      "student_answer": "Maxwell Betti Reciprocal Theorem"
    },
    {
      "question_id": "15",
      "model_score": 33.2,
      "human_score": 0.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "meteorological drought is defined"
    },
    {
      "question_id": "56",
      "model_score": 79.5,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "unbiasedness, efficiency and consistency"
    },
    {
      "question_id": "63",
      "model_score": 51.0,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "To segment the green leaves we can ba narrow edge at H being around 120/360 degrees and intensity range of about 0.8/1 and saturation around 0./1. Lowering the intensity and saturation will also segment out the petal of the flower."
    },
    {
      "question_id": "84",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "A perceptron classifier (or a single layer perceptron) cannot classify XOR problem as it gives a linear output and no single line can separate the diff classes. However, a multilayer perceptron can produce complex functions as autput (ex: closed shapes) and hence can successfully do the cassification."
    },
    {
      "question_id": "63",
      "model_score": 56.1,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H should be around 110-120\nS should be lower than 0.5\nI should be lower than 0.5"
    },
    {
      "question_id": "90",
      "model_score": 76.2,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "When feature vectors are transformed non-linearly, they can be further classified easily as they the new feature vector formed can be linearly Separated."
    },
    {
      "question_id": "21",
      "model_score": 75.0,
      "human_score": 1.0,
      "question": "Differentiate between true random number and pseudorandom number generators.",
      "instructor_answer": "TRNG uses unpredictable physical mean for computation of random\nnumber, results are truely random and unpredictable , some random numbers cannot be reproduced. PRNG uses mathematical algorithm which are computer based. Its logical which uses mathematical formulas to generate sequence of random number. Some random number can be produced.",
      "student_answer": "True random number generator generates completely random sequence which do not follows any set of rules and are hence non -reproducible. Pseudo random number generators generate non repeating sequences according a to a set of rules and are hence reproducible."
    },
    {
      "question_id": "40",
      "model_score": 34.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "**FALSE**, Writes using fd[1] can be read using fd[0] because it writes to the read end using which we can use wc -c < fd[0] to read and for send, we can use echo \"data\" > fd[1] which will write to the write end."
    },
    {
      "question_id": "42",
      "model_score": 85.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse. This is done by the scheduler and not by the user process since it is present in the user privilege level."
    },
    {
      "question_id": "65",
      "model_score": 18.1,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. There maybe situations where the developer only wants the user to"
    },
    {
      "question_id": "104",
      "model_score": 22.7,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Context Switch: User process can't do context switch without the help of OS. OS will know the context a scheduler and other processes.\n\nMemory allocation: Whenever a process wants to increase its size it needs to call shall() because the user doesn't have access to freelist and more."
    },
    {
      "question_id": "76",
      "model_score": 7.8,
      "human_score": 0.0,
      "question": "What are the two important aspects of reservoir routing under a flood control criterion?",
      "instructor_answer": "peak discharge reduced and\n peak flow gets shifted",
      "student_answer": "1) Design of capacity of spillway or other reservoir outlet design\n2) Location and sizing of the capacity of reservoir to meet specific requirements"
    },
    {
      "question_id": "46",
      "model_score": -2.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "None"
    },
    {
      "question_id": "88",
      "model_score": 69.1,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "To assist in neutralisation and to equalise the flow"
    },
    {
      "question_id": "20",
      "model_score": 85.7,
      "human_score": 1.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "Intermittent streams are those, who have temporary or seasonal rivers or streams and expected to flow every year or at least more than one time in every five years. Ephemeral streams are those streams which flows only during & following a period of rainfall in the immediate locality."
    },
    {
      "question_id": "44",
      "model_score": 48.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFALSE. Earlier cooperative model was used without timer interrupt where regular interrupts were expected."
    },
    {
      "question_id": "43",
      "model_score": 76.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse. It is not necessary that the control returns back to the same paused process. For example, in case of the timer interrupt the control doesn't necessarily return to the same process."
    },
    {
      "question_id": "65",
      "model_score": 67.6,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Defining member functions inside the class body increases its size a lot. Readers would like to see the set of member functions of the class fit in one screen. This improves readability. \n\n2. The principle of writing small amount of code and testing to see if it works is enabled by seperating definition and declaration. We may just declare the function in a class without worrying about implementing it at the same time.\n\n3. Declarations enable making virtual functions and interface classes (a class in which all member functions are only virtually declared, not defined) which is a crucial part of OOP. "
    },
    {
      "question_id": "97",
      "model_score": 77.7,
      "human_score": 0.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "1)workpiece material properties\n2) Cutting parameter"
    },
    {
      "question_id": "80",
      "model_score": 38.2,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "same properties in mutually perpendicular directions"
    },
    {
      "question_id": "102",
      "model_score": 67.5,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "amplitude of oscillation, frequency of oscillation, number of particles in the slurry per unit volume"
    },
    {
      "question_id": "72",
      "model_score": 43.7,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "for space applicationes high quality images are required for critical analysis. But compression ocurrs at the cost of quality. Due to the degradation of quality og image due to high compression ratio, the resolution will decrease."
    },
    {
      "question_id": "98",
      "model_score": 47.1,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "provides thermal stability to tool"
    },
    {
      "question_id": "63",
      "model_score": 71.7,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Green color is around 120 degree Hue, and there is broad shades of green in the image we can choose 120-140 degrees range for green color. Since there are both dark and bright stem and leaves, we can select Intensity to be broad range of 0-1. For saturation we can choose narrow range of 0-0.2 as the natural green is generally pure"
    },
    {
      "question_id": "43",
      "model_score": 28.4,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False, It cannot happen always. It may be terminated also."
    },
    {
      "question_id": "35",
      "model_score": 85.5,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Drip Irrigation, Sprinkler Irrigation, furrow irrigation"
    },
    {
      "question_id": "25",
      "model_score": 86.6,
      "human_score": 2.0,
      "question": "Full form of ELISA is ____________________.",
      "instructor_answer": "Enzyme linked immunosorbent assay",
      "student_answer": "Enzyme Linked inmuno sorbent assay"
    },
    {
      "question_id": "94",
      "model_score": 63.8,
      "human_score": 1.0,
      "question": "Why for an asymmetric variable, median is the best measure of central tendency?",
      "instructor_answer": "because around median 50 percent of the distribution is on the left and 50 percent is on the right , so in case of asymmetrial distribution where it is skewed, median will be the best measure of central tendency as mean in case of assymetrical distribution is not accurate measure of central tendency",
      "student_answer": "It gives 50 th percentile value or it gives the average value of the sample considering the asymmetry or skewness"
    },
    {
      "question_id": "49",
      "model_score": 27.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False - when a program instantiates more than one process, it is creating child processes with different parents.\n PDs: items a new PCB is used (which, although being a copy of the parents, is not the same)."
    },
    {
      "question_id": "74",
      "model_score": 58.8,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "Increase in number of hidden layer make the computation complex and will take lot of time. It will be difficult to find exact global minimum, there will be more local minima."
    },
    {
      "question_id": "65",
      "model_score": 48.7,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. we can see what all member functions are available in one place without cluttering (like an instructions manual)\n2.if they are separated into different classes then various versions "
    },
    {
      "question_id": "64",
      "model_score": 28.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360 degrees for H"
    },
    {
      "question_id": "68",
      "model_score": 70.2,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "when the inherent data is complex, a multilayer network would perform much better than a single layer since it would be able to fit a much complex model. a deeper network offers a perfect balance between network width and depth which ensures that network training is faster and efficient as compared to single layer case"
    },
    {
      "question_id": "15",
      "model_score": 52.6,
      "human_score": 1.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "It is characterized by deficiency in the rainfall"
    },
    {
      "question_id": "104",
      "model_score": 40.5,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) mmap() \nCopy to modified memory\n2) int fd = open(...); // fd is made only Readonly mode\nwhile(1) {\n   char *ptr;\n   //ptr = mmap(...); // gives error bcoz its not allowed to do \n   //copying to whatever u want beacuse its not accepted by OS\n}\n3) int arr[10];\narr[100] = 1000; //Segmentation fault (SEGV)\n//Prevented memory access"
    },
    {
      "question_id": "50",
      "model_score": 5.1,
      "human_score": 0.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "we can reduce the peak discharge by increasing base time"
    },
    {
      "question_id": "42",
      "model_score": 55.9,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse. A process has no control/info about it. \n"
    },
    {
      "question_id": "53",
      "model_score": 39.4,
      "human_score": 0.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Features for Roads may be one are Ring road, straight road, well constructed road and highway."
    },
    {
      "question_id": "46",
      "model_score": 84.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue. In cases where the program traps into the OS has a chance to schedule other processes.\n"
    },
    {
      "question_id": "60",
      "model_score": 87.3,
      "human_score": 2.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "Windrow, Aerated pile or windrow and In-vessel composting"
    },
    {
      "question_id": "47",
      "model_score": 5.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "**True**"
    },
    {
      "question_id": "42",
      "model_score": 29.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "False, The timer interrupt device only has the power to schedule the timer switch (instead of I/O interrupts) voluntarily which cannot be changed by other processes."
    },
    {
      "question_id": "43",
      "model_score": 83.3,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "FALSE Eg. During a timer interrupt, the context is switched and a different process gets scheduled instead."
    },
    {
      "question_id": "39",
      "model_score": 97.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse, we can use write on fd[1] , read on fd[0] but not vice-versa."
    },
    {
      "question_id": "49",
      "model_score": 83.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. They cannot use the same PCB because they\n have different aip and stack pointers\n (Instruction pointers)"
    },
    {
      "question_id": "68",
      "model_score": 38.0,
      "human_score": 0.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "multilayer perceptron neural network with multiple hidden layers is desirable when we need to take input from variables and give an output. this can be done using the input and output layers."
    },
    {
      "question_id": "65",
      "model_score": 60.1,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.) When declaration is separated from definition, then names of all the member functions inside a particular class can be found at the same place and it would make the body of the class look less cumbersome.\n2.) When the functions are declared first and then defined later, then during defining a particular member function, we can use the other member functions of the class too inside this function's definition as they were already declared earlier and hence there will be no error. \n3.) Instead of writing a single long function, we can divide "
    },
    {
      "question_id": "22",
      "model_score": 14.5,
      "human_score": 0.0,
      "question": "During coagulation process alkalinity reduces due to the ___________________________",
      "instructor_answer": "As coagulation is done,the OH- tend to form more bonds with the molecules in the sample, and H+ concentration increases which lowers the pH level.",
      "student_answer": "sweep flocolation. CO3- precipitates reducing alkalinity"
    },
    {
      "question_id": "47",
      "model_score": 55.1,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "Ans: TRUE -> exec system call can be used before  process parent terminates."
    },
    {
      "question_id": "26",
      "model_score": 62.9,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "Machining of gears and holes with max precision"
    },
    {
      "question_id": "41",
      "model_score": 89.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue - According to the policy followed, some other process may be given higher preference post interrupt. Eg: If smallest completion time first is followed post interrupt, without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.\n"
    },
    {
      "question_id": "41",
      "model_score": 32.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue: The scheduler may decide to schedule another process due to the exec system call replacing the image of the parent process before the child process terminates.\n"
    },
    {
      "question_id": "64",
      "model_score": 65.5,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To sample Red, we can take Hue (H) in a narrow range around 45       or 315      . Then we can adjust the angle values depending on the Saturation, which should be close to 1 for the segmented rose petals. We concentrate more on Hue as it contains the color information and petals are mostly red (excluding the shadows on them)."
    },
    {
      "question_id": "80",
      "model_score": 65.5,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "material properties differ along three mutually perpendicular directions"
    },
    {
      "question_id": "104",
      "model_score": 38.7,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Reading the page table of bar process.\nModifying\n- This is allowed but say this is allowed then like user process can modify its page table in such a way that it can read data of different process.\n\nSpawn a new process or schedule a new process with privilege higher than user for example root.\n-"
    },
    {
      "question_id": "15",
      "model_score": 47.7,
      "human_score": 0.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "It is drought which is predicated by considering meteorological aspects"
    },
    {
      "question_id": "87",
      "model_score": 66.0,
      "human_score": 1.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "A mat of biological organisms and aids in filtration process."
    },
    {
      "question_id": "105",
      "model_score": 84.3,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False: The same instruction which caused page fault is executed. After that the next instruction will be executed."
    },
    {
      "question_id": "9",
      "model_score": 95.4,
      "human_score": 2.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "perpetual growth rate and WACC"
    },
    {
      "question_id": "41",
      "model_score": 34.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTRUE, the process was interrupted so that some other process can run hence it can only be scheduled after some other process.\n"
    },
    {
      "question_id": "49",
      "model_score": 61.5,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Different processes have different PCB, it no copy-on-write optimization."
    },
    {
      "question_id": "65",
      "model_score": 41.2,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) when the base functions are declare"
    },
    {
      "question_id": "64",
      "model_score": 28.3,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0/360 degrees for H"
    },
    {
      "question_id": "92",
      "model_score": 61.8,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Image analysis applications like image stitching, people detecting applications etc, benefit from interest points like corners, and the best methed used in such cases are HOG and SIFT decriptor."
    },
    {
      "question_id": "9",
      "model_score": 95.4,
      "human_score": 2.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "perpetual Growth rate and WACC"
    },
    {
      "question_id": "43",
      "model_score": 81.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False. The process context is stored on the kernel stack when the interrupt is moved to the READY state, where it will wait for the OS to schedule it."
    },
    {
      "question_id": "43",
      "model_score": 17.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False, True, done using iret."
    },
    {
      "question_id": "65",
      "model_score": 44.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Program looks structured. Defining a member function at the place of its declaration gives an untidy look to the program. Also, while revewin"
    },
    {
      "question_id": "42",
      "model_score": 12.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "Yes, can be done using exec"
    },
    {
      "question_id": "25",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Full form of ELISA is ____________________.",
      "instructor_answer": "Enzyme linked immunosorbent assay",
      "student_answer": "enzyme linked immunosorbent assay"
    },
    {
      "question_id": "90",
      "model_score": 71.3,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Non linearity tranformation of feature vectors are useful because a linear combination of linear function of features will be linear. Now, since multi-layered classification (perceptron) generally uses non -linear activation functions like sigmoid, if features were linearly transformed, perceptron might not be able to learn relationships. Hence non-linearity transformation is preferable."
    },
    {
      "question_id": "99",
      "model_score": 42.7,
      "human_score": 2.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "Difficult to Coat complex shapes"
    },
    {
      "question_id": "106",
      "model_score": 64.1,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " - For the child process, the value of eax stored in the trap frame generated for it is explicitly set to 0, and otherwise the trap frame is identical to that of the parent.\n- After fork finishes, the kernel calls the scheduler which may either call the parent or the child.\n- Whatever is called, add the return from task_instruction to an executed offset on the processes trap frame, is then executed, then changing mode back to kernel mode"
    },
    {
      "question_id": "70",
      "model_score": 20.7,
      "human_score": 1.0,
      "question": "What approach should be followed to find a reasonable probability distribution for a given time series?",
      "instructor_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanalysis the results\n",
      "student_answer": "1) Selection of a distribution\n2)Est\n3)"
    },
    {
      "question_id": "64",
      "model_score": 70.7,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Since rose petals are of dark red color, \nA narrow range around 0/360 degree for H. \nA broad range of I centered around 0.5.\nA broad range of S centered around 0.8."
    },
    {
      "question_id": "65",
      "model_score": 16.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "We can keep our code more generic.\nWe can instantiate multiple classes."
    },
    {
      "question_id": "72",
      "model_score": 44.2,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "The band limit for size of image is fixed for particular ground station, so we need to compress image to  a particular size."
    },
    {
      "question_id": "46",
      "model_score": 85.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nYes. True, there may be a possibility of a process waiting for input or maybe process exited then OS schedule, ready processes and shares cpu.\n"
    },
    {
      "question_id": "52",
      "model_score": 34.0,
      "human_score": 0.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a pressure that is put on something"
    },
    {
      "question_id": "89",
      "model_score": 57.8,
      "human_score": 1.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "It can be useful for those catchment areas where much details are not available , area can be used to calculate uh for ungauged basins"
    },
    {
      "question_id": "47",
      "model_score": 89.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue: This is possible because the exec program that is run due to the exec call replaces the image of the parent, maintaining the same process ID."
    },
    {
      "question_id": "104",
      "model_score": 28.7,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) The process knows of the existence of certain signals like (SIGSTOP, SIGQUIT). The process can decide how it wants to interpret SIGSTOP, but the OS does not allow the process to interpret some other signals and forces the default action (eg SIGQUIT).\n2) The process knows its virtual address space and also what is allocated to it. Accessing unallocated pages will be treated as a violation (attempt to do a privileged action) and the OS will"
    },
    {
      "question_id": "64",
      "model_score": 56.0,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "\"a narrow range around 0      degrees for H\"\n\"a range around 0.75 to 1 for I\"(condition for I can be loosened a bit as some low intensities can exist),\n\"a range from [0, 0.15] and [0.85,1] for S\"(the lower range on S is mainly to capture blackish red portion in "
    },
    {
      "question_id": "73",
      "model_score": 68.1,
      "human_score": 1.0,
      "question": "What are the important details that have to be known prior for reservoir routing?",
      "instructor_answer": "storage volm vs elevation of reservoir\ninflow hydrograph \nwater surface elevation vs outflow\ninitial values of S,I and Q at t=0",
      "student_answer": "Reservoir Routing - we find (2          S/         T + Q) Vs Elevation profile and then use Q Vs Elevation profile to find S and Q for given conditions. Thus we need Elevation Vs Q beforehand and need storage characteristics as well"
    },
    {
      "question_id": "35",
      "model_score": 74.6,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Flooding method, sprinkler Method, Furrow method"
    },
    {
      "question_id": "91",
      "model_score": 7.3,
      "human_score": 0.0,
      "question": "What theorem do we use to prove symmetry of stiffness matrix",
      "instructor_answer": "Maxwell Betti Reciprocal Theorem",
      "student_answer": "Using symmetry of stress and strain tensors"
    },
    {
      "question_id": "64",
      "model_score": 53.6,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "narrow range around 0 deg for Hue channel,-5 to +5 deg"
    },
    {
      "question_id": "6",
      "model_score": 80.5,
      "human_score": 0.0,
      "question": "Chi-square goodness of fit test evaluates the error between (                                                                                   ) and (                                                                                   )                    (                                                                     )",
      "instructor_answer": "Observed and assumed/Estimated PDF",
      "student_answer": "actual pdf and theoretical pdf"
    },
    {
      "question_id": "104",
      "model_score": 13.0,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " If a user process does not know that a PCB exists, it can still allow a higher priority process to execute. Even in a pre-emptive way of execution of process, it will not wait for the allotted number of time for all the process before it gets completed.\nIn user process the user/programmer can do changes in the user process but it cannot do changes in process inside the kernel which can be specifically performed by OS."
    },
    {
      "question_id": "104",
      "model_score": 55.6,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " (i) Changing memory contents of unknown location / other process / kernel variables (PR  / privileged section) through LDC. An interrupt is given & the OS handles this bad memory access of the process & either terminates the process or simply avoid excess.\n(ii) Changing interrupt no's mapping  --> Like making timer interrupt point to 0x10 or any other value  --> privileged op. Otherwise all the OS settings can go haywire.\n(iii) Changing duration of note / timer interrupt interval  --> Privileged operation which OS stops\n(iv) Changing IDT values"
    },
    {
      "question_id": "65",
      "model_score": 54.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Makes the code more readable since"
    },
    {
      "question_id": "74",
      "model_score": 74.4,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "when hidden layers is very large, the normal network has lots of parameters and hence lot of complexity If this is unnecessary then the network quickly overfits and generalizes poorly."
    },
    {
      "question_id": "39",
      "model_score": 15.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "FALSE"
    },
    {
      "question_id": "33",
      "model_score": 86.8,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "through-fall and stem-flow"
    },
    {
      "question_id": "43",
      "model_score": 85.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFalse, the scheduler may schedule another process, in which case the context is saved and a context switch occurs.\n"
    },
    {
      "question_id": "53",
      "model_score": 78.8,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "If roads are to he classitied features such as the edges, lines. elongated shapes can be useful,\nAlso we can use , length of line, width of lines , neighbouring pixel class, etc."
    },
    {
      "question_id": "63",
      "model_score": 74.8,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "a narrow range around 120 in hue, a wide range 0.5-1 in saturation and wide range centered at 0.5 in intensity"
    },
    {
      "question_id": "64",
      "model_score": 74.9,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0degree, eg. 355degree to 5degree for H since the value of hue for red is 0 and magenta is at 300degree. Only hue thresholding is sufficient as the petals have red and magenta components while green and blue have different hue values."
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "constant capital structure"
    },
    {
      "question_id": "34",
      "model_score": 29.8,
      "human_score": 0.0,
      "question": "Key steps in anaerobic digestion process are                                                                                                                                                          .",
      "instructor_answer": "The four key stages of anaerobic digestion involve hydrolysis, acidogenesis, acetogenesis and methanogenesis.",
      "student_answer": "1. segregating and size-reduction\n2. adding nutrients, adjusting pH, heating reactor\n3. collection of biogas, purification and treatment of digestate(reduced product)"
    },
    {
      "question_id": "49",
      "model_score": 30.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False Each process corresponds to a unique page. This means the processes can be at different stages of execution (EP) at a given case. Thus the processes have to be isolated which also breaks"
    },
    {
      "question_id": "51",
      "model_score": 70.3,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "imperfection in crystal structure,  adsorption of charged ions on colloidal surface, ionizable groups in molecules that constitute the colloid"
    },
    {
      "question_id": "100",
      "model_score": 25.4,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "costly equipment, high maintenance cost, abrasive particles get embedded in the workpiece"
    },
    {
      "question_id": "51",
      "model_score": 64.3,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "The colloidal particles are electrically charged.\nReasons:\n1.surface ion charge : The surface contains ionogenic metals which give a met positive or negative charge depending on the pH\n2.Adsorption: Charges with opposite charge are adsorbed on the surface of colloids giving a net negative charge "
    },
    {
      "question_id": "67",
      "model_score": 99.8,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "method of moments & method of maximum likelihood"
    },
    {
      "question_id": "78",
      "model_score": 69.2,
      "human_score": 1.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "Storage Plant, Run of River Plant, Cascade Plant"
    },
    {
      "question_id": "40",
      "model_score": 53.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\n **TRUE**, because it has stack implementation. fd[0] is used to read and fd[1] to write. So when it will move the prev one entires as 0 and it wont set it. \n"
    },
    {
      "question_id": "42",
      "model_score": 66.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse. \nOnly the OS is capable of scheduling the processes and hence, in no way, restart the user-mode operation. \n"
    },
    {
      "question_id": "40",
      "model_score": 12.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nFalse. vice-versa is possible because they are just integers. It is just convention to use the above rule.\n"
    },
    {
      "question_id": "10",
      "model_score": 38.4,
      "human_score": 0.0,
      "question": "Define Priority Inversion in single line.",
      "instructor_answer": "a higher priority process not getting CPU due to a lower priority process, because the lower priority process holds a resource ",
      "student_answer": "changing the priority of a low priority task so that it won't go into starvation"
    },
    {
      "question_id": "67",
      "model_score": 99.6,
      "human_score": 2.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "Method of moments, Method of maximum likelihood"
    },
    {
      "question_id": "42",
      "model_score": 86.0,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse. The user process doesn't have the privilege to schedule processes. \n"
    },
    {
      "question_id": "20",
      "model_score": 99.9,
      "human_score": 2.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream."
    },
    {
      "question_id": "88",
      "model_score": 83.5,
      "human_score": 2.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "1)to balance fluctuations in flow or concentrations.\n2)to even out effect of periodic slug.\n3)to assist self neutralization."
    },
    {
      "question_id": "43",
      "model_score": 26.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nTrue, Take the case of stain. Once the required #input is given, process immediately continues from where it left off without the timer interrupt. \n"
    },
    {
      "question_id": "33",
      "model_score": 28.1,
      "human_score": 1.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "tripping flow , stem flow"
    },
    {
      "question_id": "104",
      "model_score": 51.6,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": "1) Trying to update a privileged register (say CR3) which it can try to do since user processes have the knowledge of the ISA provided by CPU"
    },
    {
      "question_id": "44",
      "model_score": 24.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "Considering every possible scenarios, unless its a fair world which it isn't, answer is True."
    },
    {
      "question_id": "49",
      "model_score": 20.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True. This is done so as not to waste CPU cycles.\n This is also the origin (reason) of creation of locks."
    },
    {
      "question_id": "98",
      "model_score": 38.0,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "Excellent wear resistance, "
    },
    {
      "question_id": "105",
      "model_score": 88.5,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False\nIn this case, the OS executes the faulting instruction again after handling the page fault."
    },
    {
      "question_id": "65",
      "model_score": 52.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) list of all the function names grouped together in one place for documentation purposes \n2) if we seperate dearation and difination we can keep functions in understandable way "
    },
    {
      "question_id": "45",
      "model_score": 34.7,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\n **FALSE**\n If PID is known,\n(i) This process can send a signal to that target process to run/continue and stop itself. Then the OS takes care of scheduling.\n"
    },
    {
      "question_id": "19",
      "model_score": 30.4,
      "human_score": 0.0,
      "question": "Describe the purpose of state DecideAction in adacrus node (max 2-3 lines).",
      "instructor_answer": "DecideAction node was used to decide which direction the bot should turn next like left/ right or take a U-turn depending on the state of the robot.",
      "student_answer": "if it bitwant to move single path even in zig zag and curve .this function is used"
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False: On a page fault, due to an unmapped physical page, the page fault is directed to a trap table and outputs an error, the next instruction doesn't run without handling the memory allocation error"
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "constant capital structure"
    },
    {
      "question_id": "72",
      "model_score": 36.0,
      "human_score": 0.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "There may be effect of errors in transmission of data. Unknown byte/pixel relationship. Space apps typically result in files of langer sizes which Can be a issue."
    },
    {
      "question_id": "44",
      "model_score": 11.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "**False**"
    },
    {
      "question_id": "60",
      "model_score": 55.9,
      "human_score": 1.0,
      "question": "The three types of composting systems are                                                                                                                                                                                     (not included vermi composting)",
      "instructor_answer": "Windrow, Static-aerated piles, In-vessel composting",
      "student_answer": "Windrow, Invessel, Single reactor"
    },
    {
      "question_id": "49",
      "model_score": 81.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, when different process use the same binary its pid will be different so pcb also different (assuming question meant running a binary program twice ~ independent terminals)\n if it meant fork even then pid's differ so pcb not same."
    },
    {
      "question_id": "44",
      "model_score": 82.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "**FALSE**. Even without the time interrupt, any syscall/ interrupt from process I/O devices ...the OS regains the control over CPU. It can reschedule processes during that time. But, this is not a guaranteed method."
    },
    {
      "question_id": "100",
      "model_score": 46.5,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "1)Low MRR\n2) Hazardous to operator"
    },
    {
      "question_id": "6",
      "model_score": 81.6,
      "human_score": 2.0,
      "question": "Chi-square goodness of fit test evaluates the error between (                                                                                   ) and (                                                                                   )                    (                                                                     )",
      "instructor_answer": "Observed and assumed/Estimated PDF",
      "student_answer": "observed, expected value"
    },
    {
      "question_id": "15",
      "model_score": 25.6,
      "human_score": 0.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "In a particular water year if the rainfall is less than 18 cm"
    },
    {
      "question_id": "65",
      "model_score": 70.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The class body becomes compact and more readable. \n2. The class body and the function implementations can be stored in different  files as the programs get larger and larger. "
    },
    {
      "question_id": "63",
      "model_score": 68.5,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "a narrow range around 120 degrees for H and a narrow range around 0 for I.\nTo segment the green leaves , we use a narrow range around 120 degrees for H. \nTo segment stem, we use low intensity areas , which is around 0 for I."
    },
    {
      "question_id": "63",
      "model_score": 46.2,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "1. Narrow range around 120 for H and 2. Narrow range around 1 for S and 3. Braod"
    },
    {
      "question_id": "98",
      "model_score": 43.6,
      "human_score": 1.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "good adhesion, toughness , resistance to chipping"
    },
    {
      "question_id": "42",
      "model_score": 66.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse. OS does that. An user process can't just directly initiate a context switch.\n"
    },
    {
      "question_id": "39",
      "model_score": 27.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "True, any end of the pipe can be written to and the other read."
    },
    {
      "question_id": "53",
      "model_score": 63.1,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "width of the roads, Colour of the road (muddy for small street and concreate colour for big roads)"
    },
    {
      "question_id": "53",
      "model_score": 77.4,
      "human_score": 2.0,
      "question": "Suppose a high-resolution image of an urban area is being captured from space. If the roads are to be put in different categories, what features may be useful?",
      "instructor_answer": "Possible features which could very wilh different types of roads are: Edge detection, Road width, length of the road, Color of the road . Road length between two junctions / dead ends. Road edges or shadows to classify bridges and flyovers. ",
      "student_answer": "Since roads are predominantly directional , edge detectors and boundary detectors features may be useful. Edge and boundary detectors can help with the classification of roads. contextual classification can be also help."
    },
    {
      "question_id": "52",
      "model_score": 97.1,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a change in length divided by initial length"
    },
    {
      "question_id": "49",
      "model_score": 76.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE\n These are two difference process, program is just a paperweight, its execution on CPU is what makes it a process. Yes, the code section & data (maybe) section are same in both PBS but the heap and stack may grow differently since 2 different execution influences -> different PBS."
    },
    {
      "question_id": "102",
      "model_score": 80.0,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "frequency, viscosity of slurry, vibrational amplitude, particle size"
    },
    {
      "question_id": "46",
      "model_score": 31.8,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nFALSE\nThere can be a process that takes full resources and doesn't end. So OS need to have time interrupt for scheduling other READY processes."
    },
    {
      "question_id": "87",
      "model_score": 60.2,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "formation of a layer called schmutzdecke"
    },
    {
      "question_id": "24",
      "model_score": 52.6,
      "human_score": 1.0,
      "question": "For cooling, the samples from oven or furnace are moved to desiccator primarily to                                                       ",
      "instructor_answer": "bring down the temperature without any type of condensation process or moisture addition from surrounding",
      "student_answer": "to cool evenly thorughout the heated sample"
    },
    {
      "question_id": "65",
      "model_score": 23.2,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.) the speed of compilation of or code becomes less thus our code working more efficiently.\n2.) "
    },
    {
      "question_id": "84",
      "model_score": 88.7,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "Functions like the XOR features are not linearly separable and they requise 2 lines to separate the data points. Hence a multilayer perceptron classifier is required to solve this issue instead of using just a single perceptron classifier."
    },
    {
      "question_id": "6",
      "model_score": 80.5,
      "human_score": 2.0,
      "question": "Chi-square goodness of fit test evaluates the error between (                                                                                   ) and (                                                                                   )                    (                                                                     )",
      "instructor_answer": "Observed and assumed/Estimated PDF",
      "student_answer": "observed value ; expected value"
    },
    {
      "question_id": "39",
      "model_score": 92.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse. fd[0] is used only for reading and fd[1] is used only for writing file descriptors."
    },
    {
      "question_id": "49",
      "model_score": 91.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. In a multitasking case, the same program might be executed by different processes but their PCB has to be different. A common example is fork, where the PCB is copied not shared."
    },
    {
      "question_id": "16",
      "model_score": 77.5,
      "human_score": 2.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "In a time series mnoise can be defined as a variations or fluctuations in time data. Two types of noise: White noise and red noise."
    },
    {
      "question_id": "86",
      "model_score": 45.2,
      "human_score": 0.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "The useful transformations are affline and not linear so last coordinate 1."
    },
    {
      "question_id": "65",
      "model_score": 69.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Separating class member function definitions from their declarations helps prevent class declaration from getting cluttered and makes it easier for the programmer to work upon. \n2. If declarations and definitions are kept separate, only a brief look from the reader would be required to understand the upper level functioning of the class, that is, the functions available for their use and their signatures/whether they are virtual or not. However, defining while declaring would make the code hard to understand and make sense of."
    },
    {
      "question_id": "106",
      "model_score": 65.6,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "on fork we create a PCA for child process with almost identical to parent process. In fork(), we point our induction pointers of childprocess to point to induction. we next initialize fdsr & and we return child process exactly like parent process i.e. by returning from trap handler of child process but because there is no pCA , trap-handling start all of that we have to create in folk and make sure our eip points to induction i.e next to folk, and copy stack content and all of that from parent process."
    },
    {
      "question_id": "42",
      "model_score": 29.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse, if it's possible then process will run on infinitely.\n"
    },
    {
      "question_id": "106",
      "model_score": 74.6,
      "human_score": 2.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " The kernel stack of the child process also contains the same trapframe as that\nof the parent, except that the return value of this system call, which"
    },
    {
      "question_id": "49",
      "model_score": 85.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": " False, a single program can instantiate and execute more than one process using e.g. fork() execv() in this situation the PCB of given processes are different (as instruction pointer will differ and others)"
    },
    {
      "question_id": "100",
      "model_score": 6.5,
      "human_score": 0.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "1. Depending Mixing rationtheb"
    },
    {
      "question_id": "65",
      "model_score": 68.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "Some      advantages of separating declaration from definition are:\n\n1) If declarations have been written together in the program, then when a user sees the code file, he'll have an easy time figuring out what all methods are available in the program. This leads to a \"good-looking\" program (maybe called clean/structured)\n\n2) Suppose I have two methods f() and g() wherein f wants to use g and g  wants to use f. then we have to declare them both together first and then we can use them within each other, otherwise we cannot. \n\ne.g. \nint f(int p);\nint g(int p);\n\n/*if we don't do the above declaration the following code will throw error. */\n\nint f(int p){\nif(p>0){ /* do something without g*/}\nelse{ return g(p); }\n}\nint g(int p){\nif(p>0){return f(p);}\nelse{/* do something without f */}\n}\n"
    },
    {
      "question_id": "66",
      "model_score": 72.3,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "market based and quick and convienent"
    },
    {
      "question_id": "70",
      "model_score": 42.3,
      "human_score": 2.0,
      "question": "What approach should be followed to find a reasonable probability distribution for a given time series?",
      "instructor_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanalysis the results\n",
      "student_answer": "1. observed the variations type from the date set.ie( linear or nonlinear)\n2. Find the mean, mode, variance and standard deviation.\n3. Find the kurtosis coefficient (k) if it is equal to 3 then the distribution"
    },
    {
      "question_id": "106",
      "model_score": 83.9,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "In the fork() syscall, when everything is being copied from parent to the child, it also creates a trapframe in the child process. The trapframe in the parent process has return value of 0 while in the newly allocated process (for the child), to rid of the kernel part of syscall is also copied when the child then gets scheduled, it sets a trapframe and kernel stack. It is an trap occurred from the child process as well and the trap has has been completely successfully executed with return value of 0. The child then sets up all of its CPU registers while moving from kernel mode to user mode and \"takes the value of function call\" fork() to be 0. It also copied eip from parent, and hence continues it's execution from that point onwards."
    },
    {
      "question_id": "92",
      "model_score": 43.1,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "A lot of image analysis application benefit from interest point like corners some of them are satellite images of roads and buildings."
    },
    {
      "question_id": "105",
      "model_score": 78.5,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "FALSE: Till the last line, it is correct. But after handling the fault, it resumes the faulting instruction, not the next car."
    },
    {
      "question_id": "47",
      "model_score": 10.9,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "False. We will never know. It is non deterministic."
    },
    {
      "question_id": "61",
      "model_score": 78.2,
      "human_score": 2.0,
      "question": "Three key principles of ISO series are                                             .,                                                                                                                              ...and                                                                                  .      ",
      "instructor_answer": "Consensus , Industrial wide applicability and Voluntary Nature",
      "student_answer": "concensus, industry wise applicability and volunteering nature"
    },
    {
      "question_id": "65",
      "model_score": 68.3,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)Makes it easier for the user to get a list of all functions at one place,that helps in builiding Application Programming interface.\n2)The user doesnt have to know the internal implementation, and hence separating declarations from definition also helps in avoiding unnecessary cluttering.\n3)If Declarations are to be changed later, then we can do so by changing only the file where the code for Declaration is written, however if it were to be Declared and defined elsewhere, the code has to be changed in all those places."
    },
    {
      "question_id": "106",
      "model_score": 45.4,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " In parent process, the return path from kernel mode to user mode happens via the trap/interrupt handler. Parent and child after fork, executes independently without sharing memory.\n\nIn case of child, while returning from kernel mode to the user mode, update TCB every time of execution."
    },
    {
      "question_id": "105",
      "model_score": 85.6,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, on asking memory , it increases virtual size and when a page fault occurs with valid VA with no PA mapping it allocates and maps the page and then execute the same instruction at which page fault occured"
    },
    {
      "question_id": "105",
      "model_score": 25.5,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True.\nIf the virtual address is valid, it will operate in kernel mode to allocate the physical pages with virtual addresses, hence the OS and then move onto the next instruction, providing an illusion to the process that it can directly access its given memory (abstracting the actual allocation and mapping)."
    },
    {
      "question_id": "66",
      "model_score": 65.9,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "Quick and convenient, current valuation based on market data"
    },
    {
      "question_id": "9",
      "model_score": 91.7,
      "human_score": 2.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "WACC; Perpetuity growth rate"
    },
    {
      "question_id": "87",
      "model_score": 75.2,
      "human_score": 1.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "Biological filtration mechanism"
    },
    {
      "question_id": "106",
      "model_score": 53.0,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "So whenever we call fork(), first the privilege mode changes to kernel mode for the parent process, then a new copy of the process is created i.e. child process, then when the process has to return from trap, then it returns to the child process."
    },
    {
      "question_id": "88",
      "model_score": 55.0,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "To stabilize fluctuations in water flow and head"
    },
    {
      "question_id": "28",
      "model_score": 7.4,
      "human_score": 0.0,
      "question": "How is regularized set operation helpful in solid modeling?",
      "instructor_answer": "boundaries are defined. no dangling edges. no edges are created extra and no edges are lost while taking intersection of two objects.Regularized set operation helps to follow the defined process in predefined sequence",
      "student_answer": "Cost effective and fast manufacturing"
    },
    {
      "question_id": "63",
      "model_score": 52.9,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "In H space narrow band around 120 degrees, broad range of I around 0.33, All values of S "
    },
    {
      "question_id": "35",
      "model_score": 56.4,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "1. sprinker irigation\n2. nozzle irigation\n3. Direct water head irrigation. (in rice) "
    },
    {
      "question_id": "46",
      "model_score": 25.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\n **FALSE**, timer interrupt will mostly used while program is running. This is not justification\n"
    },
    {
      "question_id": "71",
      "model_score": 72.7,
      "human_score": 1.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "dust particles like suspended clay"
    },
    {
      "question_id": "63",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low ."
    },
    {
      "question_id": "65",
      "model_score": 75.5,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Readability: Makes the code easier to read to the user, as he can now look at them as separate modules and the way they interact without worrying about their implementation\n\n2)Ease in creating Object Interactions: In languages such as C++, declaring before definition enables us to use any member function/variable inside any of the functions' definition without worrying about which function is defined first, as all of them have been declared and the compiler knows about them beforehand."
    },
    {
      "question_id": "39",
      "model_score": 85.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse, usage of pipe(pipefd) leads to creation of a pipe - pipefd[0] and pipefd[1] are ends of the pipe which are strictly read end & write end respectively.\n"
    },
    {
      "question_id": "106",
      "model_score": 61.6,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "The trap happens in the parent process after it calls fork() system call. In the kernel mode, a new instance of program is created with a new register"
    },
    {
      "question_id": "40",
      "model_score": 94.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTRUE. after calling pipe on fd the system call is designed in such a way that the first address is Readonly and next one is write only so Write using fd[1] and read using fd[0]"
    },
    {
      "question_id": "64",
      "model_score": 73.8,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue in narrow range around 0 degree and intensity in broad range around 0.33 as some petals are in shadow while others in sunlight"
    },
    {
      "question_id": "41",
      "model_score": 34.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue, once the CPU is interrupted, there may be other process currently running, so it should be in waiting state.\n"
    },
    {
      "question_id": "98",
      "model_score": 14.3,
      "human_score": 1.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "Improving the quality of product surface"
    },
    {
      "question_id": "50",
      "model_score": 51.0,
      "human_score": 1.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "linear reservoir is a function of outflow only.. therefore one function we have to take care of. here lag and attenuation both occurs ..\nbut in linear channel routing, flow passes with lag but without attenuation. and also it is a function of both inflow and outflow. "
    },
    {
      "question_id": "45",
      "model_score": 71.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTRUE, as it this allowed a pair of malicious processes would keep on exchanging each other and would prevent the CPU to be shared to other processes and hence prevent working of OS ideally.\n"
    },
    {
      "question_id": "65",
      "model_score": 65.5,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. It makes the overall appearance of the class good,because we can clearly see all the declarations at once and  also \nsuppose  we have many member functions defined in our class and if we declare and define all of them at the same place , it will be difficult for us to look for different member functions and we may have to scroll up or down so much to see what all functions were defined and what is their implementation.So it is a very good practice to separate declaration from definition.\n\n\n2."
    },
    {
      "question_id": "9",
      "model_score": 86.3,
      "human_score": 1.0,
      "question": "DCF based valuation is highly sensitive to ___________ and _____________",
      "instructor_answer": "perpetual growth rate and WACC (discount rate)",
      "student_answer": "Wacc and growth rates assumptions"
    },
    {
      "question_id": "65",
      "model_score": 60.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "It reduces the clutter and confusion while declaring variables and functions/member functions all at a place.\nIt also gives an additional advantage of scope as declaration would be separately done.\nA variable can be defined again(or it might be defined with different data) which can be easy to understand when definition and declaration are separate"
    },
    {
      "question_id": "14",
      "model_score": 55.2,
      "human_score": 1.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "kurtosis is a measure of whether the data are heavily tailed or light tailed relative to a normal distribution"
    },
    {
      "question_id": "64",
      "model_score": 57.0,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "a narrow range around 0 degrees for H, broad range around 0.5 for I, around 0.5-1 for S "
    },
    {
      "question_id": "41",
      "model_score": 18.8,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue, we can change the parent process using exec. Nothing as part of execution not using exec sys call in child is preferred since we can wait for child's execution then next process."
    },
    {
      "question_id": "74",
      "model_score": 65.7,
      "human_score": 1.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "When number of hidden layer is very large the computational complexity increases and takes too long to train the data than generalize poorly."
    },
    {
      "question_id": "75",
      "model_score": 54.0,
      "human_score": 2.0,
      "question": "What are the key assumptions of the Muskingum flood routing method?",
      "instructor_answer": "In Muskingum method k and x are assumed to be constant and doesn't change with respect to time but changes with respect to shape of the channel in reach.The relation between the outflow  discharge and the inflow discharge is linear in nature with a value of m = 1. weighing factor x = 1\nvalid for only channel routing.\n",
      "student_answer": "Assumptions - For channel Routing we use Continuity and Momentum equation hence assumptions related to frictionless boundary comes, apart from that we assume various parameters K, X and n to be constant with time, so temporal variations are neglected."
    },
    {
      "question_id": "52",
      "model_score": 94.7,
      "human_score": 2.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a dimensionless number which is given by change in length divided by original length"
    },
    {
      "question_id": "40",
      "model_score": 85.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTRUE: fd[0] is the read file descriptor fd[1] is the write \nUsually close the other descriptor before using one.\n"
    },
    {
      "question_id": "63",
      "model_score": 28.7,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "The leaves and stem are red (shades of red) in colour. Red colour has zero hue,maximum saturation i.e. one and low intensity( about one-third). So to segment the rose petals, a hue H can be taken in range of 0       to 60       , saturation S is in range of 0.5 to 1 , intensity I is in range of 1/3( pure red)  to 0.5 (light shades of red)."
    },
    {
      "question_id": "39",
      "model_score": 43.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\n **FALSE**\n By default fd[0] is used for writing and fd[1] for reading but they can be closed and opened accordingly for read or write."
    },
    {
      "question_id": "90",
      "model_score": 72.5,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "For non-linearly transforming feature vectors and project them to non-linear layer spaces where they can be linearly separated and easily classify."
    },
    {
      "question_id": "44",
      "model_score": 85.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse, OS can get syscall which will give control back to OS leading to sharing of CPU.\n"
    },
    {
      "question_id": "65",
      "model_score": 70.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. we could use our class Or function before it's definition if required without any error. \n\n2. It also help in making program look more elaborative as sometimes there are so many member functions in a class that declaring and defining them inside the class looks more messy. So it's better to declare and define seperately. "
    },
    {
      "question_id": "42",
      "model_score": 34.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nTRUE: can initiate, an initiation of the OS schedules the target process next, but default schedule is by context switch.\n"
    },
    {
      "question_id": "65",
      "model_score": 65.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Class declarations(without definition) act as a compact representation of what all variables and member functions it contains. This gives the user/programmer a compact idea of the class without having to go through implementation of its member functions.\n2. In very large programs,it is a good practice to declare a class in one header file and define all its member functions in a different file.This gives the programmer a higher level idea of what all is going on in the programme as now they can refer to the function definition file only when they want to see/make changes to the implementation of any function and they can refer to the class de whenever they want to get a general idea of the class."
    },
    {
      "question_id": "31",
      "model_score": 71.5,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "In case of single discriminant function, we can divide the output space of the function into buckets or intervals. So if we have k classes, , we can have K-I thresholes a, , az, .. The input vector belongs to class p if the output of discriminant function is between ap-1, and ap"
    },
    {
      "question_id": "105",
      "model_score": 76.8,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False. It ~~an~~ executes from the same instruction which raised the page fault. Otherwise, that instruction will be skipped leading to garbage value in variable requiring that address."
    },
    {
      "question_id": "48",
      "model_score": 41.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFALSE. The exec system call executes a different program. The parent process can't do that - use exec to run another process without waiting for child to terminate."
    },
    {
      "question_id": "106",
      "model_score": 41.8,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " for the child process\nkernel mode to use mode\nreturn path\nwhat happens via parent process using wait call of any other\nprocess that sweep the orphan child process using \nwait system call.\nNo trap in child process -> taken care by parent/\nprocess that reaps it"
    },
    {
      "question_id": "91",
      "model_score": 99.0,
      "human_score": 2.0,
      "question": "What theorem do we use to prove symmetry of stiffness matrix",
      "instructor_answer": "Maxwell Betti Reciprocal Theorem",
      "student_answer": "Maxwell-Betti reciprocal theorem"
    },
    {
      "question_id": "51",
      "model_score": 52.5,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1)cations and anions get adsorbed on the surface of the colloidal particles and give them a charge\n2)Hydroxl ions and carbonate ions get adsorbed on the surface of colloidal particles giving them a charge at certain ph\n"
    },
    {
      "question_id": "90",
      "model_score": 59.1,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "When the features are not linearly seperable, we use trick. Here, converted to higher dimensional space.  And after word, it is linearly separable. eg using hyperplane"
    },
    {
      "question_id": "65",
      "model_score": 42.8,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)The class definition is compact, and all the functions of the class are listed together.\n\n2)A function(A) defined before another function(B) can also call B because they have been declared before. Eg:\n\nCase 1: Gives error\n\nvoid A(){\nB();\n}\n\nvoid B()\n{\ncout << \"Hello World!;\n}\n\nint main()\n{ \nA();\nreturn 0;\n}\n\nCase 2: Works! (Prints Hello World)\n\nvoid A();\nvoid B();\n\nvoid A(){\nB();\n}\n\nvoid B(){\ncout << \" Hello World\";\n}\n\nint main()\n{\nA();\nreturn 0;\n}\n"
    },
    {
      "question_id": "104",
      "model_score": 16.2,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " (1) A user process may try to schedule itself on CPU even if it is not its turn to be scheduled. OS takes care of these cases using scheduling policy.\n(2) A user process may try to enter kernel mode. OS prevents this for safety, security and integrity of other processes and for humanity.\n\nThese are some privileged actions that a user process may try but due to isolation policy and security, OS handles them."
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "constant capital structure"
    },
    {
      "question_id": "49",
      "model_score": 90.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False.\n Even though the processes execute same program, each of these processes have different PCBs. Each of these processes will be treated differently by the OS and will be allotted their own PCBs."
    },
    {
      "question_id": "40",
      "model_score": 91.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "TRUE. fd[0] is the read end of the pipe and fd[1] is the write end. It is a half duplex mode of communication and hence can not be used in the reverse way."
    },
    {
      "question_id": "45",
      "model_score": 80.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "True. This is privileged operation and process doesn't have control on it."
    },
    {
      "question_id": "64",
      "model_score": 12.7,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "narrow range around H ("
    },
    {
      "question_id": "8",
      "model_score": 89.9,
      "human_score": 2.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1 was likely not a leader in any of the three terms, since it doesn't have full entries in any of the term"
    },
    {
      "question_id": "40",
      "model_score": -0.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "T"
    },
    {
      "question_id": "65",
      "model_score": 76.0,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) All the function declarations of the class are visible at once to us which makes the code more understandable and navigable.\n2) Seperates the abstraction from internal code and makes the code neater and easier to access.It Is an essential part of object oriented programming."
    },
    {
      "question_id": "49",
      "model_score": 89.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE\n All the processes have their\n specific PCB, because they\n need to save their registers before\n context switching, etc"
    },
    {
      "question_id": "43",
      "model_score": 76.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False. Once an interrupt occurs, control goes in kernel mode. Now, kernel may decide to run schedules and may cause context switch. No data loss occurs as context is saved by the OS. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking."
    },
    {
      "question_id": "43",
      "model_score": 22.5,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nAns) Yes, this is used to prevent data loss during execution of multiprocess.\n"
    },
    {
      "question_id": "100",
      "model_score": 44.6,
      "human_score": 1.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "Wearing of the nozzle tip, "
    },
    {
      "question_id": "44",
      "model_score": 29.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nTRUE. A malicious process can potentially take permanent control of the CPU, thus disabling the OS from regaining access to the CPU."
    },
    {
      "question_id": "105",
      "model_score": 88.1,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False. After resolving the page fault, the os executes the same instruction that had the page fault. The PC register doesn't change as there was no page fault and no stack underflow."
    },
    {
      "question_id": "16",
      "model_score": 55.9,
      "human_score": 1.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "The time series data is most commonly used for various hydrological means and the error occuring can be examined a they are called as noise in a time series data. the noise may be small on large depending upon the extend of error."
    },
    {
      "question_id": "105",
      "model_score": 36.6,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " FALSE TRUE; For the given process when a page fault occurs\nit jumps into the trap handler which can\nhave a specific value for trap number corresponding\nto a pagefault and then doesnot invoke the page fault\nhandler of the OS to map the corresponding\nPHY page after which the process spans"
    },
    {
      "question_id": "32",
      "model_score": 80.6,
      "human_score": 1.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "when there is steep slope region( or mountainous/submountanious region) occurs during flow of canal, canal fall is provided "
    },
    {
      "question_id": "22",
      "model_score": 13.5,
      "human_score": 0.0,
      "question": "During coagulation process alkalinity reduces due to the ___________________________",
      "instructor_answer": "As coagulation is done,the OH- tend to form more bonds with the molecules in the sample, and H+ concentration increases which lowers the pH level.",
      "student_answer": "absorption of basic substance from surrounding."
    },
    {
      "question_id": "97",
      "model_score": 42.0,
      "human_score": 1.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "rake angle, tool wear, workpiece hardness"
    },
    {
      "question_id": "99",
      "model_score": 36.8,
      "human_score": 1.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "The PVD method uses complex machines which in turn needs skilled operators and also higher costs"
    },
    {
      "question_id": "67",
      "model_score": 15.9,
      "human_score": 0.0,
      "question": "Two methods of estimating parameters of the probability distribution are      ",
      "instructor_answer": "Method of moments and Method of maximum likelihood",
      "student_answer": "probability paper method and goodness of fit test"
    },
    {
      "question_id": "97",
      "model_score": 96.4,
      "human_score": 2.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "depth of cut, hardness of workpiece"
    },
    {
      "question_id": "61",
      "model_score": 90.8,
      "human_score": 2.0,
      "question": "Three key principles of ISO series are                                             .,                                                                                                                              ...and                                                                                  .      ",
      "instructor_answer": "Consensus , Industrial wide applicability and Voluntary Nature",
      "student_answer": "Consensus,Industry wide application, Voluntary in nature"
    },
    {
      "question_id": "104",
      "model_score": 22.3,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. The user process could attempt to modify the contents of a file which takes special privileges to access and edit. For instance, the OS would prevent arbitrary changes made to certain configuration files in /sys/ by some particular user via the limited direct execution setup.\n\n2. The user process could attempt to access memory of another process, or worse, the kernel itself. The OS prevents this by performing checks and via the virtualization of memory."
    },
    {
      "question_id": "80",
      "model_score": 62.5,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "A material which requires 9 elastic constants"
    },
    {
      "question_id": "38",
      "model_score": 72.2,
      "human_score": 2.0,
      "question": "Open dumping of waste is a major practice in India. Two major environmental problems associated with are                                                                                                                                                                  ",
      "instructor_answer": "1.Leachate generation and mismanagement\n2.Release of GHGs due to anaerobic reactions\n3.Odour\n4.Insects and rodents infestation leading to public health issues",
      "student_answer": "Odour ,Leachate formation"
    },
    {
      "question_id": "91",
      "model_score": 81.9,
      "human_score": 1.0,
      "question": "What theorem do we use to prove symmetry of stiffness matrix",
      "instructor_answer": "Maxwell Betti Reciprocal Theorem",
      "student_answer": "Maxwell reciprocal theorem\n"
    },
    {
      "question_id": "56",
      "model_score": 97.4,
      "human_score": 2.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "Unbiased, consistency, efficiency, sufficiency"
    },
    {
      "question_id": "78",
      "model_score": 4.1,
      "human_score": 0.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "micro, mini, macro, small, big"
    },
    {
      "question_id": "15",
      "model_score": 44.0,
      "human_score": 2.0,
      "question": "Define meteorological drought.",
      "instructor_answer": "meteorological draught is caused by the condition leading from the excessive reduction in the level of ground water. This condition usually occurs at low rainfall area with excessive usage of ground water.",
      "student_answer": "The state of non availability of enough moisture or water in soil and lowering of water tabledue to increase in temperature"
    },
    {
      "question_id": "64",
      "model_score": 70.3,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petals: \nHue: wide range around 0 degrees. for rose petals red colour is the dominant one along with some dark shadows.\nSaturation: in the wide range from low to quite high. Lower because of the shadows, and high because of red colour. As red colour is a pure colour the saturation for red will be high.\nIntensity: Towards low side (0-0.45). Again low because of dark pixels and around .3-.4 because of red pixels, that is it will have mostly red values and other values to zeros that just means that intensity will be low.\n\nIf we were to ignore the dark shadows, "
    },
    {
      "question_id": "39",
      "model_score": 35.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\n **True**. Pipe can do both ways. but general convention is to read from fd[0] and write on fd[1]."
    },
    {
      "question_id": "45",
      "model_score": 85.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "**TRUE**. All context switches go through the OS; the OS's scheduler decides what (if any) to switch to, and then the user process cannot. Any context switch must go via trap-to-OS, and from there the user process has no control on the scheduling."
    },
    {
      "question_id": "44",
      "model_score": 0.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "None"
    },
    {
      "question_id": "26",
      "model_score": 48.8,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "Broaching is used in gearshift, connecting rods, bearings, pistons, "
    },
    {
      "question_id": "106",
      "model_score": 68.8,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "For the child process, during its creation of PCB, kernel stack there won't be any trap, so instead OS adds a return value 0 to the kernel stack of child process and changes it's state to runnable after adding it to the ptable. So now the child process don't need any trap handler to wake it. Scheduler normally runs this process."
    },
    {
      "question_id": "39",
      "model_score": 33.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse, The pipe syscall links the two file descriptors fd[0] and fd[1] in such a way that 'contents written on fd[0]' can be accessed directly from fd[1].\n\n"
    },
    {
      "question_id": "63",
      "model_score": 86.5,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Hue should be centered around 120 degrees for green color. Intensity should be unchanged. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, the saturation is low as the green color is not very pure."
    },
    {
      "question_id": "63",
      "model_score": 55.0,
      "human_score": 0.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "The leaves and stem are mostly green. Hence, a narrow range around "
    },
    {
      "question_id": "65",
      "model_score": 61.0,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. we can separate interface and implementation\n2.avoiding  problems with one definition rule we can write the needed definition when we are working with another code as per our requirements"
    },
    {
      "question_id": "35",
      "model_score": 81.5,
      "human_score": 2.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "drip irrigation, sprikler irrigation, furrow irrigation, canal irrigation"
    },
    {
      "question_id": "39",
      "model_score": 92.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "False. fd[0] is for reading and fd[1] is for writing and not vice-versa."
    },
    {
      "question_id": "88",
      "model_score": 75.9,
      "human_score": 2.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "to assist self neutralisation, to balance fluctuations in flow and concentration, to even out the effect of periodic sludge discharge from batch process "
    },
    {
      "question_id": "29",
      "model_score": 21.3,
      "human_score": 0.0,
      "question": "Hyetograph is a graph between ----------- and -----------------",
      "instructor_answer": "rainfall intensity and time",
      "student_answer": "intensity and frequency"
    },
    {
      "question_id": "65",
      "model_score": 60.8,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)The program becomes more structured.\nFor example, in the class vending machine, if the member functions are insert_coin, serve_drink etc, then their working is evident from their name, hence implementation can be defined elsewhere and it makes our program more structured.\nBasically, inline and outline functions make our programs easily readb\n2)"
    },
    {
      "question_id": "104",
      "model_score": 22.0,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. The process may attempt to perform I/O which is restricted\n2. The process may try to get more memory resources.\nBut they are prevented by OS/360 limited directed execution setup."
    },
    {
      "question_id": "69",
      "model_score": 59.5,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "it can continue to serve its purpose even it might be even after its limited extent even after its expiry of its economic life with additional facilities created with it."
    },
    {
      "question_id": "104",
      "model_score": 52.1,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Accessing other memory regions by providing the physical address directly.\nva to pa (memory virtualization)\nchanging register values on CPU."
    },
    {
      "question_id": "64",
      "model_score": 63.6,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue a broad range around 0 eg)-30 to 30\nFor I a Broad range around 0.5.\nFor saturation, the rose petals are natural images with high content of red so it sho"
    },
    {
      "question_id": "49",
      "model_score": 85.8,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, Each process in the CPU has a unique PCB with unique value of PID."
    },
    {
      "question_id": "65",
      "model_score": 67.4,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Code looks neater and easier to read when all the declarations are written together and all the definitions given later"
    },
    {
      "question_id": "42",
      "model_score": 91.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse. The scheduler policy decides which process to be the next. \n"
    },
    {
      "question_id": "31",
      "model_score": 51.5,
      "human_score": 1.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "The chosen descriminant function should returnan array of probabilities when the number of  classes is >2. For the case of two classes, a simpler discriminant function g(x) can be created which returns a positive value for one class and negative value for others."
    },
    {
      "question_id": "85",
      "model_score": 92.7,
      "human_score": 2.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "made no distinction between horizontal and vertical creep"
    },
    {
      "question_id": "102",
      "model_score": 76.9,
      "human_score": 2.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "Particle size, ultrasonic frequency, Vibration amplitude, fraction of abrasive"
    },
    {
      "question_id": "89",
      "model_score": 53.6,
      "human_score": 2.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "converts effective storm hyetograph into runoff hydrograph"
    },
    {
      "question_id": "36",
      "model_score": 61.8,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1) Extent of industrialization\n2) Population\n3) "
    },
    {
      "question_id": "45",
      "model_score": 28.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nFalse, The user process can switch the context from itself to another target process by using the 'SIGCONT' & 'SIGSTOP' signals.\n\n"
    },
    {
      "question_id": "106",
      "model_score": 50.9,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "For the child process, the return path from the kernel mode to the user mode goes almost similar as that of the parent process, but the two tasks are differentiated based on the signal checking i.e like checking for SIGINT/SIGTERM"
    },
    {
      "question_id": "58",
      "model_score": 74.1,
      "human_score": 2.0,
      "question": "The philosophies to define environmental management are                                                                                                            ",
      "instructor_answer": "Conservationism, Preservationism, Deep Ecology, Social Ecology",
      "student_answer": "environmental ethics like deep ecology, preservationism, conservationism, sustainable development (intergenerational equity)"
    },
    {
      "question_id": "6",
      "model_score": 79.0,
      "human_score": 2.0,
      "question": "Chi-square goodness of fit test evaluates the error between (                                                                                   ) and (                                                                                   )                    (                                                                     )",
      "instructor_answer": "Observed and assumed/Estimated PDF",
      "student_answer": "observed, assumed and pdf values"
    },
    {
      "question_id": "49",
      "model_score": 83.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False: A new process (i.e. PCB) is created for every instance of the binary program, as a process is literally an instance of a program"
    },
    {
      "question_id": "66",
      "model_score": 73.7,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "market based,\nquick and convenient"
    },
    {
      "question_id": "100",
      "model_score": 72.1,
      "human_score": 2.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "low mrr, taper and nozzle life is limited"
    },
    {
      "question_id": "64",
      "model_score": 91.9,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petals,\nH -- Narrow range around zero ( Red has hue of 0)\nS -- Close to 1 (Red is primary color and all primary colors are pure colors)\nI -- Broad range / Almost full range (This to handle both dark and bright regions of the rose petals)"
    },
    {
      "question_id": "89",
      "model_score": 86.2,
      "human_score": 2.0,
      "question": "What is the significance of the time-area method?",
      "instructor_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph). It is significant for larger catchments since it takes into account processes in smaller regions individually.",
      "student_answer": "Time Area Method is used in hydrologic routing which enables us to create runoff hydrographs using storm's intensity vs time curve (hyetograph)."
    },
    {
      "question_id": "32",
      "model_score": 87.0,
      "human_score": 2.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "Canal falls are provided when natural slope of the country is steeper than longitudinal slope provided in the irrigation channel."
    },
    {
      "question_id": "72",
      "model_score": 33.4,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "Offline systems have the advantage to learn the optimal compression parameters for a high compression ratio with sufficient quality. But for online compression system, optimal parameters may not be known resulting in not so good compression."
    },
    {
      "question_id": "39",
      "model_score": 96.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse. Writes on fd[1] only and reads from fd[0] only.\n"
    },
    {
      "question_id": "11",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "Define Slutzsky-Yule effect",
      "instructor_answer": "This effect states that summation or average of random series may generate osscilations when no such movements exist in the original set of data.",
      "student_answer": "This effect states that summation or average of random series may generate osscilations when no such movements exist in the original set of data."
    },
    {
      "question_id": "7",
      "model_score": 34.1,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "Riping off the topmost finest layer with biological outgrowth\n"
    },
    {
      "question_id": "26",
      "model_score": 10.2,
      "human_score": 0.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "in slicing of objects layers"
    },
    {
      "question_id": "35",
      "model_score": 71.6,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "localised irrigation, drip irrigation, sprinkler irrigation, centre pivot irrigation, sub irrigation, overhead irrigation"
    },
    {
      "question_id": "40",
      "model_score": 14.2,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue. Because that's how a stack works.\n"
    },
    {
      "question_id": "26",
      "model_score": 52.9,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "making circular or no circular holes, screws, keyways, splines etc"
    },
    {
      "question_id": "7",
      "model_score": 39.8,
      "human_score": 1.0,
      "question": "Cleaning of slow sand filter is done by                                                                ",
      "instructor_answer": "Cleaning is usually done by scraping the medium followed by washing. When the Schmutzdecke becomes uncontrollable upper 1-2cm are cut off from the medium and then it is washed.",
      "student_answer": "removing the top few centimetres of sand layer."
    },
    {
      "question_id": "47",
      "model_score": 38.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue, exec system call would be run in either the parent or child process y exec does not process a specific PID."
    },
    {
      "question_id": "85",
      "model_score": 32.3,
      "human_score": 0.0,
      "question": "What is the major drawback of Bligh         s creep theory?       _______________",
      "instructor_answer": "No distinction between horizontal and vertical creep lengths\n",
      "student_answer": "losses of head does not take place in the same proportions as the creep length"
    },
    {
      "question_id": "48",
      "model_score": 90.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False. It's fine if the parent process executes using exec, the ppid of child remains same, and the child copies all necessary info already to its address space."
    },
    {
      "question_id": "41",
      "model_score": 55.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\n **TRUE**\n The process may undergo a context switch as the OS scheduler schedules a different process."
    },
    {
      "question_id": "104",
      "model_score": 20.2,
      "human_score": 2.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1. Accessing the base or bound value {Accessing out of range memory}\n2. Changing the value of time interrupt {Taking CPU time unfairly}\n3. Changing the PID of the process."
    },
    {
      "question_id": "64",
      "model_score": 77.7,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue a narrow range around 0 eg)-15 to 15\nFor I a Broad range around 0.7( As pure color has intensity near to 1).\nFor saturation, the rose petals are natural images with high content of red so it should be a broad range around 0.8\ni.e. 0.6-1.0"
    },
    {
      "question_id": "106",
      "model_score": 74.0,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " fork() system call creates the child process by copying the whole virtual memory of the parent process onto another physical address and map these two. So basically the for child process uses the same trap table but different physical memory allocated to them. \n\nfork() call -> Allocates memory to the child process.\nCopies the PC instruction pointer.\nCopies the registers and also copies the trap state.\nAll the registers are stored on the kernel stack of child process.\n\nWhen the child process is scheduled to run. Then the kernel transfers control from trap instruction and this wakes all the registers stored on the context of child to be given to the"
    },
    {
      "question_id": "1",
      "model_score": 85.2,
      "human_score": 1.0,
      "question": "\nStrong assumption of EV-DCF      method of valuation is _________________",
      "instructor_answer": "company's capital structure remains same over the projection period",
      "student_answer": "constant capital structure"
    },
    {
      "question_id": "71",
      "model_score": 83.6,
      "human_score": 1.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "dust particles (clay, organic salts)"
    },
    {
      "question_id": "92",
      "model_score": 68.5,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Corner detection is useful because we need to match images that we recognize , invariant of rotation, translation, scaling and lightening conditions. An object is an image can be easily selected if we can correctly indentify corners and edges in the image."
    },
    {
      "question_id": "68",
      "model_score": 60.5,
      "human_score": 0.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "MLP can fit every function mostly of interest up to an arbitary low error margin if the layer has enough neurons. although if we need less error than above state, we will need more layer, but the parameters will increase significantly along with execution time. hence, when minimizing error margin is goal, we can use more than 1 layers."
    },
    {
      "question_id": "16",
      "model_score": 65.3,
      "human_score": 1.0,
      "question": "Define noise in a time-series data",
      "instructor_answer": "Noise means random fluctuations in time series data about its typical pattern. Two types of noise: White noise and red noise.",
      "student_answer": "Noise in a time series is the amount of oscillations, generally the low oscillations is known as noise. Noise can be removed by using moving average method. Moving average minimizes the noise and make the time series curve smooth."
    },
    {
      "question_id": "64",
      "model_score": 46.8,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "\"a narrow range around 0      degrees for H\"\n\"a range around 0.75 to 1 for I\"(condition for I can be loosened a bit),\n\"a range from [0, 0.15] and [0.85,1] for S\""
    },
    {
      "question_id": "46",
      "model_score": 54.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "True Without the timer interrupt, the co-operative processes are not to be too long or infinite, the OS still can schedule READY processes."
    },
    {
      "question_id": "64",
      "model_score": 76.5,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Hue: A narrow range around 0/360 degrees\nSat: High value, preferably more than 0.5 or 0.6\nIntensity: Can be of varying range for to presence of light and dark areas in petals"
    },
    {
      "question_id": "99",
      "model_score": 60.9,
      "human_score": 2.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "It is costly as compared to other methods and is difficult to make complex shapes with finishing"
    },
    {
      "question_id": "63",
      "model_score": 66.9,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "An appropriate range around 120       H needs to be selected such that all green areas (leaves and stem) are segmented clearly. The suitable range has to be found empirically. \nThis should work as all stems and leaves are green in color. Furthermore, intensity can't be used as it varies from dark to light for both green and red. Saturation should also not be used as "
    },
    {
      "question_id": "49",
      "model_score": 88.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE:\n All processes have their own PCB. A binary program is just an image of the instructions and does not impose any such rules on multiple processes instantiated using it."
    },
    {
      "question_id": "33",
      "model_score": 20.3,
      "human_score": 0.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "Infiltration and Seepage"
    },
    {
      "question_id": "41",
      "model_score": 91.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "**TRUE**. Once the OS gets control after just after the interrupt, it runs a _scheduler_, which may or may not reschedule the same process. If it does not reschedule it, it is scheduled on completion of the handler."
    },
    {
      "question_id": "81",
      "model_score": 47.3,
      "human_score": 0.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "low eigen valeus in PCT denotes noise present in the data."
    },
    {
      "question_id": "51",
      "model_score": 15.4,
      "human_score": 0.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "ions in water,van der wal forces"
    },
    {
      "question_id": "41",
      "model_score": 92.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue. If the interrupt puts it in a blocking state, the scheduler may schedule another process and can reschedule the previous process whenever it doesn't  necessarily have to  be at the completion of the interrupt handler."
    },
    {
      "question_id": "74",
      "model_score": 77.4,
      "human_score": 2.0,
      "question": "What are the issues that arise when number of hidden layers is very large?",
      "instructor_answer": "when the number of hidden layer is very large then the model Contains the high varience problem and it contains overfitting problem due to which it is not able to generalise new unseen data and for training data, the error is less but for testing data, error is high. Back propagation becomes slow",
      "student_answer": "when no. of hidden layers, model although get trained well but generalizes poorly, generalization is poor due to overfitting of the model over training data. It takes large amount of time for model to process."
    },
    {
      "question_id": "49",
      "model_score": 23.2,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "True, use of fork does not create new PCB."
    },
    {
      "question_id": "42",
      "model_score": 23.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nTRUE. We can do so by sending a signal to pause that process which would change its status to BLOCKING"
    },
    {
      "question_id": "90",
      "model_score": 71.1,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "If the feature vector are non-linear transformed they can use different kernels to get well fitted with minimum errors to the model and give better result in classification."
    },
    {
      "question_id": "44",
      "model_score": 30.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nTRUE, the timer interrupt enables the OS to schedule READY processes and share the CPU for multitasking.\n"
    },
    {
      "question_id": "86",
      "model_score": 48.3,
      "human_score": 0.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "For projective geometry in 2D space we use homogeneous coordinates for 2D transformations as the projective geometry preserves the collinearity of points."
    },
    {
      "question_id": "39",
      "model_score": 15.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse"
    },
    {
      "question_id": "33",
      "model_score": 85.7,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "through fall, stem flow"
    },
    {
      "question_id": "86",
      "model_score": 36.4,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "Easy for Matrix implementation"
    },
    {
      "question_id": "65",
      "model_score": 68.4,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) when we specify interface to the user, then user can only see the declaration of functions and not the actual implementation, and can use the functions without looking whole 300-400 lines of code.\n2) we can declare functions inside the interface and make it as separate file. We can include that file wherever required and we can also define another subclass which inherits former class and override the function in it according to our need."
    },
    {
      "question_id": "38",
      "model_score": 60.4,
      "human_score": 1.0,
      "question": "Open dumping of waste is a major practice in India. Two major environmental problems associated with are                                                                                                                                                                  ",
      "instructor_answer": "1.Leachate generation and mismanagement\n2.Release of GHGs due to anaerobic reactions\n3.Odour\n4.Insects and rodents infestation leading to public health issues",
      "student_answer": "air pollution from emissions of small particulates and metals  , water pollution from leachate"
    },
    {
      "question_id": "34",
      "model_score": 34.1,
      "human_score": 0.0,
      "question": "Key steps in anaerobic digestion process are                                                                                                                                                          .",
      "instructor_answer": "The four key stages of anaerobic digestion involve hydrolysis, acidogenesis, acetogenesis and methanogenesis.",
      "student_answer": "Organic waste is treated through anaerobic process, \norganic waste is decomposed,\ndigestate is disposed"
    },
    {
      "question_id": "11",
      "model_score": 74.5,
      "human_score": 1.0,
      "question": "Define Slutzsky-Yule effect",
      "instructor_answer": "This effect states that summation or average of random series may generate osscilations when no such movements exist in the original set of data.",
      "student_answer": "Average of a random series may generate oscillations when no such movements exists in the original data"
    },
    {
      "question_id": "48",
      "model_score": 89.7,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "**FALSE**\n- The parent may not wait for child processes and go on calling 'exec', resulting in the situation of child going into the zombie state."
    },
    {
      "question_id": "63",
      "model_score": 74.6,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "\"a narrow range around 120      degrees for H\",(as for green color hue is 120 degrees)\n\"a range around 0.75 to 1 for I\",(condition on I is not that strict as intensity may vary a bit depending on RGB values)\n\"a range from [0, 0.15] and [0.85,1] for S\"(the lower range on S is due to the unsaturated part of blackish green region around the center and lower left of the image)."
    },
    {
      "question_id": "90",
      "model_score": 55.4,
      "human_score": 1.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "if 1 seperating hyperflare is not able to seperate input point then, transforming input feature/dimension into other dimention we can correctly classify the Input vector."
    },
    {
      "question_id": "33",
      "model_score": 85.3,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "stem flow & through fall"
    },
    {
      "question_id": "78",
      "model_score": 77.2,
      "human_score": 2.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "storage, cascade, pumped storage, runof river"
    },
    {
      "question_id": "105",
      "model_score": 77.6,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " False, it executes the same faulting instruction\nagain after handling the error. else, lazy allocation\nwould be a wrong policy\n*ptr = 23;\nptr is lazily allocated.\nIf it ignored this instruction after, it word save\n23 in memory"
    },
    {
      "question_id": "72",
      "model_score": 32.6,
      "human_score": 1.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "Quality of compressed image degrades with high ratio of compression so User will not get original image in critical issue of online compression systems in space application"
    },
    {
      "question_id": "104",
      "model_score": 18.3,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Opening/creating a file with a given name\nforking a new process.\nThese kind of actions are to be done with Sys calls which gives OS the ability to do it.\nusers alone can't do these."
    },
    {
      "question_id": "36",
      "model_score": 87.8,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1) Climatic conditions b\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available"
    },
    {
      "question_id": "40",
      "model_score": 2.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "TRUE"
    },
    {
      "question_id": "88",
      "model_score": 42.3,
      "human_score": 1.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "to neutralize the discharge from a batch  process"
    },
    {
      "question_id": "39",
      "model_score": 84.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[0] can be read using fd[0] or vice-versa (read on fd[1] and write on fd[0]).",
      "instructor_answer": "False, write can only be done on fd[1] and read can only be done from fd[0].",
      "student_answer": "\nFalse. Two descriptors are created but class fd[0] cannot be used to write by using fd[1]."
    },
    {
      "question_id": "63",
      "model_score": 60.3,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "narrow range of H around 120 degree, broad range of S around 0.5, broad range of I aound 0.5"
    },
    {
      "question_id": "70",
      "model_score": 49.8,
      "human_score": 2.0,
      "question": "What approach should be followed to find a reasonable probability distribution for a given time series?",
      "instructor_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanalysis the results\n",
      "student_answer": "First, we plot time series and histogram.\nAfter getting an idea about distribution using histogram, we can choose suitable PDF, based on variables like skewness (Pearson type-3 for skewed, log normal/ normal based on "
    },
    {
      "question_id": "17",
      "model_score": 98.4,
      "human_score": 2.0,
      "question": "Define reservoir area curve.",
      "instructor_answer": "It is a plot of water spread area vs the reservoir elevations",
      "student_answer": "It is the plot of water spread area v/s reservoir elevations"
    },
    {
      "question_id": "105",
      "model_score": 85.1,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False, Further After handling the page fault the same instruction is executed again which must be executed properly this time because of handling"
    },
    {
      "question_id": "93",
      "model_score": 29.8,
      "human_score": 1.0,
      "question": "Which statistical parameter influences the PMP estimation at large ------",
      "instructor_answer": "Maximum average annual precipitation and standard deviation of it",
      "student_answer": "average rainfall parameter"
    },
    {
      "question_id": "48",
      "model_score": 67.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse. The exec system call can still be used. However, it doesn't make a distinction between whether it is called from child or a parent."
    },
    {
      "question_id": "92",
      "model_score": 60.0,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Edge detection. (image analysis) applications benefited from interest points like corners. histogram of gradiant for corners we got good values."
    },
    {
      "question_id": "49",
      "model_score": 0.0,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "FALSE\n and RCS\n There will be two separate processes for each instance.\n Instances as pbs doesn't have any other reference counter.\n So that each can be scheduled separately."
    },
    {
      "question_id": "33",
      "model_score": 24.1,
      "human_score": 0.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "with along with the tree root(ways), drops from the tree"
    },
    {
      "question_id": "18",
      "model_score": 74.8,
      "human_score": 2.0,
      "question": "Define trap efficiency of a reservoir and write down the factors affecting the trap efficiency",
      "instructor_answer": "It is defined an the ratio of deposited sediment to the total sediment inflow for given period within the reservoir economic life time.Factors affecting the trap efficiency: Diameter of silt particles, size and weight and type of debrais. Wind flow direction. Shape of the dam.Topography of the dam structure. Material of the dam.",
      "student_answer": "Reservoir trap efficieny, is definied as the ratio of deposited and sediment to total sediment inflow for a given period within the reservoir. Factors affecting the trap efficiency are Properties of sediment particles, property of flowing water and detention time."
    },
    {
      "question_id": "69",
      "model_score": 64.1,
      "human_score": 1.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "The life of a Reservoir that ends when the reservoir minimum capacity falls below dead storage level due to silting. (represented in years)"
    },
    {
      "question_id": "55",
      "model_score": 92.8,
      "human_score": 2.0,
      "question": "The chemicals that are commonly used as an evaporation inhibitor",
      "instructor_answer": "Cetyl alcohol (hexadecanol) and Stearyl alcohol (octadecanol)",
      "student_answer": "cetyl alcohol and stearyl alcohol (octadecanol)"
    },
    {
      "question_id": "106",
      "model_score": 76.4,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " when process calls fork() it uses the eax register to store the pid of child in parent & in child it is set to zero.\nEvery thing except this is copied or shared across both PCB's.\nNow when this new child process is created it uses the trap frame of parent to create its new own trap frame & copies the return address from parent to itself.\nwhen it returns from kernel mode of child process it uses this return address that it has loaded on stack it uses kernel stack to return to its user mode."
    },
    {
      "question_id": "47",
      "model_score": -5.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "None"
    },
    {
      "question_id": "64",
      "model_score": 25.4,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "A broad range of H around 0/360"
    },
    {
      "question_id": "47",
      "model_score": 31.4,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nTrue"
    },
    {
      "question_id": "51",
      "model_score": 91.6,
      "human_score": 2.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1) ionisation of active sites such as OH and COOH groups depending on pH of medium\n2) Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative"
    },
    {
      "question_id": "68",
      "model_score": 33.4,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "multilayer perceptron neural network with multiple weights is desirable, when the training samples are not fit well and the corresponding weights has to be adjusted to have a better fit to the training data"
    },
    {
      "question_id": "64",
      "model_score": 42.1,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "H should be around 0-0.1\nS should be greater than 0.5\nI should be greater than 0.5"
    },
    {
      "question_id": "106",
      "model_score": 62.5,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " In the task() syscall, a new process is created and the stacks from the parent are copied to the new procs and the temp. pointer of the parent is also upadated to the temp frame of this new procs (child process).\nThis new frame is beth a h/w information like eip, cpl, return addr. the return value, where of system like ejp, c;\nThis along with the stacks (or kendl), has a thing kind of history of the process, i.e where does it return. the function stack which has been handled and that the child has is return in form ( it is subtask).\nNote: fork() also does other thing like setting custom value 60 and copying the fs-tables which have not been modified alone.\nAfter the fork(), the child process is in the RUNNABLE state and waits for the scheduler to schedule it."
    },
    {
      "question_id": "41",
      "model_score": 2.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "True."
    },
    {
      "question_id": "92",
      "model_score": 61.4,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "when interest points are 'corners' we use like Haris corner detector or Histogram of oriented gradients (HOG) to detect 'Corners' edges and flat regions. This can be particularly used to detect person or cars in an image hence they can be wed for image analysis applications like Object detection , human detection etc"
    },
    {
      "question_id": "50",
      "model_score": 70.1,
      "human_score": 1.0,
      "question": "Quote any one advantage of reservoir and channel flood routing each.",
      "instructor_answer": "Reservoir Routing: Can be used to estimate peak reservoir levels during flood and hence helps in construction of overflow channels to avoid nearby areas to submerge during floods.\n\nChannel Flood Routing: Helps in getting the flood-duration profile during a storm which helps in construction of bridges, transport control over channels, and considerations for bank-side development. ",
      "student_answer": "Reservoir Routing / Hydrologic Modelling- Uses continuity equation to find attenuated peak in case of flooding, so can be used in flood control.\nChannel Routing / Hydraulic Modelling - Uses continuity as well as momentum(st venant equation) to find outflow at a channel c/s based on I1, I2, Q1 (c1,c2,c3) which is required very frequently (based on say Muskingum routing)."
    },
    {
      "question_id": "46",
      "model_score": 89.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue. During system calls, OS do regain control over CPU which when it can do schedule READY processes & share the CPU.\n"
    },
    {
      "question_id": "106",
      "model_score": 85.5,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " While creating the new process for child process, \nOS creates the kernel stack of the process same as that of parent process, except that the return value. The kernel stack is designed in such a way as it had done a fork syscall. But now, when this child process is scheduled, it will load its context and then will return from trap all general purpose registers will be restored followed by 'iret' instruction, which takes the control to child process in user mode."
    },
    {
      "question_id": "63",
      "model_score": 53.1,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "narrow range of H around 120 degrees and a broad range of I around 0.3 to remove the whites in the background"
    },
    {
      "question_id": "71",
      "model_score": 56.6,
      "human_score": 1.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "dust particles, chemicals "
    },
    {
      "question_id": "8",
      "model_score": 82.1,
      "human_score": 2.0,
      "question": "Consider 5 replicas N1, N2, N3, N4, and N5 running the RAFT protocol to main- tain a consistently replicated log for some application. The nodes have received the fol- lowing entries: a, b, c in term 1, p, q, r s in term 2, and x, y, z in term 3. The content of the logs of nodes N1 to N4 are as follows. N1: (a, b, p, q, x, y), N2: (a, b, p, q, x, y, z),N3: (a, b, p, q, r, s), N4: (a, b, c). The log at N5 is not provided to you.\n\nWhich of the nodes was likely not a leader in any of the three terms? Justify your answer.",
      "instructor_answer": "In term 1 , N4 could have been the leader. In term 2, N3 could have been the leader. In term 3, N2 could have been the leader. N1 was never a leader",
      "student_answer": "N1 was likely not a leades in any of three Terms. Because In 1st term, N4 was having upto date log, N3 was having upto date log. in 2nd term N2 was having upto date log. In 3rd term, N1 was not having upto date log in any term."
    },
    {
      "question_id": "36",
      "model_score": 61.9,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1. quality of water which is being supplied.\n2. population per unit area.\n3. relative position of water consumption area and the water source("
    },
    {
      "question_id": "45",
      "model_score": 24.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nFalse. A process can initiate a system call which in turn causes a context switch although the actual context switch can only be performed by the OS. Eg: waitpid() if the parent wants to wait for the target process (child) to exit."
    },
    {
      "question_id": "41",
      "model_score": 36.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nFalse. Process scheduling is handled after servicing interrupts."
    },
    {
      "question_id": "90",
      "model_score": 75.1,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "If we are using a linear classifier to classify a Non linearly separable data. then we can't do that with linear classifier but we transform our feature vector into high-dimension using non-linear transformation we might be able to classify our data using linear classifier."
    },
    {
      "question_id": "99",
      "model_score": 49.1,
      "human_score": 2.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "difficulty with complex shape coating"
    },
    {
      "question_id": "64",
      "model_score": 64.4,
      "human_score": 0.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "HSI can decouple the color information and intensity information seperately. The values of HSI can be obtained from RGB and can be normalized so that range remains between 0 and 1 .  We can observe that the rose petals have a high intensity and a high hue. Normalized H should be in the range between 0 and 1/6 as it should be close to the red colour."
    },
    {
      "question_id": "33",
      "model_score": 57.4,
      "human_score": 1.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "free fall and leaves-stems-roots-earth"
    },
    {
      "question_id": "99",
      "model_score": 45.0,
      "human_score": 2.0,
      "question": "Write any limitation of PVD method.",
      "instructor_answer": "coating is thin in nature.  complex shapes are difficult to coat. It has high cost and low ouput.",
      "student_answer": "In PVD method, complex shapes are difficult to coat"
    },
    {
      "question_id": "46",
      "model_score": 27.6,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "FALSE Eg. Without the timer interrupt, a running process could put itself into an infinite loop and monopolize the CPU without being swapped out to the OS, thereby disallowing any other processes."
    },
    {
      "question_id": "33",
      "model_score": 89.4,
      "human_score": 2.0,
      "question": "Intercepted precipitation by trees reaches earth by __________ and ____________",
      "instructor_answer": "stem flow(flows through stems and branches) and through fall(water falling on earth through leaves)",
      "student_answer": "stem-flow, through-fall"
    },
    {
      "question_id": "43",
      "model_score": 34.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False, data space of other processes may be scheduled depending on the scheduler. There is no data loss."
    },
    {
      "question_id": "26",
      "model_score": 23.5,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "making slots for support"
    },
    {
      "question_id": "98",
      "model_score": 35.2,
      "human_score": 2.0,
      "question": "Write any advantage of using TiC/TiN as a tool coating material.",
      "instructor_answer": "excellent wear resistance\nthermal stability\nlow coefficient of friction\nimproves thermal transfer\nincreases tool life.",
      "student_answer": "Excellent wear resistance"
    },
    {
      "question_id": "41",
      "model_score": 74.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue, Scheduling policy may or may not choose this process\n"
    },
    {
      "question_id": "105",
      "model_score": 75.8,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. Handles the page-fault later."
    },
    {
      "question_id": "106",
      "model_score": 77.1,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " A: * When fork() syscall is made, the child process is almost identical to the parent process.\n* During fork(); allocproc is called where there are PCB is taken whose state is UNUSED then we update the PCB contents for this child process.\n* For o updating, the state of the child process set to the RUNNABLE state and then we copy all the PCB contents of the parent process to the child process (except the tf -> eax is set to 0) Then the child process is returned.\n* yield() is called where inside it the scheduler then there forkret is called and then the scheduler (i.e., scheduler) is called to run any other process to run.\n* If any other process is set to run means the child process will be run after sometime by context switch between the running processes and the child process.\n* During context switch the child process goes from kernel mode to the user mode and return-from-trap function is called where the child's kstack is restored and updated. The child is returned from forkret() so, the exact opposite to process of entering into the trap.\n\n(users mode)\nfork() (user mode)\nforkret()\n->\nkernel mode?\n(users mode)\nchild process\nforkret()"
    },
    {
      "question_id": "97",
      "model_score": 72.7,
      "human_score": 2.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "hardness of the workpiece \nDepth and width of chip"
    },
    {
      "question_id": "64",
      "model_score": 65.6,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Rose petals are red in colour. we know H=0 for red colour. intensity is (r+g+b)/3. Since red we are taking intensity is 1/3= 0.66. Hence we can take H in the range (-22.5, 22.5) centred around 0 and Intensity as (-0.7, 0.7). Saturation is maximum for red colour."
    },
    {
      "question_id": "106",
      "model_score": 0.9,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "4"
    },
    {
      "question_id": "84",
      "model_score": 77.8,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "Mullayer perceptron can easily handle the XOR problem as it is non linearly seperable with respect to inPut features whereas which is not the case with perceptron classifier which could work better for linearly separable"
    },
    {
      "question_id": "44",
      "model_score": 86.9,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse, explicit software interrupt can be used to schedule the READY processes. eg. slotted round-robin approach.\n"
    },
    {
      "question_id": "36",
      "model_score": 55.7,
      "human_score": 1.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1.The season and climate\n2. The time of the day\n3. Holidays\n4. Water tax and related taxes\n5.Purity of water"
    },
    {
      "question_id": "65",
      "model_score": 74.9,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.) We get the complete view of all members functions declared in class at once. So that we can have an idea of what functionalities are available for our data type.\n\n2.) Code looks good plus debugging becomes easier as it will be organized into different functions separated from each other so that we can focus on one function at a time."
    },
    {
      "question_id": "65",
      "model_score": 20.9,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. We can use the Base class to create a container to store all the instances of the subclasses. This reduces a lot of naming redundancies. Say, e.g:\n\nRectangle and Circle inherit the Shape class.\n\nvector<Shape*> shapes;\nshapes.push_back(new Rectangle());\nshapes.push_back(new Circle ());\n\nIf shape class has virtual functions, we can use dynamic binding and call all the functions in Circle/Rectangle we want, without refering to the internal contents of shapes vector. We can just make a call \"shapes[0].draw();\" and be sure that it will call Rectangle::draw();\n\n2. Separating declaration from definition also enables us to use dynamic binding and runtime polymorphism.  (Example of the same has been given above)\n\nIf we had "
    },
    {
      "question_id": "65",
      "model_score": 61.2,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) Different derieved classes can have different funtional implementation.\n2) Cleaner code i.e, "
    },
    {
      "question_id": "20",
      "model_score": 81.5,
      "human_score": 1.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "The intermittent streams have ground water flow contribution (or bed flow) contribution during wet period of year whereas the ephemeral streams lack base flow contribution. Generally, an ephemeral channel is active only for a short duration after a storm."
    },
    {
      "question_id": "26",
      "model_score": 8.7,
      "human_score": 0.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "cutting multiple layers at the same time"
    },
    {
      "question_id": "63",
      "model_score": 38.0,
      "human_score": 0.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "the hue should be from 10 degree to 90 degree as it represents the standard red colour. The value of intensity and saturation can be anything from 0.1 to 0.9 as there are different lighting conditions. more precisely some of the petals are exposed to light so they should have higher saturation. and the petals which are in shadow will have lower saturation."
    },
    {
      "question_id": "36",
      "model_score": 33.2,
      "human_score": 0.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "Temperature (more water needed on hot d"
    },
    {
      "question_id": "102",
      "model_score": 68.5,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "frequency, viscosity of slurry, vibrati"
    },
    {
      "question_id": "64",
      "model_score": 28.0,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "I range should be the full range 0 to 1\nSaturatio"
    },
    {
      "question_id": "65",
      "model_score": 77.3,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. The code is more organized and easy to read and understand. In case of function overloading, all the functions with same name but different signatures can be viewed at once.\n\n2. We can make the skeleton of the code first and appoint functions to do a particular job in the begginning which helps us code more efficiently. This way we can see first define functions and then work on them. "
    },
    {
      "question_id": "49",
      "model_score": 87.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False. Although the program instantiates processes, each process has its own PCB."
    },
    {
      "question_id": "106",
      "model_score": 62.8,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " For a child process, when k6\nWhen k6 parent process g\nWhen we get the second path of k6 treat parent\nprocess inside the second handles w.r.t parent\nprogram counter of u parent process into u\nchild process. As both u child and parent are\npotential, and k6 PC points to k6 return path.\nk6 return path of u procedure should be\nsame. Hence by copying k6 PC value,\nwhich points to this return path, wee and\nscheduling u child process, we execute this\nreturn instruction find and hence return\nfrom the child process."
    },
    {
      "question_id": "79",
      "model_score": 60.8,
      "human_score": 0.0,
      "question": "What do you mean by empirical equations?",
      "instructor_answer": "equations derived from experiments/observed data. they don't have a mathematical proof behind them",
      "student_answer": "equations derived from e"
    },
    {
      "question_id": "71",
      "model_score": 97.3,
      "human_score": 2.0,
      "question": "What are all the common materials that serve as nuclei for ice crystal formation?",
      "instructor_answer": "dust particles - clay minerals, organic and ordinary ocean salts",
      "student_answer": "dust particles (clay minerals, organic and ordinary ocean salt)"
    },
    {
      "question_id": "32",
      "model_score": 24.3,
      "human_score": 0.0,
      "question": "In what situation a canal fall is provided?",
      "instructor_answer": "When the natural slope of the region is more than the canal slope being provided.",
      "student_answer": "when there is too much of scouring and the downstram side is not floored"
    },
    {
      "question_id": "84",
      "model_score": 81.7,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "The xor function is a non-linear function. the perceptron classifier is a linear classifier and hence cannot learn the non -linear XOR function The multilayer perceptron introduces a degree of non-linearity and hence is able to learn the XOR well: Thus a multilayer perceptron performes much better on the XOR problem than a single  perceptron."
    },
    {
      "question_id": "84",
      "model_score": 72.0,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "A multilayer preceptron classifier has multiple layers, thus can account for non-linearity. This is not possible in case of perceptron classifier. Thus perceptron converge only can linearity separable data."
    },
    {
      "question_id": "105",
      "model_score": 87.5,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " FALSE. Let us assume the faulting instruction as Rd A=23.\nOnce the page fault is handled, the OS needs to re-execute the faulting Rd A=23 so that the next time A is read, the user sees a value of 23."
    },
    {
      "question_id": "68",
      "model_score": 50.1,
      "human_score": 1.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "if the predicted class is greater than 2. the perceptron NN will not work. also when network requires lot of features to learn."
    },
    {
      "question_id": "65",
      "model_score": 47.8,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1) It gives an interface approach to the class, displaying all its functions at once\n2) The bodies of the method may contain things taken fr"
    },
    {
      "question_id": "48",
      "model_score": 66.8,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False\nWe can call exec(), to child process exiting."
    },
    {
      "question_id": "97",
      "model_score": 62.7,
      "human_score": 1.0,
      "question": "Write      any two      factors      which influence      chatter.      ",
      "instructor_answer": "Depth of cut, Hardness of workpiece, width of cut",
      "student_answer": "overhang of workpiece, depth of cut, cutting velocity of tool"
    },
    {
      "question_id": "20",
      "model_score": 65.9,
      "human_score": 1.0,
      "question": "Differentiate between intermittent and ephemeral streams.",
      "instructor_answer": "Intermittent stream is a stream that has flowing water during certain times of the year, when ground water provides water for streamflow. During dry periods, these streams may not have flowing water. Run off from precipitation is supplemental source of water for stream flow. An Ephemeral stream has flowing water only during and for short duraton after precipitation events in a typical year. These are also referred as Streambed that are located above the water table year round and steams where ground water is not a source of water for the stream.",
      "student_answer": "intermittent steams flow available in seasons. (also refereed seasonal rivers) like monsoon season. Governed by certain base flow during high flow days/season. Ephemeral streams flow availabe during high flow only. Not governed by base flow."
    },
    {
      "question_id": "95",
      "model_score": 38.9,
      "human_score": 0.0,
      "question": "Why the steeper main streams results in the Hydrographs with smaller time base?",
      "instructor_answer": "Steeper basin streams allows the run off  to leave the basin quickly because of high slope.Time base means the amount of time for run off to leave the catchment after the storm. So, if there is steeper slope,  excess run off will get out  quickly. Hence time base reduces.",
      "student_answer": "As main streams are steeper, they change being stream flow results into erosion and deposition of soil/silt. It has faster velocity and particles/soil too large to be carried as suspended loads are bumped and pushed along stream bed."
    },
    {
      "question_id": "44",
      "model_score": 28.7,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "\nFalse. Context switching is called after every READY process is handled."
    },
    {
      "question_id": "43",
      "model_score": 77.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFALSE\nOn getting an interrupt a context switch happens and hence all data of the process is carefully stored. OS may start another process in the meantime.\n"
    },
    {
      "question_id": "46",
      "model_score": 27.1,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "False, without the timer interrupt, a running process will utilize the CPU until it gets into an infinite loop, in which case OS renews it may be in an infinite loop."
    },
    {
      "question_id": "106",
      "model_score": 21.7,
      "human_score": 0.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": "os changes or2 writes value to 0 and pid value in child and parent respectively."
    },
    {
      "question_id": "90",
      "model_score": 100.0,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets."
    },
    {
      "question_id": "27",
      "model_score": 60.2,
      "human_score": 2.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "cutting of graphite sheets or diamond,\nused in medical purposes such as removing mole, operation surgeries "
    },
    {
      "question_id": "87",
      "model_score": 83.5,
      "human_score": 2.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "bio filtration ie allowing the microorganisms to form and a thin layer on the sand (schmutzdecke) and allowing to remove viruses and bacteria is the"
    },
    {
      "question_id": "24",
      "model_score": 21.9,
      "human_score": 1.0,
      "question": "For cooling, the samples from oven or furnace are moved to desiccator primarily to                                                       ",
      "instructor_answer": "bring down the temperature without any type of condensation process or moisture addition from surrounding",
      "student_answer": "absorb the heat content of sample"
    },
    {
      "question_id": "45",
      "model_score": 78.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nSolution: True\nHigh privileged processes working on user mode which has not been given has the capability to maintain stability and security and hence it doesn't have the capability, also context-switching is a part of schedulers.\n"
    },
    {
      "question_id": "81",
      "model_score": 83.1,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "low eigen values signifies that there is little or no variance in the matrix, which means there are chances of high collinearity in the given high dimensional data."
    },
    {
      "question_id": "14",
      "model_score": 86.8,
      "human_score": 2.0,
      "question": "Define kurtosis coefficient of excess.",
      "instructor_answer": "difference between the kurtosis coefficient of its own (distribution itself) and the kurtosis coefficient of normal distribution.",
      "student_answer": "it is defined as the difference between its own kurtosis coefficient and kurtosis coefficient of the normal distribution\n"
    },
    {
      "question_id": "43",
      "model_score": 14.0,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\nFALSE"
    },
    {
      "question_id": "35",
      "model_score": 55.8,
      "human_score": 1.0,
      "question": "List down the types of irrigation methods? ________________",
      "instructor_answer": "Sprinkler Irrigation, Drip irrigation, Furrow Method, Flood Method ",
      "student_answer": "Sprinkle, Drip, Localized"
    },
    {
      "question_id": "104",
      "model_score": 24.7,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) System calls: sys calls are privileged actions that an user process may attempt to perform and which are prevented by the OS via limited-directed execution. On a syscall context is stored on kernel stack, switch to kernel mode, kernel handles syscall, restore context on scheduling, then change to user mode and run\n\n2) Disk read and write operations.\nKernel checks whether the permissions are granted or not for a file, then performs read and write to disk."
    },
    {
      "question_id": "80",
      "model_score": 46.9,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "A material whose properties are symmetry about 2 orthogonal planes."
    },
    {
      "question_id": "105",
      "model_score": 0.0,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": "False. On a page fault, trap handler handles this fault and the process is yielded ie process gives up the cpu. So after handling schedules runs highest priority process to run next. Above thing happens only when some process is scheduled."
    },
    {
      "question_id": "86",
      "model_score": 67.1,
      "human_score": 1.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "It can be used to represent non-affine transformation like Translation which is not possible if 2D coordinate representation is used. \nHomogeneous coordinates make it possible to represent infinity as well (using 0 in the last point instead of 1)"
    },
    {
      "question_id": "51",
      "model_score": 24.3,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1) It can induced by other particles by vander wall means\n2)in water the ions got stabalized so colloidal particles might be in state to that from earlier"
    },
    {
      "question_id": "63",
      "model_score": 57.8,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "H: narrow region centered at 120 degree e.g. (105,135)\nS: range between 0.5 and 1 centers around 0.75\nI: broad range"
    },
    {
      "question_id": "104",
      "model_score": 21.4,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " (1) A user may try to write/read directly from disk, this is no intervened by OS. \nWrite and read to a disk are issued by the OS only, this ensures that critical sections of the disk and its file system can be protected by malicious or buggy program. \n(2) A user may try to overwrite the timer to gain full control over the CPU, but this is prevented by the LDE setup of the OS, only OS can overwrite the timer."
    },
    {
      "question_id": "26",
      "model_score": 67.8,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "used for precision machining"
    },
    {
      "question_id": "104",
      "model_score": 49.5,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " 1) User may ask value at any address which as prevents if it is restricted\n2) User tries to change values of cr2/cr3 registers which it can't in user mode"
    },
    {
      "question_id": "95",
      "model_score": 99.9,
      "human_score": 2.0,
      "question": "Why the steeper main streams results in the Hydrographs with smaller time base?",
      "instructor_answer": "Steeper basin streams allows the run off  to leave the basin quickly because of high slope.Time base means the amount of time for run off to leave the catchment after the storm. So, if there is steeper slope,  excess run off will get out  quickly. Hence time base reduces.",
      "student_answer": "Steeper basin streams allows the run off  to leave the basin quickly because of high slope.Time base means the amount of time for run off to leave the catchment after the storm. So, if there is steeper slope,  excess run off will get out  quickly. Hence time base reduces."
    },
    {
      "question_id": "87",
      "model_score": 33.1,
      "human_score": 0.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "Size of particulates must be greater than the sand's size."
    },
    {
      "question_id": "43",
      "model_score": 78.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "False, context switching may happen to another process."
    },
    {
      "question_id": "31",
      "model_score": 72.4,
      "human_score": 0.0,
      "question": "In case we want to use a single discriminant function to handle a multiclass classification problem, what should be the response of the function when the feature vectors are input to it?",
      "instructor_answer": "single discriminant to handle multiclass classification we can use one vs rest approach. in which Funtion Should categorize the feature vectors in one class and rest in other class. This process can be iterated till all\npixels one classified.",
      "student_answer": "when we use a single discriminant function to a mutticlass classitication problem then there will be only two classes into which the feature classified"
    },
    {
      "question_id": "105",
      "model_score": 29.2,
      "human_score": 0.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " True\nPage fault leads to calling trap function.\nNow stack contains argument to trap function, return address.\nDuring the execution of trap function, the page fault is handled as described in the question and it returns.\nAs the return address in the stack is next instr ( i.e, the one after the faulting instruction)\nIt starts executing from that instruction."
    },
    {
      "question_id": "46",
      "model_score": 86.5,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Without the timer interrupt, the OS still has opportunities to schedule READY processes and share the CPU for multitasking",
      "instructor_answer": "True, the OS can use system calls as an event when it schedules some other process on the CPU to run. Various other events can also be seen as opportunities by the OS to perform scheduling operations",
      "student_answer": "\nTrue. This may happen if the process that is running calls a system call. This transfers the control to OS to schedule any new processes. \n"
    },
    {
      "question_id": "106",
      "model_score": 78.5,
      "human_score": 1.0,
      "question": "c. When the fork() system call is made the child process is (almost) identical to the parent\nprocess. In the parent process, the return path from kernel mode to user mode happens via\nthe trap/interrupt handler (system call is a trap/interrupt).\nExplain the return path from the kernel mode to the user mode for the child process.\nSpecifically, there was no trap in the child process, so how does the child process return from\na trap?",
      "instructor_answer": "- When a child process is created and is ready to execute, it is in the kernel mode.\nChild process needs context to execute in the kernel mode.\n- The context for execution of the child is setup to start execution at the start of a function\n(e.g., forkret) and the kernel stack of the child process is setup such that the return address is\nset as the return of the trap handler (e.g., trapret)\n- As a result, when a child process in the kernel is scheduled, it starts executing in a function\nand returns from it to the return address (the trap handler return address).\n- This emulates a call to the trap handler and a return from the handler and then proceeds with\nthe rest of the kernel stack unrolling to return to user space.",
      "student_answer": " The child process behaves as if it has been descheduled sometimes in past.\nThe fork system call sets the value of eax register (return value) in the stackframe of the child process to 0.\nSo, now when the child process is scheduled, it first sets the context in usual manner using the information stored in its stackframe. Chopping to CPU.\nIt stores the back the eip to point to the return address.\nafter the fork call, the eax register stores the return value and it first starts executing the instruction in usual sense. The eip of parent being stored in stackframe thus, does all the magic."
    },
    {
      "question_id": "78",
      "model_score": 37.9,
      "human_score": 1.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "peak load plant, base load plant, micro plant, cascade plant"
    },
    {
      "question_id": "78",
      "model_score": 93.8,
      "human_score": 2.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "Storage plant, cascade plant, pumped storage and run off river plant"
    },
    {
      "question_id": "26",
      "model_score": 44.2,
      "human_score": 0.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "used for multiple pass cases."
    },
    {
      "question_id": "72",
      "model_score": 17.2,
      "human_score": 0.0,
      "question": "What are the critical issues involved in design of an online compression system for space applications?",
      "instructor_answer": "Data rate should not exceed the channel capacity. Full capacity of the communication channel should be utilized. Maximum quality should be preserved.",
      "student_answer": "Hardware issue is always present, the processing resource, the hardware should be small enough and should utilize less computing power"
    },
    {
      "question_id": "45",
      "model_score": 72.7,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nd. Assuming an user process knows the PID of another task from a pool of several READY processes, it does not have the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "True, the user process has no control over which process will be scheduled next by the scheduler",
      "student_answer": "\nTRUE. Although it knows the PID, it does not have the privilege level to run the instructions for context switch."
    },
    {
      "question_id": "47",
      "model_score": 31.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call can be used in the parent process before the child process terminates.",
      "instructor_answer": "True, parent and child are entirely two different processes. Parent can perform any operation that it wants including exec.",
      "student_answer": "\nFalse, as the parent process forks child process it means system call can use only if child process is terminated"
    },
    {
      "question_id": "66",
      "model_score": 76.0,
      "human_score": 2.0,
      "question": "Two advantages of using multiple based valuation method are _________________________ and _________________________________",
      "instructor_answer": "Quick and Convenient, Market Based data reflecting the markets growth and risk expectations.",
      "student_answer": "1. Quick & convenient method \n2. Market-based method where market's growth, risk expectations and overall sentiment is incorporated"
    },
    {
      "question_id": "86",
      "model_score": 66.8,
      "human_score": 2.0,
      "question": "What is the need to use homogenous coordinates for 2D transformations?",
      "instructor_answer": "for uniform matrix representation of rotation, translation, scaling. this allow optimization and makes it easier for the computer to calculate.",
      "student_answer": "To apply linear transformations to 2D coordinates we use homogenous coordinates in 3D. this helps in the projection of various 3D object into 2d space, where the 2d space can be appropriately scaled as (x,y)-> (alpha x, alpha y, alpha)"
    },
    {
      "question_id": "84",
      "model_score": 84.7,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "Some functions like the XOR function are not linearly separable and they require two lines to the separate the points. Hence we require a multilayer perceptron classifier to solve this problem, instead of a single perceptron classifier."
    },
    {
      "question_id": "54",
      "model_score": 62.3,
      "human_score": 2.0,
      "question": "The appetitive      faculty corresonds to      ",
      "instructor_answer": "Plato's theory of the soul, the appetitive faculty is one of the 3 divisions of the soul. It is the part dealing with desires and passions",
      "student_answer": "It corresponds to desires of human being eg. pleasure of weath and desire for food."
    },
    {
      "question_id": "40",
      "model_score": 38.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "True\nIt is standard setting to use fd[0] to read & fd[1] to write.\n"
    },
    {
      "question_id": "65",
      "model_score": 22.1,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1: This leads us to use that variable anywhere by just declaring it.Like if we define a global variable a,then we can use it anywhere in the program, but if we declare a there then value of a will be fixed in the program.\n\n2: This helps us in the program of dynamic binding where we can inherited other class object into other class star type variable.\n  A *a;  B *b = new B();   // A and B are two classes\n   a=b;                              // in this way, we can inherited b into a."
    },
    {
      "question_id": "49",
      "model_score": 85.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": "False, each execution has different PCB, one does not interact with the other execution."
    },
    {
      "question_id": "105",
      "model_score": 84.8,
      "human_score": 2.0,
      "question": "c. Assume the OS is using a lazy allocation policy for memory allocation to processes. On a page fault due to an unmapped physical page(and a valid virtual address), the OS handles the page fault (via allocation and updates to the virtual to physical address mappings in the page table) and then executes the next instruction (the one after the faulting instruction).",
      "instructor_answer": "FALSE\nFixing the mapping is only part of operations, the OSes page fault handler creates the\nmappings and returns from the handler and re-executes the faulting instruction. On a page\nfault the PC is not incremented.",
      "student_answer": " FALSE.\nIf the faulting inst is a write, this would lead to loss of data.\nOS has to ensure this does not happen.\nIt first allocates the page & proceeds to complete the instruction, then moves on to the next instruction."
    },
    {
      "question_id": "76",
      "model_score": 11.1,
      "human_score": 1.0,
      "question": "What are the two important aspects of reservoir routing under a flood control criterion?",
      "instructor_answer": "peak discharge reduced and\n peak flow gets shifted",
      "student_answer": "1) Helps in assessing reservoir levels in extreme storms, and hence helps in construction of dams and other offshore structures, including hydroelectric projects.\n\n2) It helps us in estimating duration of peak flood, enabling us to take remedial measures such as stream diversions beforehand. "
    },
    {
      "question_id": "104",
      "model_score": 13.7,
      "human_score": 0.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " -> user can increase the size of heap\nmay try to change SIGKII function by\ndefining Pt."
    },
    {
      "question_id": "81",
      "model_score": 50.9,
      "human_score": 0.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "very low eigen value implies that variance is almost constant in all direction."
    },
    {
      "question_id": "56",
      "model_score": 72.3,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "sufficiency, efficiency, and consistency"
    },
    {
      "question_id": "49",
      "model_score": 89.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. [6 marks] No correct justification, no marks. \n\nd. An executable (binary) program can be used to instantiate and execute more than one process simuitaneous.y. In such a situation, processes of the same program use the same PCB process-conro.Dock, with a reference counter to indicate number of instances,",
      "instructor_answer": "FALSE\nEach process is an independent entity and needs a separate OS state to track its execution          \nmemory contents, open files, memory allocations, stack state etc. A shared PCB cannot\nprovide this semantics.",
      "student_answer": " False.\nEach process is independent and have separate PCBs.\nNo other process can access or write in the PCB of other process."
    },
    {
      "question_id": "78",
      "model_score": 98.2,
      "human_score": 2.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "run of river plant \nstorage plant \ncascade plant pumped storage plant "
    },
    {
      "question_id": "56",
      "model_score": 76.6,
      "human_score": 1.0,
      "question": "The desirable properties of an estimator in statistics are",
      "instructor_answer": "Unbiased, Consistency, Efficiency and Sufficiency ",
      "student_answer": "consistency, efficiency,sufficiency"
    },
    {
      "question_id": "65",
      "model_score": 70.9,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. Separating class member function definitions from their declarations helps prevent class declaration from getting cluttered and makes it easier for the programmer to work upon. \n2. Only a brief look from the reader would be required to understand the upper level functioning of the class, that is, the functions available for their use and their signatures/whether they are virtual or not."
    },
    {
      "question_id": "81",
      "model_score": 89.8,
      "human_score": 2.0,
      "question": "What is conveyed by the very low eigenvalues with principal component transform applied to high dimensional data?",
      "instructor_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance and are highly corelated with some other vector. These axes are not useful and can be discard during dimensionality reduction.",
      "student_answer": "A very low eigen value refers to axes (eigenvectors) along which the data has very low variance. These axes are not useful and can be discard during dimensionality reduction."
    },
    {
      "question_id": "65",
      "model_score": 41.7,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1.) We get the complete view of all members functions declared in class at once. So that"
    },
    {
      "question_id": "23",
      "model_score": 98.0,
      "human_score": 2.0,
      "question": "Following forces are considered in Navier Stokes equation:",
      "instructor_answer": "pressure, gravitational force, viscous force",
      "student_answer": "gravity force , pressure force , viscous "
    },
    {
      "question_id": "30",
      "model_score": 14.3,
      "human_score": 0.0,
      "question": "If there is one explanatory variable, regression analysis is termed as (                                                               )       else it is termed as (                                                                             )",
      "instructor_answer": "Univariate and Multivariate",
      "student_answer": "linear conditional regression and multiple regression"
    },
    {
      "question_id": "52",
      "model_score": 60.2,
      "human_score": 0.0,
      "question": "Strain is a      ",
      "instructor_answer": "Strain is a ratio of change in length to the original length.",
      "student_answer": "Strain is a mechanical property developed in a material due to stress\n"
    },
    {
      "question_id": "26",
      "model_score": 43.7,
      "human_score": 2.0,
      "question": "Give any application of broaching process.",
      "instructor_answer": "used for custom, precision machining like in automotive industries and for machining of gears, splines etc. it is also used in making slots for support",
      "student_answer": "Broaching process used in gear formation"
    },
    {
      "question_id": "63",
      "model_score": 47.7,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "we can use mask. Also, for green leaves and stem segmentation broad range of H around 90-210 degrees and range of S in between 0 to 0.8"
    },
    {
      "question_id": "80",
      "model_score": 9.7,
      "human_score": 0.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "symmetry about two orthogonal planes"
    },
    {
      "question_id": "100",
      "model_score": 84.6,
      "human_score": 2.0,
      "question": "Write any two limitations of AJM.      ",
      "instructor_answer": "Low Material removal rate (MRR) , Limited nozzle life, High cost",
      "student_answer": "low mrr, nozzle life is limited"
    },
    {
      "question_id": "65",
      "model_score": 49.5,
      "human_score": 1.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)declaring function first unables us to use the function elesewhere without thinking about its defination.\n2) an defination for the function can be provided according to where it is used."
    },
    {
      "question_id": "69",
      "model_score": 98.9,
      "human_score": 2.0,
      "question": "Usable life of a reservoir is",
      "instructor_answer": "It is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes",
      "student_answer": "is the period of time, extending beyond the useful/economic life, until which the reservoir can continue to serve some of its purposes"
    },
    {
      "question_id": "34",
      "model_score": 25.9,
      "human_score": 0.0,
      "question": "Key steps in anaerobic digestion process are                                                                                                                                                          .",
      "instructor_answer": "The four key stages of anaerobic digestion involve hydrolysis, acidogenesis, acetogenesis and methanogenesis.",
      "student_answer": "Segregation, Preparing the waste by adding water and turning, microbes in action, dumping of digestate"
    },
    {
      "question_id": "64",
      "model_score": 64.7,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "Red is around 0 degree Hue, so narrow range or 0 to 10 can be sele"
    },
    {
      "question_id": "92",
      "model_score": 23.2,
      "human_score": 0.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "The edge detection is non maximal suppression . This searches in gradient direction at every pixel whether the gradient magnitude is highest when it compared to its neighbour."
    },
    {
      "question_id": "78",
      "model_score": 93.1,
      "human_score": 2.0,
      "question": "What are the types of hydropower plants based on hydraulic characteristics?",
      "instructor_answer": "Run-of-river river plant\nStorage plant\nCascade plant\nPumped storage plant",
      "student_answer": "Run of river plant, storage plant, cascade plant, pumped storage plant"
    },
    {
      "question_id": "63",
      "model_score": 50.5,
      "human_score": 2.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "\"a narrow range around 120      degrees for H\", \n\"a range around 0.75 to 1 for I\",(condition on I is not that strict)\n\"a range from [0, 0.15] and [0.85,1] for S\""
    },
    {
      "question_id": "80",
      "model_score": 79.6,
      "human_score": 2.0,
      "question": "What is an orthotropic material ?",
      "instructor_answer": "Orthotropic materials have 9 elastic constants.They also have material properties at a particular point which differ along 3 orthogonal axes.",
      "student_answer": "orthtropic materials have symmetry about its orthogonal plane and have 9 elastic independent constant"
    },
    {
      "question_id": "64",
      "model_score": 44.6,
      "human_score": 1.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "we consider narrow band around above 0 and narrow band below 360 in hue space"
    },
    {
      "question_id": "48",
      "model_score": 29.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "False, exec syscall is just loading another process into the current process and running it. It has no relation to the child process's termination."
    },
    {
      "question_id": "102",
      "model_score": 62.4,
      "human_score": 1.0,
      "question": "Write three      parameters which      affect MRR in ultrasonic machining ?",
      "instructor_answer": "Frequency of vibration, Amplitude of vibration, Abrasive slurry concentration, Slurry Particle Diameter",
      "student_answer": "amplitude of motion for tool, area of cross section of tool and frequency of motion of tool"
    },
    {
      "question_id": "51",
      "model_score": 24.5,
      "human_score": 0.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1.The colloidal particles are electrically charged.\n2.They are in a size range of 1-1000nm \n3.They are also capable of doing adsorptio"
    },
    {
      "question_id": "84",
      "model_score": 88.3,
      "human_score": 2.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "A single layer perceptron classifier is linear in nature, however a XOR function can't be modelled using a linear function. On the other hand a multilayer perceptron classifier takes in acount the non-linearities & hence can model XOR efficiently"
    },
    {
      "question_id": "68",
      "model_score": 62.1,
      "human_score": 1.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "a multilayer perception network would give more efficiency than a single layer since it can detect features in better way and more complex relations can be understood"
    },
    {
      "question_id": "65",
      "model_score": 27.5,
      "human_score": 0.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1)we can include global variables easily if we declare the functions outside the class\n2) we can use dynamic binding by taking the function type virtual and declare it differently in different derived classes"
    },
    {
      "question_id": "43",
      "model_score": 90.2,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "FALSE. The scheduler decides whether to reschedule the previous running process or switch to a different process."
    },
    {
      "question_id": "68",
      "model_score": 65.9,
      "human_score": 2.0,
      "question": "Under which circumstances is a multilayer perceptron neural network with multiple hidden layers (&gt;1 layer) desirable?",
      "instructor_answer": "when more deep learning or critical learning of features are required, then more hidden layers are required to extract out and learn feautres properly and efficiently so as to perform further tasks well. example- multiclass classification, XOR function ",
      "student_answer": "a multilayer perceptron with multiple hidden layer is desirable when it is known that our data is highly non-linear and there is a complex relation which exist between input and output which can't be expressed as direct known mathematical functions. otherwise the model will get overfit and generalisation will be very less."
    },
    {
      "question_id": "82",
      "model_score": 46.2,
      "human_score": 0.0,
      "question": "What is the advantage of a nonlinear discriminant function classifier over a linear one?",
      "instructor_answer": "If the feature vector of the data points in the feature space are not linearly separable then the linear classifier wont be able to classify over such a datset. On the other hand non linear classifier are better suited at handling such cases as they are able to create more complex decision boundaries.",
      "student_answer": "Using a linear discriminant may not be sufficient to consider all possible cases at consideration."
    },
    {
      "question_id": "51",
      "model_score": 73.0,
      "human_score": 1.0,
      "question": "State any two reasons for electrical charge on the surface of colloidal particles.",
      "instructor_answer": "Ionisation of active sites such as OH and COOH groups depending on pH of medium. Imperfection in crystal structure ( atoms of low valency replace silicon reducing positive charge, hence net charge becomes negative),  Adsorption of anions onto the surface of particles. \n",
      "student_answer": "1) adsorption of ions\n2)replacement of ions in av structure with an ion of less valency eg: in silicon structure "
    },
    {
      "question_id": "42",
      "model_score": 72.6,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. Assuming an user process knows the PID of another target process (from a pool of several READY processes), it has the capability to initiate a context switch and schedule the target process next on the CPU.",
      "instructor_answer": "False, only the scheduler can decide which process will run next. Even if the user process tries to run a different process using some signals, it cannot be guaranteed that the scheduler will actually run that process next.",
      "student_answer": "\nFalse, Context switch is done by OS, and cannot be accessed by a user level process. \n"
    },
    {
      "question_id": "70",
      "model_score": 97.2,
      "human_score": 2.0,
      "question": "What approach should be followed to find a reasonable probability distribution for a given time series?",
      "instructor_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanalysis the results\n",
      "student_answer": "Detecting the distribution\nanalysing the distribution\nfitting the model\nchecking goodness of fit of the model by chi square test \nanylysis the results\n"
    },
    {
      "question_id": "27",
      "model_score": 46.3,
      "human_score": 0.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "Uses of lasers are as follows:                           1.Making of straight long tunnels.                 2.Make highly efficient design on metal surface."
    },
    {
      "question_id": "44",
      "model_score": 32.3,
      "human_score": 0.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. Without the timer interrupt, the OS has no opportunities to schedule READY processes and share the CPU for multitasking.",
      "instructor_answer": "False, OS can use system calls as an event to switch between processes. It won't provide fair execution but still the OS can schedule different processes.",
      "student_answer": "True\nIt requires control on interrupts and syscalls but can't be dependent on it for an efficient handling.\n"
    },
    {
      "question_id": "95",
      "model_score": 79.1,
      "human_score": 2.0,
      "question": "Why the steeper main streams results in the Hydrographs with smaller time base?",
      "instructor_answer": "Steeper basin streams allows the run off  to leave the basin quickly because of high slope.Time base means the amount of time for run off to leave the catchment after the storm. So, if there is steeper slope,  excess run off will get out  quickly. Hence time base reduces.",
      "student_answer": "in steeper main streams the time of concentration is low as water reaches the stream faster. This leads to a smaller time to peak as well as smaller time base."
    },
    {
      "question_id": "43",
      "model_score": 27.6,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "No, when the interrupt is of implicit-software type (like division by 0), the program is killed immediately & not rescheduled."
    },
    {
      "question_id": "41",
      "model_score": 57.4,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nb. A process executing on the CPU is interrupted due to an interrupt. This process may not be scheduled immediately on completion of the interrupt handler.",
      "instructor_answer": "True, if the time slice of the process ends while the OS is handling the interrupt, it is possible that a different process is scheduled after the interrupt handler code is completed and not the previous process.",
      "student_answer": "\nTrue, it is possible that the process may not be rescheduled immediately due to delay associated with the scheduler mechanism used, i.e., it may not get another processor immediately or may not be scheduled immediately on completion of its own, even though there are no other READY processes and it is its turn to share the CPU for multitasking.\n"
    },
    {
      "question_id": "43",
      "model_score": 90.1,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\nc. A process executing on the CPU is interrupted due to an interrupt. This process is always rescheduled immediately (and control returns back to the paused process) on completion of the interrupt handler to prevent any data loss.",
      "instructor_answer": "False, some other process can also be scheduled on the CPU next if the time slice for the first process expires.",
      "student_answer": "\n$\\rightarrow$ False, there is a chance that context switching happens and CPU schedules some other process.\n"
    },
    {
      "question_id": "84",
      "model_score": 63.5,
      "human_score": 1.0,
      "question": "What is the difference between the performance of a perceptron classifier and a multilayer perceptron classifier when it is about handling the XOR problem?",
      "instructor_answer": "XOR is not linearly separable. A perceptron classifier, which can learn only  linear features can not solve this effectively; while a multilayer perceptron classifier can since it Can learn non-linear features.",
      "student_answer": "A perceptron is only used when linearly separable data is to be converged. therefore it cannot initiate the XOR function"
    },
    {
      "question_id": "27",
      "model_score": 42.4,
      "human_score": 1.0,
      "question": "Give two uses of lasers",
      "instructor_answer": "cutting and welding purpose, used in medical surgery, optical fibre communication , laser printing  are some uses of lasers.",
      "student_answer": "conducting precise surgeries (LASIK)\nhair removal treatment\n\n\n\n"
    },
    {
      "question_id": "65",
      "model_score": 58.9,
      "human_score": 2.0,
      "question": "Two      advantages of separating declaration from definition are: .....",
      "instructor_answer": "The code will be more clear and easier for the reader to understand. Allows easy changing, debugging, and overriding of the functions. Enhances modularity of the code. This also separates the abstraction from the implementation.",
      "student_answer": "1. declaring all methods together give abstract insight.\n2. easily readable and clear code"
    },
    {
      "question_id": "40",
      "model_score": 85.3,
      "human_score": 2.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\na. The pipe system call creates two file descriptors fd[0] and fd[1]. Writes using fd[1] can be read using fd[0] but not vice-versa.",
      "instructor_answer": "True, pipe system call only allows for one directional read. Read can only be done from fd[0] and write can only be done at fd[1].",
      "student_answer": "\nTrue, because write permissions are not there for fd[0], so, we can't write to fd[0] and read it from fd[1]."
    },
    {
      "question_id": "37",
      "model_score": 90.4,
      "human_score": 2.0,
      "question": "Negative electrode used in Nickel         MH Batteries are _____________.",
      "instructor_answer": "Hydrogen absorbing alloys (MH)",
      "student_answer": "hydrogen absorbing alloy"
    },
    {
      "question_id": "63",
      "model_score": 67.2,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "I range should be a broad range around 0.4, more towards the darker range the green is duller than at I nearly equal to 1.\nSaturation should be a very narrow window near 1.\nHue should be a moderate sector (40-50 degrees) around 140 degrees, the color is towards green and between yellow and green is 120 degrees and yello\nThis takes care of the green to yellowish - green color of all intensities to be classified as leaf and stem."
    },
    {
      "question_id": "64",
      "model_score": 83.9,
      "human_score": 2.0,
      "question": "To segment the rose petals [4 marks]:      ",
      "instructor_answer": "To segment rose petals\nH (Hue) -- Narrow range around 0/360 degress ( Red has hue of 0)\nS (saturation) -- Close to 0.8-1 (Red is primary color and all primary colors are pure colors)\nI (intensity) -- Broad range around 0.5",
      "student_answer": "To segment rose petals we take product of saturation of saturation mask and hue having hue with narrow range around 0       and 360       and I have braod  range around 0.5."
    },
    {
      "question_id": "90",
      "model_score": 63.7,
      "human_score": 2.0,
      "question": "What is the utility of nonlinearly transforming the feature vectors from classification point of view?",
      "instructor_answer": "Introducing non-linearity in the feature can help us innovate models that can learn much complex data patterns. A non-linear feature can be used with very basic classifiers like SVM to efficiently and effectively classify very complex data sets.",
      "student_answer": "From classification point of view, transforming the feature vectors help us in classification process. Transforming feature vectors into higher dimensions provide an opportunity to linearly separate the classes."
    },
    {
      "question_id": "92",
      "model_score": 59.9,
      "human_score": 1.0,
      "question": "Which image analysis applications benefit from interest points like corners?",
      "instructor_answer": "Harris Corner detection from the corner we can Improve image segmentation, it we have corners we can detect edges more efficiently. By using corner details we can Improve objected classitication. It is used in many Computer vision applications.",
      "student_answer": "Motion detection, Image registration, video tracking, object recognition & detection, image segmentation."
    },
    {
      "question_id": "88",
      "model_score": 65.0,
      "human_score": 0.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "1.To reduce the turbidity.\n2.To equalise the concentration\n3.To equalize the pH of the waste water"
    },
    {
      "question_id": "94",
      "model_score": 47.9,
      "human_score": 0.0,
      "question": "Why for an asymmetric variable, median is the best measure of central tendency?",
      "instructor_answer": "because around median 50 percent of the distribution is on the left and 50 percent is on the right , so in case of asymmetrial distribution where it is skewed, median will be the best measure of central tendency as mean in case of assymetrical distribution is not accurate measure of central tendency",
      "student_answer": "it is best for variables not symmetrically distributed"
    },
    {
      "question_id": "63",
      "model_score": 60.8,
      "human_score": 1.0,
      "question": "To segment the green leaves and stem [4 marks]:",
      "instructor_answer": "Hue should be centered around 120 degrees for green color. Intensity should be ranged around 0.5. Saturation range should also be around 0.5 as some blackish portion is seen in the stem. In this case, The saturation is low .",
      "student_answer": "Hue for green is +120degree. So threshold can be narrow range around 120degree eg. 115degree to 125 degree."
    },
    {
      "question_id": "88",
      "model_score": 78.1,
      "human_score": 2.0,
      "question": "What is the role of an equalization tank in waste water treatment?",
      "instructor_answer": "The equalization tanks are provided to-\n1. To balance fluctuating flows or concentrations.\n2. To assist self-neutralization.\n3. To even out the effect of a periodic slug discharge from a batch process.",
      "student_answer": "1. to balance the fluctuating flow of water\n2. to assist self neutralization\n3. to even out the effect of periodic sludge discharge from a process"
    },
    {
      "question_id": "36",
      "model_score": 87.8,
      "human_score": 2.0,
      "question": "List four factors affecting water consumption.",
      "instructor_answer": "1) Climatic conditions\n2) geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available\n6) population of area",
      "student_answer": "1) Climatic conditions b\n2) Geography of the region \n3) Extent of industrialization\n4) Quality of lifestyle\n5) Quality of water available"
    },
    {
      "question_id": "48",
      "model_score": 81.9,
      "human_score": 1.0,
      "question": "Q1. State TRUE or FALSE and justify. No correct justification, no marks.\ne. If a parent process forks a new child process, the exec system call cannot be used in the parent process until the child process terminates.",
      "instructor_answer": "False, parent and child processes are two independent processes. Parent can perform any operation that it likes including an exec system call.",
      "student_answer": "\nFalse, the order of parent, child execution is not fixed unless wait() is called."
    },
    {
      "question_id": "104",
      "model_score": 64.6,
      "human_score": 1.0,
      "question": "a. List and explain two privileged actions that an user process may attempt to perform and which\nare prevented by the OS via the limited-directed execution setup.\nNote that the user process has to know specifically how to make such an attempt.\n(e.g., the user process does not know that a PCB exists and hence may not know how to\nupdate its contents).",
      "instructor_answer": "- Write to CR3 register to modify page directory pointer\n- Write to the EFLAGS registers to modify execution status (zero bit, interrupt enable/disable)\n- Write to the IDTR register to change location of IDT\n- Access to VA that lies in the kernel virtual address range",
      "student_answer": " Modifying kernel registers - Consider the register holding the timer interval value. A user process may call mvit. The OS prevents this by setting a minimum PL on such instructions.\nDereferencing addresses above KERNBASE. For example -> (0x FFFFF000) . The OS detects this as exceeding the bounds of the allocated size (PROC -> SZ) and raises an exception."
    },
    {
      "question_id": "87",
      "model_score": 39.7,
      "human_score": 0.0,
      "question": "What is the principal mechanism of particulate removal in the slow sand filter?",
      "instructor_answer": "bio-filtration ie allowing the microorganisms to form and a thin layer on the sand-water interface (schmutzdecke) called hypogeal layer  and allowing it to remove viruses and bacteria is the main mechanism of particulate removal in slow sand filter",
      "student_answer": "microorganisms begin to grow and"
    }
  ]
}